<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/5.2.4" created="2019-12-05 13:56" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
	>

	<channel>
		<title>L3away</title>
		<link>https://l3away.cn</link>
		<description>&#34;那我打得过就打咯，我打不过就跑&#34;</description>
		<pubDate>Thu, 05 Dec 2019 13:56:48 +0000</pubDate>
		<language>zh-CN</language>
		<wp:wxr_version>1.2</wp:wxr_version>
		<wp:base_site_url>https://l3away.cn</wp:base_site_url>
		<wp:base_blog_url>https://l3away.cn</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[PwnForWhat]]></wp:author_login><wp:author_email><![CDATA[453546129@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[PwnForWhat]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		
		<generator>https://wordpress.org/?v=5.2.4</generator>

		<image>
			<url>https://l3away.cn/wp-content/uploads/2018/06/cropped-887558-1-32x32.jpg</url>
			<title>L3away</title>
			<link>https://l3away.cn</link>
			<width>32</width>
			<height>32</height>
		</image> 

		<item>
			<title>初探 树状数组与繁忙的公路</title>
			<link>https://l3away.cn/?p=36</link>
			<pubDate>Thu, 14 Jun 2018 08:34:54 +0000</pubDate>
			<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
			<guid isPermaLink="false">http://l3away.cn/?p=36</guid>
			<description></description>
			<content:encoded><![CDATA[<h3>树状数组</h3>
			这篇专栏讲得好：<a href="https://zhuanlan.zhihu.com/p/25185969">https://zhuanlan.zhihu.com/p/25185969</a>
			<h4>功能</h4>
			<!--more-->
			树状数组的本职是<strong>单点修改+区间查询</strong> 维护前缀和 每次修改向上传数据
			<h4>关键代码</h4>
			<pre class="EnlighterJSRAW" data-enlighter-language="null">//第x位加num
				void add(int x,int num){
				for(;x&lt;=n;x+=x&amp;-x)
				tree[x]+=num;
				}</pre>
				<pre class="EnlighterJSRAW" data-enlighter-language="null">//查询x位的前缀和
					int sum(int x) {
					int answer =0;
					for(; x&gt;0; x-=x&amp;-x)
					answer+=tree[x];
					return answer;
					}</pre>
					<h4>例题</h4>
					<h5>Description</h5>
					<pre>在一条笔直的大道（单方向行车道）上，汽车川流不息。道路从起点到终点，等距离的标记了1到N，
						即起点是1，然后分别是2、3、4.....，终点是N。每一个标记处，安装了智能探头，可以感知
						在该点处车辆的增减数量。
						一开始，整条道路上，没有车，然后，是不断接收到的智能探头发回的信息，格式如下：
						H 5 9
						H表明收到的是智能探头的回传信息，5表示标记5处的车辆信息，9表示该处车辆增加了9辆。
						同时，在某个时刻，需要查询在一段连续的道路上，共有多少辆车
						查询格式如下：
						Q 3 10
						Q表明收到的是查询，3是起点，10是终点（包括3和10两处）
						要求编程实现正确处理上述信息处理和查询</pre>
						<h5>输入格式</h5>
						<pre>第一行一个整数N（1&lt;=N&lt;=1,000,000），表示标记范围是1到N
							第二行一个整数M（1&lt;=M&lt;=100,000），表示探头信息（或查询）的总数量
							此后M行，每行一个探头信息或查询请求</pre>
							<div>
								<h5>输出格式</h5>
								<pre>每逢遇到查询的时候，输出查询范围内的有多少辆车，占一行，查询结果最大不超过2的63次方</pre>
							</div>
							<h5>输入样例</h5>
							<pre>10
								4
								H 5 10
								Q 1 10
								H 6 20
								Q 1 10
							</pre>
							<h5>输出样例</h5>
							<pre>10
								30
							</pre>
							<h5>提示</h5>
							<pre>开始时，整条路上没有车辆

							</pre>
							<h4>代码</h4>
							<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include &lt;iostream&gt;
								#include &lt;cstring&gt;
								using namespace std;
								int tree[1000010],n,m;
								void add(int x,int num){
								for(;x&lt;=n;x+=x&amp;-x)
								tree[x]+=num;
								}
								long long sum(int x) {
								long long answer =0;
								for(; x&gt;0; x-=x&amp;-x)
								answer+=tree[x];
								return answer;
								}
								int main() {
								memset(tree,0,sizeof(tree));
								ios::sync_with_stdio(false);
								cin&gt;&gt;n&gt;&gt;m;
								for (int i=0; i&lt;m;i++){
								char action;
								int opNumA,opNumB;
								cin&gt;&gt;action&gt;&gt;opNumA&gt;&gt;opNumB;
								switch(action){
								case 'Q':
								cout&lt;&lt;sum(opNumB)-sum(opNumA-1)&lt;&lt;"\n";
								break;
								case 'H':
								add(opNumA,opNumB);
								break;
								}
								}
								}</pre>
								&nbsp;]]></content:encoded>
								<excerpt:encoded><![CDATA[]]></excerpt:encoded>
								<wp:post_id>36</wp:post_id>
								<wp:post_date><![CDATA[2018-06-14 16:34:54]]></wp:post_date>
								<wp:post_date_gmt><![CDATA[2018-06-14 08:34:54]]></wp:post_date_gmt>
								<wp:comment_status><![CDATA[open]]></wp:comment_status>
								<wp:ping_status><![CDATA[open]]></wp:ping_status>
								<wp:post_name><![CDATA[%e5%88%9d%e6%8e%a2-%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e4%b8%8e%e7%b9%81%e5%bf%99%e7%9a%84%e5%85%ac%e8%b7%af]]></wp:post_name>
								<wp:status><![CDATA[publish]]></wp:status>
								<wp:post_parent>0</wp:post_parent>
								<wp:menu_order>0</wp:menu_order>
								<wp:post_type><![CDATA[post]]></wp:post_type>
								<wp:post_password><![CDATA[]]></wp:post_password>
								<wp:is_sticky>0</wp:is_sticky>
								<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
								<wp:postmeta>
									<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
									<wp:meta_value><![CDATA[1]]></wp:meta_value>
								</wp:postmeta>
							</item>
							<item>
								<title>简单的三角形中不简单的关系</title>
								<link>https://l3away.cn/?p=116</link>
								<pubDate>Thu, 28 Jun 2018 08:38:14 +0000</pubDate>
								<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
								<guid isPermaLink="false">https://l3away.cn/?p=116</guid>
								<description></description>
								<content:encoded><![CDATA[<h3>Description</h3>
								<pre>著名的数学家毕达哥拉斯可能从来都不曾想过有人居然会问他这样的一个问题：给出一个整数，存在多少个直角三角形，
									它的内切圆半径等于这个整数，而且其他边的长度也是整数。既然毕达哥拉斯不可能预见到有计算机的出现，
									如果他回答不出来，那谁又能责怪他呢？但是现在既然你有了计算机，那么回答不出来就说不过去了。</pre>
									<!--more-->
									<div>
										<h3>输入格式</h3>
										<pre>第一行有一个整数n，代表有多少个数据（1&lt;=n&lt;=20）。接下来有n行，每行代表一个数据。一个数据就是一个整数r，内切圆半径（1&lt;=r&lt;=100）。
										</pre>
									</div>
									&nbsp;
									<div>
										<h3>输出格式</h3>
										<pre>每个数据都必须有相应的输出。两个数据的输出之间有一个空行。
											对于每一个数据，如果找不到解，则输出一个空行。如果找到解，就把符合条件的所有直角三角形输出。每个三角形占一行，输出该三角形三边，按由短到长，
											必须先输出短边，然后一个逗号，再输出长边。两个三角形之间不能有空行，而且必须按照短边升序排列。
										</pre>
									</div>
									&nbsp;
									<h3>输入样例</h3>
									<pre>2
										5
										10</pre>
										<h3>输出样例</h3>
										<pre>11,60,61
											12,35,37
											15,20,25

											21,220,221
											22,120,122
											24,70,74
											25,60,65
											28,45,53
											30,40,50

										</pre>
										<h3>分析</h3>
										<pre>这道题用暴力的方法无误，但不是粗鲁的暴力 （O(n*n*n)），而是有技巧的暴力。

											对于这种多变量的暴力题，可以尽可能地缩小变量的范围，比如最短边a 的范围应该为：

											2*r+1  &lt; a &lt; (2+sqrt(2))*r

											而对于第二条边，可以利用换元，先让t = 2r + 1；以此不依靠c来算出b，进而算出c；

											最后再验算直角关系，复杂度变成 O(n)。</pre>
											<h3>代码</h3>
											<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include &lt;iostream&gt;
												#include &lt;cmath&gt;
												using namespace std;
												int main() {
												int a,b,c,r,t,kase;
												cin&gt;&gt;kase;
												while (kase--) {
												cin&gt;&gt;r;
												for (a = 2*r+1; a &lt;= (2+sqrt(2))*r; a++) {
												t = 2*r-a;
												b = (t*t-a*a)/2/t;
												c = b-t;
												if (a*a + b*b == c*c) cout&lt;&lt;a&lt;&lt;","&lt;&lt;b&lt;&lt;","&lt;&lt;c&lt;&lt;endl;
												}
												cout&lt;&lt;endl;
												}
												}</pre>]]></content:encoded>
												<excerpt:encoded><![CDATA[]]></excerpt:encoded>
												<wp:post_id>116</wp:post_id>
												<wp:post_date><![CDATA[2018-06-28 16:38:14]]></wp:post_date>
												<wp:post_date_gmt><![CDATA[2018-06-28 08:38:14]]></wp:post_date_gmt>
												<wp:comment_status><![CDATA[open]]></wp:comment_status>
												<wp:ping_status><![CDATA[open]]></wp:ping_status>
												<wp:post_name><![CDATA[%e7%ae%80%e5%8d%95%e7%9a%84%e4%b8%89%e8%a7%92%e5%bd%a2%e4%b8%ad%e4%b8%8d%e7%ae%80%e5%8d%95%e7%9a%84%e5%85%b3%e7%b3%bb]]></wp:post_name>
												<wp:status><![CDATA[publish]]></wp:status>
												<wp:post_parent>0</wp:post_parent>
												<wp:menu_order>0</wp:menu_order>
												<wp:post_type><![CDATA[post]]></wp:post_type>
												<wp:post_password><![CDATA[]]></wp:post_password>
												<wp:is_sticky>0</wp:is_sticky>
												<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
												<wp:postmeta>
													<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
													<wp:meta_value><![CDATA[1]]></wp:meta_value>
												</wp:postmeta>
											</item>
											<item>
												<title>一不小心就会被忘记的最长公共子序列算法</title>
												<link>https://l3away.cn/?p=119</link>
												<pubDate>Thu, 28 Jun 2018 08:55:43 +0000</pubDate>
												<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
												<guid isPermaLink="false">https://l3away.cn/?p=119</guid>
												<description></description>
												<content:encoded><![CDATA[<h3>Description</h3>
												<pre>给定两个字符串，请输出这两个字符串的最大公共子序列

												</pre>
												<!--more-->
												<div>
													<h3>输入格式</h3>
													<pre>两行，一行一个字符串（不包括空格，Tab键）,长度不超过1000</pre>
												</div>
												<div>
													<h3>输出格式</h3>
													<pre>输出最大公共子序列的长度</pre>
												</div>
												<h3>输入样例</h3>
												<pre>abbca
													aba</pre>
													<h3>输出样例</h3>
													<pre>3


													</pre>
													<h3>分析</h3>
													<pre>假设串为a，b

														数组 ans[i][j] 表示a的前i个字符的组成的子串 与 b的前j个字符组成的子串的最长公共子序列的长度

														显然，当i = 0 或 j = 0 时，ans[i][j] = 0;

														而如果 上一位相等 ，即a[i-1] == b[j-1] 的话，最长公共子序列长度加一。

														否则就将上一个状态的最大值保留下来，继续寻找下一个相同的位数。</pre>
														<h3>代码</h3>
														<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
															#include &lt;string&gt;
															#include &lt;algorithm&gt;

															using namespace std;

															int main(){
															string a,b;
															cin&gt;&gt;a&gt;&gt;b;
															int len_a = a.size();
															int len_b = b.size();
															int c[len_a+1][len_b+1];
															for (int i = 0; i &lt;= len_a; i++) {
															for (int j = 0; j &lt;= len_b; j++) {
															if (i == 0 || j == 0) c[i][j] = 0;
															else if (a[i-1] == b[j-1]) c[i][j] = c[i-1][j-1] + 1;
															else c[i][j] = max(c[i-1][j],c[i][j-1]);
															}
															}
															cout&lt;&lt;c[len_a][len_b];
															}</pre>
															&nbsp;

															&nbsp;]]></content:encoded>
															<excerpt:encoded><![CDATA[]]></excerpt:encoded>
															<wp:post_id>119</wp:post_id>
															<wp:post_date><![CDATA[2018-06-28 16:55:43]]></wp:post_date>
															<wp:post_date_gmt><![CDATA[2018-06-28 08:55:43]]></wp:post_date_gmt>
															<wp:comment_status><![CDATA[open]]></wp:comment_status>
															<wp:ping_status><![CDATA[open]]></wp:ping_status>
															<wp:post_name><![CDATA[%e4%b8%80%e4%b8%8d%e5%b0%8f%e5%bf%83%e5%b0%b1%e4%bc%9a%e8%a2%ab%e5%bf%98%e8%ae%b0%e7%9a%84%e6%9c%80%e9%95%bf%e5%85%ac%e5%85%b1%e5%ad%90%e5%ba%8f%e5%88%97%e7%ae%97%e6%b3%95]]></wp:post_name>
															<wp:status><![CDATA[publish]]></wp:status>
															<wp:post_parent>0</wp:post_parent>
															<wp:menu_order>0</wp:menu_order>
															<wp:post_type><![CDATA[post]]></wp:post_type>
															<wp:post_password><![CDATA[]]></wp:post_password>
															<wp:is_sticky>0</wp:is_sticky>
															<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
															<wp:postmeta>
																<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																<wp:meta_value><![CDATA[1]]></wp:meta_value>
															</wp:postmeta>
														</item>
														<item>
															<title>万湖之国的形成与并查集有关</title>
															<link>https://l3away.cn/?p=122</link>
															<pubDate>Thu, 28 Jun 2018 09:06:08 +0000</pubDate>
															<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
															<guid isPermaLink="false">https://l3away.cn/?p=122</guid>
															<description></description>
															<content:encoded><![CDATA[之前作死把 数据库里头的文章全删了，现在补完。

																那天考完机试以后，同学说我代码里头的 “==”的重载写得很好看，十分开心。

																<!--more-->
																<h3>Description</h3>
																<pre>N国原是一块平原上，没有湖，直到一颗小行星撞入大气层碎成成千上万的碎片，碎片再撞击地面形成
																	一个一个的坑， 下雨之后，最终形成万湖之国。
																	现在科学家想用计算机模拟万湖之国形成过程，假设每一块碎片撞击地面，都撞出一个园形坑，现在知道
																	每一个碎片造成的坑的圆心和半径，问每个坑都注满水后，最终形成多少个湖？
																</pre>
																<div>
																	<h3>输入格式</h3>
																	<pre>第一行一个整数N，1&lt;=N&lt;=100,000，表示坑的数量
																		此后N行，每一行三个double实数，前两个数是圆心的坐标x和y，最后一个数是圆半径（不大于1000）
																		(数据随机产生，分布均匀)</pre>
																	</div>
																	<div>
																		<h3>输出格式</h3>
																		<pre>湖的个数</pre>
																	</div>
																	<h3>输入样例</h3>
																	<pre>3
																		0 0 5
																		10 0 5
																		11.1 0 2.5
																	</pre>
																	<h3>输出样例</h3>
																	<pre>2</pre>
																	<h3>分析</h3>
																	<pre>建立湖的结构体，包括湖心坐标x，y，湖的半径r。

																		录入湖的坐标后对它们排序 （这个操作可以为后面节省很多时间，感谢那位伟大的同学的思路）。

																		然后对于第i个湖，他只需要跟前边的湖比较就可以啦（这块也有个小操作，待会在代码里会说）。

																		如果满足同一个湖的条件，就并在一起，计数器+1；

																		最后输出答案即可。</pre>
																		<h3>代码</h3>
																		<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																			#include &lt;algorithm&gt;
																			#include &lt;cmath&gt;
																			using namespace std;

																			const int MAXN = 100005;
																			int fa[MAXN],cnt = 0;

																			struct CIRCLE {
																			double x,y,r;
																			bool operator &lt; (const CIRCLE a) const {
																			if (x+r &lt; a.x+a.r) return true;
																			else return false;
																			}
																			bool operator == (const CIRCLE a) const {
																			double dst = sqrt(pow(x-a.x,2)+pow(y-a.y,2));
																			return dst &lt; r+a.r;
																			} 
																			}circle[MAXN];

																			int find_set(int n) {
																			while (n != fa[n]) fa[n] = find_set(fa[n]);
																			return fa[n];
																			}

																			void union_set(int a,int b) {
																			int x = find_set(a);
																			int y = find_set(b);
																			if (x != y) {
																			cnt++;
																			fa[y] = x;
																			}
																			}

																			int main() {
																			int kase;
																			cin&gt;&gt;kase;
																			for (int i = 0; i &lt; kase; i++) {
																			fa[i] = i;
																			cin&gt;&gt;circle[i].x&gt;&gt;circle[i].y&gt;&gt;circle[i].r;
																			}
																			sort(circle,circle+kase);
																			for (int i = 0; i &lt; kase; i++) {
																			/*从i-1 开始比较，一旦不符合条件可以快速跳出*/
																			for (int j = i-1; j &gt;= 0; j--) {
																			if (circle[j].r+circle[j].x &lt;= circle[i].r-circle[i].x) break;
																			if (circle[i] == circle[j]) union_set(i,j);
																			}
																			}
																			cout&lt;&lt;kase-cnt&lt;&lt;"\n";
																			}
																		</pre>
																		<h3>参考资料</h3>
																		<p id="articleTitle" class="h1 post-topheader__info--title" data-id="1190000004023326"><a href="https://segmentfault.com/a/1190000004023326">傻子都能看懂的并查集入门</a></p>]]></content:encoded>
																		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																		<wp:post_id>122</wp:post_id>
																		<wp:post_date><![CDATA[2018-06-28 17:06:08]]></wp:post_date>
																		<wp:post_date_gmt><![CDATA[2018-06-28 09:06:08]]></wp:post_date_gmt>
																		<wp:comment_status><![CDATA[open]]></wp:comment_status>
																		<wp:ping_status><![CDATA[open]]></wp:ping_status>
																		<wp:post_name><![CDATA[%e4%b8%87%e6%88%b7%e4%b9%8b%e5%9b%bd%e7%9a%84%e5%bd%a2%e6%88%90%e4%b8%8e%e5%b9%b6%e6%9f%a5%e9%9b%86%e6%9c%89%e5%85%b3]]></wp:post_name>
																		<wp:status><![CDATA[publish]]></wp:status>
																		<wp:post_parent>0</wp:post_parent>
																		<wp:menu_order>0</wp:menu_order>
																		<wp:post_type><![CDATA[post]]></wp:post_type>
																		<wp:post_password><![CDATA[]]></wp:post_password>
																		<wp:is_sticky>0</wp:is_sticky>
																		<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																		<wp:postmeta>
																			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																			<wp:meta_value><![CDATA[1]]></wp:meta_value>
																		</wp:postmeta>
																		<wp:postmeta>
																			<wp:meta_key><![CDATA[_oembed_ec254eb76d35a048eec1405ba06a3867]]></wp:meta_key>
																			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
																		</wp:postmeta>
																	</item>
																	<item>
																		<title>看上去很简单的最长上升子序列（严格）</title>
																		<link>https://l3away.cn/?p=136</link>
																		<pubDate>Sat, 30 Jun 2018 11:15:56 +0000</pubDate>
																		<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																		<guid isPermaLink="false">https://l3away.cn/?p=136</guid>
																		<description></description>
																		<content:encoded><![CDATA[<h3>Description</h3>
																		<pre>给一个数列，输出最大上升子序列的数字个数。

																		</pre>
																		<!--more-->
																		<div>
																			<h3>输入格式</h3>
																			<pre>第一行一个数字N，N&lt;=1000
																				第二行N个数字，数字之间有一个空格分格</pre>
																			</div>
																			<div>
																				<h3>输出格式</h3>
																				<pre>输出最大上升子序列数字个数</pre>
																			</div>
																			<h3>输入样例</h3>
																			<pre>4
																				1 1 5 3
																			</pre>
																			<h3>输出样例</h3>
																			<pre>2

																			</pre>
																			<h3>分析</h3>
																			<pre>dp[i] 的值代表以第i个字符结尾的子串的最大上升子序列，把每个字符结尾的子串的最大上升子序列找出来，然后将最大的输出即可。</pre>
																			<h3>代码</h3>
																			<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																				#include &lt;algorithm&gt; //max(),max_element()
																				using namespace std;
																				int a[1005],dp[1005] = {1};
																				int main(){
																				int n;
																				cin&gt;&gt;n;
																				for (int i = 0; i &lt; n; i++) {
																				cin&gt;&gt;a[i];
																				}
																				for (int i = 0; i &lt; n; i++) { //查看第i个字符结尾的子串的最大公共子序列
																				for (int j = 0;j &lt; i; j++) { //检查第j个字符结尾的子串的最大公共子序列，与第i个比较。
																				if(a[i] &gt; a[j]) {
																				dp[i] = max(dp[j]+1,dp[i]); //状态转移，如果递增则加一，否则与前一位相同。
																				}
																				}
																				}
																				cout&lt;&lt;*max_element(dp,dp+n);
																				}
																			</pre>
																			&nbsp;]]></content:encoded>
																			<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																			<wp:post_id>136</wp:post_id>
																			<wp:post_date><![CDATA[2018-06-30 19:15:56]]></wp:post_date>
																			<wp:post_date_gmt><![CDATA[2018-06-30 11:15:56]]></wp:post_date_gmt>
																			<wp:comment_status><![CDATA[open]]></wp:comment_status>
																			<wp:ping_status><![CDATA[open]]></wp:ping_status>
																			<wp:post_name><![CDATA[%e7%9c%8b%e4%b8%8a%e5%8e%bb%e5%be%88%e7%ae%80%e5%8d%95%e7%9a%84%e6%9c%80%e9%95%bf%e4%b8%8a%e5%8d%87%e5%ad%90%e5%ba%8f%e5%88%97%ef%bc%88%e4%b8%a5%e6%a0%bc%ef%bc%89]]></wp:post_name>
																			<wp:status><![CDATA[publish]]></wp:status>
																			<wp:post_parent>0</wp:post_parent>
																			<wp:menu_order>0</wp:menu_order>
																			<wp:post_type><![CDATA[post]]></wp:post_type>
																			<wp:post_password><![CDATA[]]></wp:post_password>
																			<wp:is_sticky>0</wp:is_sticky>
																			<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																			<wp:postmeta>
																				<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																				<wp:meta_value><![CDATA[1]]></wp:meta_value>
																			</wp:postmeta>
																		</item>
																		<item>
																			<title>快乐这道题做得我很不快乐</title>
																			<link>https://l3away.cn/?p=138</link>
																			<pubDate>Sat, 30 Jun 2018 10:36:28 +0000</pubDate>
																			<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																			<guid isPermaLink="false">https://l3away.cn/?p=138</guid>
																			<description></description>
																			<content:encoded><![CDATA[<h3>Description</h3>
																			<pre>Lian是一个喜欢看动画片的人，自从成为ACMer（ACM爱好者）之后，他又迷上了网上做题。做题让他快乐，不过这也是需要付出精力的！！
																				假设有n道题，Lian做出第i道题后，他可以获得的快乐指数将增加gethappy[i]，而消耗掉的精力将是losspow[i]。
																				假设Lian初始的快乐指数为1，精力为2000。可以理解，如果他消耗完了所有的精力那他得到再多的快乐都没有用。
																				你的任务就是帮他计算他所能得到的最多的快乐指数，且最后他依然有多余的精力（即至少为1）。
																			</pre>
																			<!--more-->
																			<div>
																				<h3>输入格式</h3>
																				<pre>第一行输入一个整数n，表示有n个人。(n&lt;=50)
																					第二行输入n个整数，表示gethappy[1]到gethappy[n]
																					第三行输入n个整数，表示losspow[1]到losspow[n]</pre>
																				</div>
																				<div>
																					<h3>输出格式</h3>
																					<pre>一个整数，表示Lian所能获得的最大快乐指数。</pre>
																				</div>
																				<h3>输入样例</h3>
																				<pre>3
																					15 23 61
																					350 1301 1513
																				</pre>
																				<h3>输出样例</h3>
																				<pre>77</pre>
																				<h3>分析</h3>
																				<pre>构造dp[i][j]表示在有前i个物品且精力剩余j时的最大价值。

																					那么dp[0][j] 就为happy[i]或者0 （这取决于j是否足够支付lost[i]）,以此初始化dp数组。

																					下面就是状态转移了，如何从最初一路推倒最终状态呢？思路可见于代码备注。

																					最后答案便是 dp[n-1][MAXN-1]+1 <span style="color: white; background-color: blue;"><strong>(因为数组的索引是从0到n-1的)</strong></span></pre>
																					<h3>代码</h3>
																					<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																						using namespace std;
																						const int MAXN = 2000;
																						int n,happy[51],loss[51],dp[51][MAXN];

																						int main() {
																						cin&gt;&gt;n;
																						for (int i = 0; i &lt; n; i++) { cin&gt;&gt;happy[i];
																						}
																						for (int i = 0; i &lt; n; i++) { cin&gt;&gt;loss[i];
																						}
																						for (int i = 0; i &lt; MAXN; i++) {
																						dp[0][i] = loss[0] &lt;= i ? happy[0] : 0 ;
																						} //决定精力为i时，拿不拿第一个物品
																						for (int i = 1; i&lt; n; i++) {
																						for (int j = 0; j &lt;MAXN; j++) { if (loss[i] &gt; j) dp[i][j] = dp[i-1][j]; //拿不起就放下，跟上一个状态一样
																						else {
																						if (dp[i-1][j] &gt; dp[i-1][j-loss[i]]+happy[i]) dp[i][j] = dp[i-1][j]; //拿了反而亏了，放下
																						else dp[i][j] = dp[i-1][j-loss[i]] + happy[i]; //不亏，拿爆
																						}
																						}
																						}
																						cout&lt;&lt;dp[n-1][MAXN-1]+1;
																						}

																					</pre>
																					&nbsp;]]></content:encoded>
																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																					<wp:post_id>138</wp:post_id>
																					<wp:post_date><![CDATA[2018-06-30 18:36:28]]></wp:post_date>
																					<wp:post_date_gmt><![CDATA[2018-06-30 10:36:28]]></wp:post_date_gmt>
																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																					<wp:post_name><![CDATA[138]]></wp:post_name>
																					<wp:status><![CDATA[publish]]></wp:status>
																					<wp:post_parent>0</wp:post_parent>
																					<wp:menu_order>0</wp:menu_order>
																					<wp:post_type><![CDATA[post]]></wp:post_type>
																					<wp:post_password><![CDATA[]]></wp:post_password>
																					<wp:is_sticky>0</wp:is_sticky>
																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																					<wp:postmeta>
																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																					</wp:postmeta>
																				</item>
																				<item>
																					<title>老板，来一斤不丑数</title>
																					<link>https://l3away.cn/?p=141</link>
																					<pubDate>Sat, 30 Jun 2018 11:07:00 +0000</pubDate>
																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																					<guid isPermaLink="false">https://l3away.cn/?p=141</guid>
																					<description></description>
																					<content:encoded><![CDATA[<h3>description</h3>
																					<pre>对于质因子只有2、3、5的数字，我们称之为丑数，现给定n，求给出第n个非丑数。
																					</pre>
																					<!--more-->
																					<h3>输入格式</h3>
																					<pre>第一行一个数字T（T &lt;= 10000）

																						接下来T行，每行输入一个数字n</pre>
																						<h3>输出格式</h3>
																						<pre>输出第n个非丑数，每个数一行。</pre>
																						<h3>输入样例</h3>
																						<pre>3
																							1
																							2
																							9

																						</pre>
																						<h3>输出样例</h3>
																						<pre>7
																							11
																							23


																						</pre>
																						<h3>分析</h3>
																						<pre>思路来自一位叫Joying的姑娘。首先用笨方法构建丑数数组a[]，借此构建数组c[i]，它的值表示第i个的丑数前有多少个非丑数。

																							构建成功后，对于任意，直接把历遍c[i]，直到c[i] &gt;= n，找到这个i，第i个丑数的值就等于 a[i]+(n-c[i])-1</pre>
																							<h3>代码</h3>
																							<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																								using namespace std;
																								//打印丑数代码
																								bool isugly(int n) {
																								while (n%2 == 0) n /= 2;
																								while (n%3 == 0) n /= 3;
																								while (n%5 == 0) n /= 5;
																								return n == 1;
																								}

																								int main() {
																								int num = 1;
																								while (num &gt;= 0) {
																								if (isugly(num)) cout&lt;&lt;num&lt;&lt;",";
																								num++;
																								}
																								}
																								//解题代码
																								const int MAXN = 1690; //这是所有丑数的数量，可以在寻找丑数的时候加入cnt算出。
																								int main() {
																								for (int i = 6; i  &lt; MAXN; i++) {
																								c[i] = a[i] -a[i-1] - 1 + c[i-1];
																								}
																								cin&gt;&gt;n;
																								while (n--) {
																								cin&gt;&gt;x;
																								for (int i= 6;i&lt; MAXN; i++) {
																								if (c[i] &gt;= x) {
																								cout&lt;&lt;a[i]+n-c[i]-1&lt;&lt;"\n";
																								break;
																								}
																								}
																								}
																								}
																							</pre>
																							&nbsp;]]></content:encoded>
																							<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																							<wp:post_id>141</wp:post_id>
																							<wp:post_date><![CDATA[2018-06-30 19:07:00]]></wp:post_date>
																							<wp:post_date_gmt><![CDATA[2018-06-30 11:07:00]]></wp:post_date_gmt>
																							<wp:comment_status><![CDATA[open]]></wp:comment_status>
																							<wp:ping_status><![CDATA[open]]></wp:ping_status>
																							<wp:post_name><![CDATA[%e8%80%81%e6%9d%bf%ef%bc%8c%e6%9d%a5%e4%b8%80%e6%96%a4%e4%b8%8d%e4%b8%91%e6%95%b0]]></wp:post_name>
																							<wp:status><![CDATA[publish]]></wp:status>
																							<wp:post_parent>0</wp:post_parent>
																							<wp:menu_order>0</wp:menu_order>
																							<wp:post_type><![CDATA[post]]></wp:post_type>
																							<wp:post_password><![CDATA[]]></wp:post_password>
																							<wp:is_sticky>0</wp:is_sticky>
																							<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																							<wp:postmeta>
																								<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																								<wp:meta_value><![CDATA[1]]></wp:meta_value>
																							</wp:postmeta>
																						</item>
																						<item>
																							<title>小明的密码很复杂</title>
																							<link>https://l3away.cn/?p=149</link>
																							<pubDate>Sat, 30 Jun 2018 11:54:56 +0000</pubDate>
																							<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																							<guid isPermaLink="false">https://l3away.cn/?p=149</guid>
																							<description></description>
																							<content:encoded><![CDATA[<h3>Description</h3>
																							<pre>小明的密码由N（1&lt;=N&lt;=12）个数字构成，每个数字都可以是0至9中任意一个数字，但小明的密码还有
																								一个特点就是密码中连续的M（1&lt;=M&lt;=4）个数字的和是质数，现给定M和N，求满足条件的密码共有多少
																								个？

																							</pre>
																							<!--more-->
																							<div>
																								<h3>输入格式</h3>
																								<pre>第1行是T，case数量，此后T行，每行两个数，N和M</pre>
																							</div>
																							<div>
																								<h3>输出格式</h3>
																								<pre>每个case输出一个满足条件的密码总数</pre>
																							</div>
																							<h3>输入样例</h3>
																							<pre>2
																								1 1
																								2 1
																							</pre>
																							<h3>输出样例</h3>
																							<pre>4
																								16 

																							</pre>
																							<h3>分析</h3>
																							<pre>先用笨方法打个36以内的质数真假表（啥玩意儿？）。

																								按规律递推就好，对于pos&lt;m，随意摆放，其后需要检验是否满足题设，满足一个计数器就加一。

																								最后输出计数器即可。</pre>
																								<h3>代码</h3>
																								<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																									using namespace std;
																									//打印质数真值表
																									bool isp(int n) {
																									if (n == 0 || n == 1) return false;
																									for (int i = 2; i &lt;= sqrt(n); i++){
																									if (n % i == 0) return false;
																									}
																									return true;
																									}
																									int main() {
																									for (int i = 0; i &lt;= 36; i++) {
																									if (isp(i)) cout&lt;&lt;i&lt;&lt;",";
																									}
																									}

																									//解题代码
																									int cnt = 0,password[10] = {0};
																									int p[]={0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0};
																									void solve(int cur,int n,int m,int sum) {
																									if (cur == n - 1) {
																									for (int i = 0; i &lt; 10; i++) {
																									if (p[sum+i]) cnt++;
																									}
																									return;
																									}
																									else if (cur &lt; m - 1) {
																									for (int i = 0; i &lt; 10; i++) {
																									password[cur] = i;
																									solve(cur+1,n,m,sum + i);
																									}
																									} else {
																									for (int i = 0; i &lt; 10; i++) {
																									if (p[sum+i]) {
																									password[cur] = i;
																									solve(cur+1,n,m,sum + i - password[cur-m+1]);
																									}
																									}
																									}
																									}

																									int main() {
																									int T;
																									cin&gt;&gt;T;
																									while (T--) {
																									int n,m;
																									cnt = 0;
																									cin&gt;&gt;n&gt;&gt;m;
																									solve(0,n,m,0);
																									cout&lt;&lt;cnt&lt;&lt;endl;
																									}
																									}
																								</pre>
																								&nbsp;]]></content:encoded>
																								<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																								<wp:post_id>149</wp:post_id>
																								<wp:post_date><![CDATA[2018-06-30 19:54:56]]></wp:post_date>
																								<wp:post_date_gmt><![CDATA[2018-06-30 11:54:56]]></wp:post_date_gmt>
																								<wp:comment_status><![CDATA[open]]></wp:comment_status>
																								<wp:ping_status><![CDATA[open]]></wp:ping_status>
																								<wp:post_name><![CDATA[%e5%b0%8f%e6%98%8e%e7%9a%84%e5%af%86%e7%a0%81%e5%be%88%e5%a4%8d%e6%9d%82]]></wp:post_name>
																								<wp:status><![CDATA[publish]]></wp:status>
																								<wp:post_parent>0</wp:post_parent>
																								<wp:menu_order>0</wp:menu_order>
																								<wp:post_type><![CDATA[post]]></wp:post_type>
																								<wp:post_password><![CDATA[]]></wp:post_password>
																								<wp:is_sticky>0</wp:is_sticky>
																								<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																								<wp:postmeta>
																									<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																									<wp:meta_value><![CDATA[1]]></wp:meta_value>
																								</wp:postmeta>
																							</item>
																							<item>
																								<title>校赛排名</title>
																								<link>https://l3away.cn/?p=151</link>
																								<pubDate>Sat, 30 Jun 2018 11:45:00 +0000</pubDate>
																								<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																								<guid isPermaLink="false">https://l3away.cn/?p=151</guid>
																								<description></description>
																								<content:encoded><![CDATA[<h3>Description</h3>
																								<pre>下面是校赛的排名规则：
																									比赛期间，提交代码后，系统会返回正确或错误等结果。最后的获胜者为正确解答题目最多，如果同题数则总用时最少的队伍。
																									每道试题的时间花费将从竞赛开始到试题提交并且被判定为正确为止，其间每一次提交运行结果被判错误的话将被加罚20分钟时间，
																									未正确解答的试题不记时，如果已经返回正确的题目再重复提交则不影响结果。
																									<!--more-->
																									例如：A、B两队都正确完成两道题目，其中A队提交这两题的时间分别是比赛开始后60分钟和165分钟，B队为80分钟和130分钟，
																									但B队第一个题提交了2次才通过。这样A队的总用时为60+165=225而B队为（80+20）+130=230，所以A队以总用时少而获胜。
																									现在给出裁判机上面所有队伍的提交时间(分钟数)和返回结果，需要你编程输出当前比赛的排行榜。

																									注：0题的队伍不需要输出</pre>
																									&nbsp;
																									<div>
																										<h3>输入格式</h3>
																										<pre>每行一个评判结果，格式为：时间（第几分钟提交的）+半角空格+队名+半角空格+题号+半角空格+评判结果（0通过，其它为出错）

																											题号由大写A字符开始，第2题是B，依次类推，最多不超过15题
																											所有评判结果已经按时间排序好</pre>
																										</div>
																										<div>
																											<h3>输出格式</h3>
																											<pre>输出排名，一行一个，格式为队名+半角空格+通过题数+半角空格+罚时

																												注：0题的队伍不需要输出
																												测试数据中，没有同题且同罚时的情况</pre>
																											</div>
																											<h3>输入样例</h3>
																											<pre>2 abc A 4
																												5 abc B 0
																												6 def A 0
																												10 abc A 0
																												13 xyx A 4
																												20 def B 5
																											</pre>
																											<h3>输出样例</h3>
																											<pre>abc 2 35
																												def 1 6</pre>
																												<h3>分析</h3>
																												<pre>搞出一个team 的结构体

																													其中应该包括：过题数pass_quiz、时间pass_time、还未生效的罚时time_to_be_add[15] (分别对应15个问题)
																													问题通过状态pass_status[15]、队伍名 name、排序规则 。
																													然后直接录入信息sort就行了，细节请看代码。</pre>
																													<h3>代码</h3>
																													<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt; 
																														#include &lt;algorithm&gt; //sort()
																														#include &lt;vector&gt; //vector
																														#include &lt;string&gt; //string
																														struct team {
																														string name;
																														int pass_num = 0;
																														int pass_time = 0;
																														int pass_status[15] = {0};
																														int time_to_be_add[15] = {0};
																														bool operator &lt; (const team a) const {
																														if (pass_num &gt; a.pass_num) return true;
																														else if (pass_num == a.pass_num &amp;&amp; pass_time &lt; a.pass_time) return true;
																														else return false;
																														} //重载&lt;号实现规则，注意这个重载是发生在结构体内的。
																														};

																														bool isexist(vector&lt;team&gt; v,string newname) {
																														for (team x:v) {
																														if (x.name == newname) return true;
																														}
																														return false;
																														} //查看队伍是否已经存在

																														int main() {
																														vector&lt;team&gt; v;
																														string teamname;
																														int time,ispass;
																														char quiz;
																														while (cin&gt;&gt;time&gt;&gt;teamname&gt;&gt;quiz&gt;&gt;ispass) {
																														if (isexist(v,teamname)) {
																														for (vector&lt;team&gt;::iterator it = v.begin(); it &lt; v.end(); it++){ //这里一定要用迭代器，不然改变不了值。
																														if (it-&gt;name == teamname) {
																														if (ispass == 0) { //如果过题了
																														if (it-&gt;pass_status[quiz-'A'] == 0){ //如果这道题没有通过过
																														it-&gt;pass_num++;
																														it-&gt;pass_status[quiz-'A'] = 1;
																														it-&gt;pass_time += time + it-&gt;time_to_be_add[quiz-'A'];
																														} else {} //如果这道题已经通过了，没事发生
																														} else {
																														if (it-&gt;pass_status[quiz-'A'] == 0){ //错了，加罚时
																														it-&gt;time_to_be_add[quiz-'A'] += 20; 
																														}else {} //如果这道题已经通过了，没事发生
																														}
																														break;
																														}
																														}
																														} else {
																														team t;
																														t.name = teamname;
																														if (ispass == 0) { //第一次就通过了，以前肯定没做过。
																														t.pass_time = time;
																														t.pass_status[quiz-'A'] = 1;
																														t.pass_num++;
																														}
																														else t.time_to_be_add[quiz-'A'] += 20; //错了就加罚时
																														v.push_back(t);
																														}
																														}
																														sort(v.begin(),v.end());
																														for (team x:v){ 
																														cout&lt;&lt;x.name&lt;&lt;" "&lt;&lt;x.pass_num&lt;&lt;" "&lt;&lt;x.pass_time&lt;&lt;endl;
																														}
																														}
																													</pre>
																													&nbsp;]]></content:encoded>
																													<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																													<wp:post_id>151</wp:post_id>
																													<wp:post_date><![CDATA[2018-06-30 19:45:00]]></wp:post_date>
																													<wp:post_date_gmt><![CDATA[2018-06-30 11:45:00]]></wp:post_date_gmt>
																													<wp:comment_status><![CDATA[open]]></wp:comment_status>
																													<wp:ping_status><![CDATA[open]]></wp:ping_status>
																													<wp:post_name><![CDATA[%e6%a0%a1%e8%b5%9b%e6%8e%92%e5%90%8d%e3%80%90sort-%e5%92%8c-%e6%93%8d%e4%bd%9c%e7%ac%a6%e9%87%8d%e8%bd%bd%e3%80%91]]></wp:post_name>
																													<wp:status><![CDATA[publish]]></wp:status>
																													<wp:post_parent>0</wp:post_parent>
																													<wp:menu_order>0</wp:menu_order>
																													<wp:post_type><![CDATA[post]]></wp:post_type>
																													<wp:post_password><![CDATA[]]></wp:post_password>
																													<wp:is_sticky>0</wp:is_sticky>
																													<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																													<wp:postmeta>
																														<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																														<wp:meta_value><![CDATA[1]]></wp:meta_value>
																													</wp:postmeta>
																												</item>
																												<item>
																													<title>一定要坐在男生旁边看电影的女生</title>
																													<link>https://l3away.cn/?p=166</link>
																													<pubDate>Sat, 30 Jun 2018 12:16:01 +0000</pubDate>
																													<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																													<guid isPermaLink="false">https://l3away.cn/?p=166</guid>
																													<description></description>
																													<content:encoded><![CDATA[<h3>Description</h3>
																													<pre>某理工学校A班全为男生，另有某师范学校B班全为女生。一次，两个班组织了一次联谊活动，观看电影
																														《美人鱼》，订完票发现所有位置为同一排且从1到T号（T为人的总数），为了让参加活动的每一个女生都有机会同
																														男生有对话的机会，组织者在安排座位时，让女生左或右，至少有一个男生。现在告诉你男生人数n，女生
																														人数m，问一共有多少种不同的座位安排方法。</pre>
																														<!--more-->
																														<div>
																															<h3>输入格式</h3>
																															<pre>每一行一个数W（W&lt;=100），为case数量
																																此后W行，每行两个数n和m</pre>
																															</div>
																															<div>
																																<h3>输出格式</h3>
																																<pre>每个case输出一个结果（使用long long）</pre>
																															</div>
																															<h3>输入样例</h3>
																															<pre>7
																																3 0
																																3 1
																																0 1
																																1 1
																																2 2
																																2 3
																																2 4
																															</pre>
																															<h3></h3>
																															<h3>输出样例</h3>
																															<pre>6
																																24
																																0
																																2
																																16
																																36
																																48</pre>
																																<h3>提示</h3>
																																<pre>注意：男生旁边可以没有女生

																																</pre>
																																<h3>分析</h3>
																																<pre>不停地模拟放人就好，第一次没有想全情况，看了一下同学的才补全，可能这种题目适合心思缜密的人吧。</pre>
																																<h3>代码</h3>
																																<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																																	using namespace std;
																																	typedef long long LL;
																																	const int MAN = 1;
																																	const int WOMAN = 0;
																																	LL get_times(int M,int W,int cur,bool pp,bool p,int n) { //参数依次代表男生人数，女生人数，当前位置，前前位性别，前位性别，队列总人数
																																	if (cur == n) {
																																	if (W == 1 &amp;&amp; p == WOMAN) return 0;
																																	else return 1;
																																	}
																																	LL times = 0;
																																	if (p == MAN || (p == WOMAN &amp;&amp; pp == MAN)) { //如果前一位是男生或者前一位是女生但前前位是男生，就可以随便放
																																	if (M != 0) times += M*get_times(M-1,W,cur+1,p,MAN,n); //当然，随便放的前提是还有这种人
																																	if (W != 0) times += W*get_times(M,W-1,cur+1,p,WOMAN,n);
																																	}
																																	if (p == WOMAN &amp;&amp; pp == WOMAN) if (M != 0) times += M*get_times(M-1,W,cur+1,WOMAN,MAN,n); //如果前两个都是女生，那只能放男生了
																																	return times;
																																	}

																																	LL solve(int M,int W,int n) {
																																	if (M == 0 || (n == 1 &amp;&amp; W == 1)) return 0; //没男人的情况
																																	else if (M == 1 &amp;&amp; n == 1) return 1; //只有一个男生的情况
																																	LL times = 0;
																																	times +=M*get_times(M-1,W,2,MAN,MAN,n); //第一位是男生的情况
																																	if (W != 0) times += W*get_times(M,W-1,2,WOMAN,WOMAN,n); //第一位是女生的情况
																																	return times;
																																	}
																																	int main(){
																																	int w;
																																	cin&gt;&gt;w;
																																	while (w--){
																																	int M,W;
																																	cin&gt;&gt;M&gt;&gt;W;
																																	cout&lt;&lt;solve(M,W,M+W)&lt;&lt;endl;
																																	}
																																	}
																																</pre>
																																&nbsp;]]></content:encoded>
																																<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																<wp:post_id>166</wp:post_id>
																																<wp:post_date><![CDATA[2018-06-30 20:16:01]]></wp:post_date>
																																<wp:post_date_gmt><![CDATA[2018-06-30 12:16:01]]></wp:post_date_gmt>
																																<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																<wp:post_name><![CDATA[%e4%b8%80%e5%ae%9a%e8%a6%81%e5%9d%90%e5%9c%a8%e7%94%b7%e7%94%9f%e6%97%81%e8%be%b9%e7%9c%8b%e7%94%b5%e5%bd%b1%e7%9a%84%e5%a5%b3%e7%94%9f]]></wp:post_name>
																																<wp:status><![CDATA[publish]]></wp:status>
																																<wp:post_parent>0</wp:post_parent>
																																<wp:menu_order>0</wp:menu_order>
																																<wp:post_type><![CDATA[post]]></wp:post_type>
																																<wp:post_password><![CDATA[]]></wp:post_password>
																																<wp:is_sticky>0</wp:is_sticky>
																																<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																<wp:postmeta>
																																	<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																	<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																</wp:postmeta>
																															</item>
																															<item>
																																<title>天天巡逻的士兵</title>
																																<link>https://l3away.cn/?p=170</link>
																																<pubDate>Sat, 30 Jun 2018 12:21:42 +0000</pubDate>
																																<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																<guid isPermaLink="false">https://l3away.cn/?p=170</guid>
																																<description></description>
																																<content:encoded><![CDATA[<h3>Description</h3>
																																<pre>有N个士兵站成一队列, 现在需要选择几个士兵派去侦察。
																																	为了选择合适的士兵, 多次进行如下操作: 
																																	如果队列超过三个士兵, 那么去除掉所有站立位置为奇数的士兵, 
																																	<!--more-->
																																	或者是去除掉所有站立位置为偶数的士兵。直到不超过三个战士，他们将被送去侦察。现要求统计按这样的方法，
																																	总共可能有多少种不同的正好三个士兵去侦察的士兵组合方案。
																																	注: 按上法得到少于三士兵的情况不统计。 1 &lt;= N &lt;= 2的32次方-1</pre>
																																	<div>
																																		<h3>输入格式</h3>
																																		<pre>有多行，每行一个数字N，最后一行是0</pre>
																																	</div>
																																	<div>
																																		<h3>输出格式</h3>
																																		<pre>对每一行的数字N，输出针对N的方案数

																																			直到没有数字</pre>
																																		</div>
																																		<h3>输入样例</h3>
																																		<pre>10
																																			4
																																			0
																																		</pre>
																																		<h3>输出样例</h3>
																																		<pre>2
																																			0</pre>
																																			<h3>分析</h3>
																																			<pre>不断地模拟，当人数为三的时候，计数器加一，如果人少于三个 ，则证明该方案不行。

																																				一个小优化是当n为偶数的时候，两个子问题的解是相同的，直接乘二就好。</pre>
																																				<h3>代码</h3>
																																				<pre class="EnlighterJSRAW" data-enlighter-language="null">#include &lt;iostream&gt;
																																					using namespace std;
																																					int solve(int n){
																																					if (n == 3) return 1;
																																					else if (n &lt; 3) return 0;
																																					else if (n % 2 == 0) return 2*solve(n/2);
																																					else if (n % 2 == 1) return solve(n/2)+solve(n/2+1);
																																					}
																																					int main(){
																																					while (1){
																																					int n;
																																					cin&gt;&gt;n;
																																					if (n == 0) break;
																																					else {
																																					cout&lt;&lt;solve(n)&lt;&lt;endl;
																																					}
																																					}
																																					}
																																				</pre>
																																				&nbsp;]]></content:encoded>
																																				<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																				<wp:post_id>170</wp:post_id>
																																				<wp:post_date><![CDATA[2018-06-30 20:21:42]]></wp:post_date>
																																				<wp:post_date_gmt><![CDATA[2018-06-30 12:21:42]]></wp:post_date_gmt>
																																				<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																				<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																				<wp:post_name><![CDATA[170]]></wp:post_name>
																																				<wp:status><![CDATA[publish]]></wp:status>
																																				<wp:post_parent>0</wp:post_parent>
																																				<wp:menu_order>0</wp:menu_order>
																																				<wp:post_type><![CDATA[post]]></wp:post_type>
																																				<wp:post_password><![CDATA[]]></wp:post_password>
																																				<wp:is_sticky>0</wp:is_sticky>
																																				<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																				<wp:postmeta>
																																					<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																					<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																				</wp:postmeta>
																																			</item>
																																			<item>
																																				<title>图片隐写套路</title>
																																				<link>https://l3away.cn/?p=175</link>
																																				<pubDate>Mon, 09 Jul 2018 15:35:13 +0000</pubDate>
																																				<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																				<guid isPermaLink="false">https://l3away.cn/?p=175</guid>
																																				<description></description>
																																				<content:encoded><![CDATA[<h3>总结一些图片隐写术的套路</h3>
																																				<h3>0x000 exif</h3>
																																				Windows下直接右键属性查看就好，有些题目会用Base64等方式加密，不过也就一梭子代码的问题。

																																				<!--more-->

																																				Linux下用
																																				<pre>identify -verbose filename</pre>
																																				<h3>0x001 隐藏文件</h3>
																																				<pre>文件的隐藏利用 copy /b 2.jpg+1.zip output.jpg</pre>
																																				对于这类题目，用binwalk分析后用dd命令分解出来就好：
																																				<pre>dd if=filename of=filename skip=start_point_of_hidden_file bs=1 

																																				</pre>
																																				<h3>0x010 LSB 修改</h3>
																																				直接用stegsolve看通道，一般会隐藏二维码在其中。
																																				<h3>0x011 查看其他信息</h3>
																																				Windows下把图片拖进WinHex，缺少文件头的话补全。在文件结尾后有一段不明字符串，可以尝试解码。

																																				拖进Stegsolve里查看附着的信息，有可能有ascii形式的Flag。
																																				<h3>0x100 双图</h3>
																																				目前做过的题目的解决方案是拖进stegsolve里边然后选择图片叠加。

																																				&nbsp;]]></content:encoded>
																																				<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																				<wp:post_id>175</wp:post_id>
																																				<wp:post_date><![CDATA[2018-07-09 23:35:13]]></wp:post_date>
																																				<wp:post_date_gmt><![CDATA[2018-07-09 15:35:13]]></wp:post_date_gmt>
																																				<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																				<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																				<wp:post_name><![CDATA[%e5%9b%be%e7%89%87%e9%9a%90%e5%86%99%e5%a5%97%e8%b7%af]]></wp:post_name>
																																				<wp:status><![CDATA[publish]]></wp:status>
																																				<wp:post_parent>0</wp:post_parent>
																																				<wp:menu_order>0</wp:menu_order>
																																				<wp:post_type><![CDATA[post]]></wp:post_type>
																																				<wp:post_password><![CDATA[]]></wp:post_password>
																																				<wp:is_sticky>0</wp:is_sticky>
																																				<category domain="category" nicename="others"><![CDATA[others]]></category>
																																				<wp:postmeta>
																																					<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																					<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																				</wp:postmeta>
																																			</item>
																																			<item>
																																				<title>hover</title>
																																				<link>https://l3away.cn/?p=179</link>
																																				<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
																																				<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																				<guid isPermaLink="false">https://l3away.cn/?p=179</guid>
																																				<description></description>
																																				<content:encoded><![CDATA[本文主要讲解我常用的一些hover样式，诙谐幽默但不一定学得到什么东西。
																																					<h3>最简单的变换</h3>
																																					刚开始学习CSS的时候，接触到hover伪类，觉得这玩意好强啊，可以很方便地添加简单动态。

																																					于是在一次练手中，写了这个：

																																					<!--more-->
																																					<pre class="EnlighterJSRAW" data-enlighter-language="css">a {
																																						text-decoration: none;	
																																						background-color: #000;
																																						}
																																						a:hover,.active {
																																						background-color: #f1f2f3;
																																						}</pre>]]></content:encoded>
																																						<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																						<wp:post_id>179</wp:post_id>
																																						<wp:post_date><![CDATA[2018-07-04 20:18:58]]></wp:post_date>
																																						<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
																																						<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																						<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																						<wp:post_name><![CDATA[]]></wp:post_name>
																																						<wp:status><![CDATA[draft]]></wp:status>
																																						<wp:post_parent>0</wp:post_parent>
																																						<wp:menu_order>0</wp:menu_order>
																																						<wp:post_type><![CDATA[post]]></wp:post_type>
																																						<wp:post_password><![CDATA[]]></wp:post_password>
																																						<wp:is_sticky>0</wp:is_sticky>
																																						<category domain="category" nicename="others"><![CDATA[others]]></category>
																																						<wp:postmeta>
																																							<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																							<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																						</wp:postmeta>
																																					</item>
																																					<item>
																																						<title>Binascii模块学习</title>
																																						<link>https://l3away.cn/?p=187</link>
																																						<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
																																						<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																						<guid isPermaLink="false">https://l3away.cn/?p=187</guid>
																																						<description></description>
																																						<content:encoded><![CDATA[]]></content:encoded>
																																						<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																						<wp:post_id>187</wp:post_id>
																																						<wp:post_date><![CDATA[2018-07-09 23:58:21]]></wp:post_date>
																																						<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
																																						<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																						<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																						<wp:post_name><![CDATA[]]></wp:post_name>
																																						<wp:status><![CDATA[draft]]></wp:status>
																																						<wp:post_parent>0</wp:post_parent>
																																						<wp:menu_order>0</wp:menu_order>
																																						<wp:post_type><![CDATA[post]]></wp:post_type>
																																						<wp:post_password><![CDATA[]]></wp:post_password>
																																						<wp:is_sticky>0</wp:is_sticky>
																																						<category domain="category" nicename="others"><![CDATA[others]]></category>
																																						<wp:postmeta>
																																							<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																							<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																						</wp:postmeta>
																																					</item>
																																					<item>
																																						<title>快速幂和矩阵快速幂</title>
																																						<link>https://l3away.cn/?p=189</link>
																																						<pubDate>Wed, 11 Jul 2018 19:08:38 +0000</pubDate>
																																						<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																						<guid isPermaLink="false">https://l3away.cn/?p=189</guid>
																																						<description></description>
																																						<content:encoded><![CDATA[快速幂，顾名思义就是快速求幂的算法。原理如下：

																																							<!--more-->

																																							假设求a的n次方，当n为偶数时，a的n次方可以由两个a的n/2次方相乘求得；当n为奇数时，a的n次方可以由两个a的n/2次方相乘的积再乘以a得到。

																																							在实现中，运用位运算判断奇偶和乘除2（第一个想到的简直就是天才）
																																							<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include &lt;iostream&gt;
																																								using namespace std;
																																								double quick_pow(double base,int degree) {
																																								double ans = 1.0;
																																								while (degree) {
																																								if (degree&amp;1)
																																								ans *= base;
																																								base *= base;
																																								degree &gt;&gt;= 1;
																																								}
																																								return ans;
																																								}
																																								int main() {
																																								double a;
																																								int b;
																																								cin&gt;&gt;a&gt;&gt;b;
																																								cout&lt;&lt;quick_pow(a,b)&lt;&lt;endl;
																																								}</pre>
																																								矩阵快速幂呢，则是把求幂的对象变成了矩阵，下面是一道经典应用。
																																								<pre class="EnlighterJSRAW" data-enlighter-language="cpp">#include &lt;iostream&gt;
																																									using namespace std;
																																									int N = 10000,n;
																																									void Matrix(int (&amp;a)[2][2],int b[2][2]){
																																									int tmp[2][2] = {0};
																																									for(int i = 0; i &lt; 2; ++i)
																																									for(int j = 0; j &lt; 2; ++j)
																																									for(int k = 0; k &lt; 2; ++k)
																																									tmp[i][j] = (tmp[i][j] + a[i][k] * b[k][j]) % N;
																																									for(int i = 0; i &lt; 2; ++i)
																																									for(int j = 0; j &lt; 2; ++j)
																																									a[i][j] = tmp[i][j];
																																									}
																																									int main(){
																																									while(cin&gt;&gt;n &amp;&amp; n!=-1){
																																									int temp[2][2] = {1, 1, 1, 0},cot[2][2] = {1, 0, 0, 1};
																																									while(n){
																																									if(n &amp; 1) Matrix(cot,temp);
																																									Matrix(temp,temp);
																																									n /= 2;
																																									}
																																									cout&lt;&lt;cot[0][1]&lt;&lt;endl;
																																									}
																																									}</pre>
																																									这个 的应用就很考数学功底，知道原理就好。]]></content:encoded>
																																									<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																									<wp:post_id>189</wp:post_id>
																																									<wp:post_date><![CDATA[2018-07-12 03:08:38]]></wp:post_date>
																																									<wp:post_date_gmt><![CDATA[2018-07-11 19:08:38]]></wp:post_date_gmt>
																																									<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																									<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																									<wp:post_name><![CDATA[%e5%bf%ab%e9%80%9f%e5%b9%82%e5%92%8c%e7%9f%a9%e9%98%b5%e5%bf%ab%e9%80%9f%e5%b9%82]]></wp:post_name>
																																									<wp:status><![CDATA[publish]]></wp:status>
																																									<wp:post_parent>0</wp:post_parent>
																																									<wp:menu_order>0</wp:menu_order>
																																									<wp:post_type><![CDATA[post]]></wp:post_type>
																																									<wp:post_password><![CDATA[]]></wp:post_password>
																																									<wp:is_sticky>0</wp:is_sticky>
																																									<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																									<wp:postmeta>
																																										<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																										<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																									</wp:postmeta>
																																									<wp:postmeta>
																																										<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
																																										<wp:meta_value><![CDATA[2018-07-10]]></wp:meta_value>
																																									</wp:postmeta>
																																								</item>
																																								<item>
																																									<title>我的第一只爬虫</title>
																																									<link>https://l3away.cn/?p=200</link>
																																									<pubDate>Wed, 11 Jul 2018 21:28:34 +0000</pubDate>
																																									<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																									<guid isPermaLink="false">https://l3away.cn/?p=200</guid>
																																									<description></description>
																																									<content:encoded><![CDATA[寒假的时候学习了一下Python的爬虫，并将豆瓣电影排行榜爬取了下来

																																										<!--more-->
																																										<pre class="EnlighterJSRAW" data-enlighter-language="python"># -*- coding: utf-8 -*-
																																											# @Author: Lily_Sun
																																											# @Date:   2018-01-12 05:18:40
																																											# @Last Modified by:   Lily_Sun
																																											# @Last Modified time: 2018-01-12 05:18:40

																																											import re
																																											from urllib import request

																																											cnt = 1
																																											url = "https://movie.douban.com/chart"
																																											req = request.Request(url)
																																											with request.urlopen(req) as f:
																																											data = f.read().decode('utf-8')
																																											reg_name = r'&lt;div class="name"&gt;[]&lt;a .*?class=""&gt;[\n][" "]*.*[\n][" "]*(.*)'
																																											list = (re.findall(reg_name,data))
																																											print("rank"+"\t\t"+"name")
																																											for x in list:
																																											print(cnt,end="\t\t\t")
																																											print(x)
																																											cnt = cnt + 1</pre>
																																											整个过程其实就是折腾正则表达式，以至于我现在都不知道为什么要加个[]。（然而实践告诉我就是要这样的。）

																																											主要用来urllib 和 re 模块。

																																											先发送请求到网站，然后打开后以utf-8编码格式的提取内容，再用正则提取需要的信息，最后添加点样式，打表即可。]]></content:encoded>
																																											<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																											<wp:post_id>200</wp:post_id>
																																											<wp:post_date><![CDATA[2018-07-12 05:28:34]]></wp:post_date>
																																											<wp:post_date_gmt><![CDATA[2018-07-11 21:28:34]]></wp:post_date_gmt>
																																											<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																											<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																											<wp:post_name><![CDATA[%e6%88%91%e7%9a%84%e7%ac%ac%e4%b8%80%e5%8f%aa%e7%88%ac%e8%99%ab]]></wp:post_name>
																																											<wp:status><![CDATA[publish]]></wp:status>
																																											<wp:post_parent>0</wp:post_parent>
																																											<wp:menu_order>0</wp:menu_order>
																																											<wp:post_type><![CDATA[post]]></wp:post_type>
																																											<wp:post_password><![CDATA[]]></wp:post_password>
																																											<wp:is_sticky>0</wp:is_sticky>
																																											<category domain="category" nicename="python"><![CDATA[python]]></category>
																																											<wp:postmeta>
																																												<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																												<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																											</wp:postmeta>
																																										</item>
																																										<item>
																																											<title>用python给你女朋友写封信</title>
																																											<link>https://l3away.cn/?p=206</link>
																																											<pubDate>Fri, 13 Jul 2018 16:30:20 +0000</pubDate>
																																											<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																											<guid isPermaLink="false">https://l3away.cn/?p=206</guid>
																																											<description></description>
																																											<content:encoded><![CDATA[喜欢木心先生的《从前慢》，那种一辈子只够爱一个人的闲适，被今日快节奏的生活方式打破。

																																												虽然今日邮件已然销声匿迹，但电子邮件的兴起给我们另一个选择。

																																												若怀念木心，不妨静下心来，在键盘上诚诚恳恳敲击你想对她诉说的，不也浪漫？不也悠长？

																																												<!--more-->

																																												那么，如何用python写电子邮件呢？

																																												我们需要用到smtplib和email模块

																																												我们从简单的开始，写一首情诗送给她
																																												<pre class="EnlighterJSRAW" data-enlighter-language="python"># -*- coding: utf-8 -*-
																																													# @Author: Lily_Sun
																																													# @Date:   2018-07-12 05:56:46
																																													# @Last Modified by:   Lily_Sun
																																													# @Last Modified time: 2018-07-13 13:29:09

																																													import smtplib
																																													from email.mime.text import MIMEText #多媒体网际网路邮件延伸文本，即纯文本
																																													text = "醉过才知酒浓，爱过才知情重。\
																																													\n你定是我的诗，恰似我如你的梦。"
																																													mail_host = "smtp.163.com"   # 设置服务器
																																													mail_user = "**********@163.com"    # 发送邮箱
																																													mail_pass = "*******" # 邮箱校验码 非密码 
																																													receiver = "*******@163.com"     # 接收邮箱 
																																													message = MIMEText(text, 'plain', 'utf-8') #构造MIMEText对象
																																													message['From'] = '难忘你的'+'&lt;'+mail_user+'&gt;'
																																													message['To'] = '我难忘的' +'&lt;'+receiver+'&gt;' 
																																													message['Subject'] = ' 月色真美 ' 
																																													try:
																																													smtpObj = smtplib.SMTP_SSL(mail_host,465) #实例一个邮件传输对象
																																													smtpObj.ehlo() #初始化到服务器的连接，类似于敲门的感觉
																																													smtpObj.login(mail_user,mail_pass)
																																													print('登录成功！')
																																													smtpObj.sendmail(mail_user, receiver, message.as_string()) # 发送邮件
																																													smtpObj.quit()  # 邮件退出
																																													print("恭喜：邮件发送成功!")
																																													except smtplib.SMTPException:
																																													print("错误：无法发送邮件")
																																												</pre>
																																												快用这个脚本给你女朋友发电子邮件，让她开心一下吧。如果你有的话(●'◡'●)

																																												【未完待续】]]></content:encoded>
																																												<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																												<wp:post_id>206</wp:post_id>
																																												<wp:post_date><![CDATA[2018-07-14 00:30:20]]></wp:post_date>
																																												<wp:post_date_gmt><![CDATA[2018-07-13 16:30:20]]></wp:post_date_gmt>
																																												<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																												<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																												<wp:post_name><![CDATA[%e7%94%a8python%e7%bb%99%e4%bd%a0%e5%a5%b3%e6%9c%8b%e5%8f%8b%e5%86%99%e5%b0%81%e4%bf%a1]]></wp:post_name>
																																												<wp:status><![CDATA[publish]]></wp:status>
																																												<wp:post_parent>0</wp:post_parent>
																																												<wp:menu_order>0</wp:menu_order>
																																												<wp:post_type><![CDATA[post]]></wp:post_type>
																																												<wp:post_password><![CDATA[]]></wp:post_password>
																																												<wp:is_sticky>0</wp:is_sticky>
																																												<category domain="category" nicename="python"><![CDATA[python]]></category>
																																												<wp:postmeta>
																																													<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																													<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																												</wp:postmeta>
																																											</item>
																																											<item>
																																												<title>古典密码</title>
																																												<link>https://l3away.cn/?p=214</link>
																																												<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
																																												<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																												<guid isPermaLink="false">https://l3away.cn/?p=214</guid>
																																												<description></description>
																																												<content:encoded><![CDATA[古典密码分为两大类：替换和重排序。

																																													替换是以凯撒为首，还有具体的rot5，rot13，rot47等。

																																													重排序则主要以栅栏密码为主。

																																													今天主要谈谈这些密码的解密实现，以便更好地理解它们。

																																													凯撒全排列：
																																													<pre class="EnlighterJSRAW" data-enlighter-language="python"># -*- coding: utf-8 -*-
																																														# @Author: Lily_Sun
																																														# @Date:   2018-07-16 13:08:47
																																														# @Last Modified by:   Lily_Sun
																																														# @Last Modified time: 2018-07-16 16:10:22

																																														def caerar(str):
																																														for i in range(1,27):
																																														for x in str:
																																														print(chr(ord(x)+i),end="")
																																														print("\r")	

																																														if __name__ == '__main__':
																																														str = input("输入字符串\n")
																																														caerar(str)
																																													</pre>
																																													rot5 &amp; rot 5：
																																													<pre class="EnlighterJSRAW" data-enlighter-language="python"># -*- coding: utf-8 -*-
																																														# @Author: Lily_Sun
																																														# @Date:   2018-07-16 15:33:31
																																														# @Last Modified by:   Lily_Sun
																																														# @Last Modified time: 2018-07-16 15:50:40


																																														def rot(x):
																																														str = input("input the string\n")
																																														ans = ""
																																														for e in str:
																																														if x == '5':
																																														if (e.isnumeric()):
																																														ans += chr(ord(e)+5)
																																														else:
																																														ans += e
																																														elif x == '13':
																																														if (e.isalpha()):
																																														ans += chr(ord(e)+13)
																																														else:
																																														ans += e
																																														print(ans)

																																														if __name__ == '__main__':
																																														x = input("rot 5/13 ?\n")
																																														rot(x)</pre>
																																														rot 47：

																																														&nbsp;

																																														&nbsp;]]></content:encoded>
																																														<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																														<wp:post_id>214</wp:post_id>
																																														<wp:post_date><![CDATA[2018-07-16 17:08:04]]></wp:post_date>
																																														<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
																																														<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																														<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																														<wp:post_name><![CDATA[]]></wp:post_name>
																																														<wp:status><![CDATA[draft]]></wp:status>
																																														<wp:post_parent>0</wp:post_parent>
																																														<wp:menu_order>0</wp:menu_order>
																																														<wp:post_type><![CDATA[post]]></wp:post_type>
																																														<wp:post_password><![CDATA[]]></wp:post_password>
																																														<wp:is_sticky>0</wp:is_sticky>
																																														<category domain="category" nicename="others"><![CDATA[others]]></category>
																																														<wp:postmeta>
																																															<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																															<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																														</wp:postmeta>
																																													</item>
																																													<item>
																																														<title>忘记root的密码如何解决</title>
																																														<link>https://l3away.cn/?p=219</link>
																																														<pubDate>Sun, 05 Aug 2018 14:47:48 +0000</pubDate>
																																														<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																														<guid isPermaLink="false">https://l3away.cn/?p=219</guid>
																																														<description></description>
																																														<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
																																															<h4> 昨天教同学使用Ubuntu，他居然把密码给忘记了。于是便顺便了解了一下这方面的知识。 </h4>
																																															<!-- /wp:heading -->

																																															<!-- wp:more -->
																																															<!--more-->
																																															<!-- /wp:more -->

																																															<!-- wp:paragraph -->
																																															<p>首先是在开机3秒内按下ESC键</p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>然后就会出现一个菜单，选择进入恢复模式 （recovery mode）</p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>进入恢复模式以后，启用root shell</p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>将目录改为可写<br><code>mount -o rw,remount </code></p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>查看home下的用户<br><code>ls /home</code></p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>修改密码<br><code>passwd</code></p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>输入两次密码（一次是确认）即修改完成</p>
																																															<!-- /wp:paragraph -->

																																															<!-- wp:paragraph -->
																																															<p>重启</p>
																																															<!-- /wp:paragraph -->]]></content:encoded>
																																															<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																															<wp:post_id>219</wp:post_id>
																																															<wp:post_date><![CDATA[2018-08-05 22:47:48]]></wp:post_date>
																																															<wp:post_date_gmt><![CDATA[2018-08-05 14:47:48]]></wp:post_date_gmt>
																																															<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																															<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																															<wp:post_name><![CDATA[%e5%bf%98%e8%ae%b0%e4%ba%86ubuntu%e7%9a%84root%e7%94%a8%e6%88%b7%e7%9a%84%e5%af%86%e7%a0%81%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3]]></wp:post_name>
																																															<wp:status><![CDATA[publish]]></wp:status>
																																															<wp:post_parent>0</wp:post_parent>
																																															<wp:menu_order>0</wp:menu_order>
																																															<wp:post_type><![CDATA[post]]></wp:post_type>
																																															<wp:post_password><![CDATA[]]></wp:post_password>
																																															<wp:is_sticky>0</wp:is_sticky>
																																															<category domain="category" nicename="linux"><![CDATA[linux]]></category>
																																															<wp:postmeta>
																																																<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																															</wp:postmeta>
																																														</item>
																																														<item>
																																															<title>浅谈客户端验证</title>
																																															<link>https://l3away.cn/?p=459</link>
																																															<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
																																															<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																															<guid isPermaLink="false">https://l3away.cn/?p=459</guid>
																																															<description></description>
																																															<content:encoded><![CDATA[<!-- wp:quote -->
																																																<blockquote class="wp-block-quote"><p>安全的每一道门，都至关重要。</p></blockquote>
																																																<!-- /wp:quote -->

																																																<!-- wp:paragraph -->
																																																<p> 安全验证主要分为客户端验证和服务端验证。一般来说，服务端的验证是保障安全的关键，无论客户端验证有无，服务端都需要有</p>
																																																<!-- /wp:paragraph -->]]></content:encoded>
																																																<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																<wp:post_id>459</wp:post_id>
																																																<wp:post_date><![CDATA[2019-06-12 18:33:01]]></wp:post_date>
																																																<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
																																																<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																<wp:post_name><![CDATA[]]></wp:post_name>
																																																<wp:status><![CDATA[draft]]></wp:status>
																																																<wp:post_parent>0</wp:post_parent>
																																																<wp:menu_order>0</wp:menu_order>
																																																<wp:post_type><![CDATA[post]]></wp:post_type>
																																																<wp:post_password><![CDATA[]]></wp:post_password>
																																																<wp:is_sticky>0</wp:is_sticky>
																																																<category domain="category" nicename="others"><![CDATA[others]]></category>
																																															</item>
																																															<item>
																																																<title>用crontab配置定时任务</title>
																																																<link>https://l3away.cn/?p=228</link>
																																																<pubDate>Mon, 06 Aug 2018 22:09:08 +0000</pubDate>
																																																<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																<guid isPermaLink="false">https://l3away.cn/?p=228</guid>
																																																<description></description>
																																																<content:encoded><![CDATA[前段时间需要定期把一个服务器上的日志以邮件的形式发送到我的邮箱，于是了解了一下linux下定时任务的实现。

																																																	（本文假定阅读者有基本的linux操作能力）

																																																	<!--more-->

																																																	linux下一般用crontab配置定时任务，本人用的是centos。

																																																	安装命令如下：
																																																	<pre>yum install vixie-cron #cron主程序
																																																		yum install crontab #crontab主体
																																																		chkconfig -level 345 crond on #设置开机自启动</pre>
																																																		安装成功后打开crontab 配置
																																																		<pre>vi /etc/crontab</pre>
																																																		然后 该文件布局如下（ <strong>注意，以编辑crontab的方式运行定时任务不能省略用户名</strong>）：
																																																		<pre>m h d m weekday user  command</pre>
																																																		对应的分别是：

																																																		分钟 小时 日期 月份 星期 用户 命令

																																																		每个值的范围（不过不限制则为*）
																																																		<pre>0-59 0-23 1-31 1-12 0-6(0 = sunday) username command</pre>
																																																		下面举例：

																																																		比如我想要在每天0：00以root用户执行一个名为test.sh的脚本：
																																																		<pre>0 0 * * * root ./root/test.sh #假设先前已经给了执行权限</pre>
																																																		再比如每周六和周日以root用户执行一个名为img_crawl.py的爬虫：
																																																		<pre>* * * * 0,6 root python /root/img_crawl.py</pre>
																																																		或者你想要每天10：50开始 每十分钟以root用户执行clear_ram.sh脚本：
																																																		<pre>50,0 10 * * * root ./root/clear_ram.sh
																																																			0-59/10 * * * * root  ./root/clear_ram.sh</pre>
																																																			以上就是玩了三天crontab的总结啦~]]></content:encoded>
																																																			<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																			<wp:post_id>228</wp:post_id>
																																																			<wp:post_date><![CDATA[2018-08-07 06:09:08]]></wp:post_date>
																																																			<wp:post_date_gmt><![CDATA[2018-08-06 22:09:08]]></wp:post_date_gmt>
																																																			<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																			<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																			<wp:post_name><![CDATA[%e7%94%a8crontab%e9%85%8d%e7%bd%ae%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1]]></wp:post_name>
																																																			<wp:status><![CDATA[publish]]></wp:status>
																																																			<wp:post_parent>0</wp:post_parent>
																																																			<wp:menu_order>0</wp:menu_order>
																																																			<wp:post_type><![CDATA[post]]></wp:post_type>
																																																			<wp:post_password><![CDATA[]]></wp:post_password>
																																																			<wp:is_sticky>0</wp:is_sticky>
																																																			<category domain="category" nicename="linux"><![CDATA[linux]]></category>
																																																			<wp:postmeta>
																																																				<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																				<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																			</wp:postmeta>
																																																		</item>
																																																		<item>
																																																			<title>用python，查快递</title>
																																																			<link>https://l3away.cn/?p=231</link>
																																																			<pubDate>Mon, 06 Aug 2018 22:18:30 +0000</pubDate>
																																																			<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																			<guid isPermaLink="false">https://l3away.cn/?p=231</guid>
																																																			<description></description>
																																																			<content:encoded><![CDATA[在剁手的同时练手 ）

																																																				<!--more-->
																																																				<pre class="EnlighterJSRAW" data-enlighter-language="python"># -*- coding: utf-8 -*-
																																																					# @Author: Lily_Sun
																																																					# @Date:   2018-08-07 01:31:50
																																																					# @Last Modified by:   Lily_Sun
																																																					# @Last Modified time: 2018-08-07 06:17:13

																																																					import json
																																																					import requests
																																																					import re

																																																					#访问网页返回字典
																																																					def visit_api(url):
																																																					res = requests.get(url)
																																																					result_dict = json.loads(res.content.decode('utf-8'))
																																																					return result_dict

																																																					#返回公司编号
																																																					def get_company(epnum):
																																																					url = 'http://m.kuaidi100.com/autonumber/auto?num=' + str(epnum)
																																																					company = visit_api(url)[0]['comCode']
																																																					return company

																																																					#查询
																																																					def get_express(epnum,company):
																																																					url = 'http://m.kuaidi100.com/query?type=' + str(company) + '&amp;postid='+ str(epnum) + '&amp;id=1&amp;valicode='
																																																					result_list = visit_api(url)['data']
																																																					#print(result_list)
																																																					for result in result_list:
																																																					print(result['context'])
																																																					print("到达时间： "+result['time'])

																																																					def main():
																																																					epnum = input('输入你的快递单号：\n')
																																																					get_express(epnum,get_company(epnum))

																																																					if __name__ == '__main__':
																																																					main()
																																																					

																																																				</pre>
																																																				&nbsp;]]></content:encoded>
																																																				<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																				<wp:post_id>231</wp:post_id>
																																																				<wp:post_date><![CDATA[2018-08-07 06:18:30]]></wp:post_date>
																																																				<wp:post_date_gmt><![CDATA[2018-08-06 22:18:30]]></wp:post_date_gmt>
																																																				<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																				<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																				<wp:post_name><![CDATA[%e7%94%a8python%ef%bc%8c%e6%9f%a5%e5%bf%ab%e9%80%92]]></wp:post_name>
																																																				<wp:status><![CDATA[publish]]></wp:status>
																																																				<wp:post_parent>0</wp:post_parent>
																																																				<wp:menu_order>0</wp:menu_order>
																																																				<wp:post_type><![CDATA[post]]></wp:post_type>
																																																				<wp:post_password><![CDATA[]]></wp:post_password>
																																																				<wp:is_sticky>0</wp:is_sticky>
																																																				<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																				<wp:postmeta>
																																																					<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																					<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																				</wp:postmeta>
																																																			</item>
																																																			<item>
																																																				<title>下雨天，Python 与 excel 表格更配哦</title>
																																																				<link>https://l3away.cn/?p=238</link>
																																																				<pubDate>Tue, 16 Oct 2018 13:42:22 +0000</pubDate>
																																																				<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																				<guid isPermaLink="false">https://l3away.cn/?p=238</guid>
																																																				<description></description>
																																																				<content:encoded><![CDATA[<h2 class="md-end-block md-heading md-focus" contenteditable="true"><span class="">xlrd 的应用</span></h2>

																																																				<span class="">使用xlrd模块读取表格，并进行组织成员任务情况的统计</span>

																																																				 

																																																				<!--more-->

																																																				<pre class="EnlighterJSRAW" data-enlighter-language="python">#! -*- coding : utf-8 -*-
																																																					import xlrd
																																																					​
																																																					​
																																																					def is_exist(elem_list, new_elem):
																																																					   for elem in elem_list:
																																																					       if new_elem == elem:
																																																					           return True
																																																					       else:
																																																					           return False
																																																					​
																																																					​
																																																					class Reader(object):
																																																					   def read(self, filename='./task.xlsx'):
																																																					       data = xlrd.open_workbook(str(filename))
																																																					       table = data.sheet_by_index(0)
																																																					       row_num = table.nrows
																																																					       col_num = table.ncols
																																																					       elem_list = []
																																																					       elem_dict = {}
																																																					       for i in range(1, row_num):
																																																					           for j in range(1, 3):
																																																					               name = str(table.cell_value(i, j))
																																																					               name = name.strip()
																																																					               if name == '':
																																																					                   continue
																																																					               elif is_exist(elem_list, new_elem=name):
																																																					                   if '完成' in table.cell_value(i, 4):
																																																					                       elem_dict[name] += 1
																																																					               elif not is_exist(elem_list, new_elem=name):
																																																					                   if '完成' in table.cell_value(i, 4):
																																																					                       elem_list.append(name)
																																																					                       elem_dict[name] = 1
																																																					       return elem_dict
																																																					​
																																																					​
																																																					if __name__ == '__main__':
																																																					   reader = Reader()
																																																					   for key, value in reader.read().items():
																																																					       print(key, value)</pre>

																																																					<pre class="md-fences md-end-block ty-contain-cm modeLoaded" lang="python" contenteditable="true" spellcheck="false">丨体验的话，就是需要注意cell_value的范围，以及获取成员姓名时空元素的处理</pre>

																																																					<span class="md-expand"><em>又水了一篇~ </em></span>

																																																					已经写成一个小玩具啦：https://github.com/Weilet/jiwei_task_counter]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>238</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-10-16 21:42:22]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-10-16 13:42:22]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[%e4%b8%8b%e9%9b%a8%e5%a4%a9%ef%bc%8cpython%e4%b8%8eexcel%e8%a1%a8%e6%a0%bc%e6%9b%b4%e9%85%8d%e5%93%a6]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>Jinja2 模板引擎学习总结</title>
																																																					<link>https://l3away.cn/?p=246</link>
																																																					<pubDate>Sun, 28 Oct 2018 13:56:18 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=246</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h2>Jinja2 模板引擎 学习</h2>

																																																					<h3>变量绑定</h3>

																																																					输出变量为 <code>name</code> 的变量
																																																					<!--more-->

																																																					<pre><code class="language-jinja2 ">{{ name }}
																																																					</code></pre>

																																																					输出对象 <code>user</code> 中的变量名为 <code>name</code>  的变量

																																																					<pre><code class="language-jinja2 ">{{ user.name }}
																																																					</code></pre>

																																																					或者是

																																																					<pre><code class="language-jinja2 ">{{ user['name'] }}
																																																					</code></pre>

																																																					<h3>if - else 选择语句</h3>

																																																					与其他语言的 if - else 语句并无太大区别

																																																					<pre><code class="language-jinja2 ">{% if name and name == 'admin' %}
																																																						&lt;span&gt;欢迎进入管理界面&lt;/span&gt;
																																																						{% elif name %}
																																																						&lt;span&gt;欢迎你 {{ name }}&lt;/span&gt;
																																																						{% else %}
																																																						&lt;span&gt;需要登陆&lt;/span&gt;
																																																						{% endif %}
																																																					</code></pre>

																																																					<h3>for 循环</h3>

																																																					<blockquote>
																																																						需要注意内置的loop 方法，非常好用。
																																																					</blockquote>

																																																					后台爬取到广州各区的天气存储在 <code>weather_list</code> 中，想要输出它们

																																																					<pre><code class="language-jinja2 ">{% for data in weather_list %}
																																																						{% if loop.first %}
																																																						&lt;ul&gt;天气列表&lt;/ul&gt;
																																																						{% else %}
																																																						&lt;li&gt;今天 {{ data.area }} 的天气是 {{ data.weather }}&lt;/li&gt;
																																																						{% if loop.last %}
																																																						&lt;li&gt;共{{loop.length}}条数据&lt;li&gt;
																																																						{% endif %}
																																																						{% endfor %}
																																																					</code></pre>

																																																					<hr />

																																																					目前用到的就这么多，日后用到更多的功能会更新此文。]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>246</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-10-28 21:56:18]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-10-28 13:56:18]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[jinja2-%e6%a8%a1%e6%9d%bf%e5%bc%95%e6%93%8e%e5%ad%a6%e4%b9%a0%e6%80%bb%e7%bb%93]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[2018-10-22]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>CodeForces-1011C Fly</title>
																																																					<link>https://l3away.cn/?p=266</link>
																																																					<pubDate>Mon, 19 Nov 2018 09:45:02 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=266</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h3>题目</h3>

																																																					<blockquote>
																																																						地址: https://vjudge.net/problem/CodeForces-1011C
																																																					</blockquote>

																																																					<h3>分析</h3>

																																																					一共 n 个星球
																																																					<!--more-->
																																																					从地球前往火星，途中要经过 n-2 个星球

																																																					m 为火箭本身重量

																																																					对于第 i 个星球，a[i] 代表其起飞燃油效率，b[i] 代表着陆燃油效率

																																																					且有公式：

																																																					<blockquote>
																																																						燃油效率 * 消耗燃油质量 = 火箭剩余质量 + 消耗燃油质量 （1）
																																																					</blockquote>

																																																					故可以通过假设最后燃油恰好用尽，逆推出最初的重量，再减去火箭本身的重量即为最初携带的燃油的质量

																																																					当燃油效率为 1 时，就会出现无解的情况。

																																																					<h3>解题代码</h3>

																																																					<pre><code class="language-c ">#include &lt;cstdio&gt;
																																																						#include &lt;cmath&gt;
																																																						using namespace std;

																																																						int n, m, a[1005], b[1005];
																																																						double restore(int a[], int b[], double lastWeigh) {
																																																						double nowWeigh = lastWeigh;
																																																						nowWeigh += nowWeigh / (b[0]-1);
																																																						nowWeigh += nowWeigh / (a[n-1]-1);
																																																						for (int i = n -2; i &gt;= 0; i--) {
																																																						nowWeigh += nowWeigh / (b[i+1]-1);
																																																						nowWeigh += nowWeigh / (a[i]-1);
																																																						}
																																																						return nowWeigh - lastWeigh;
																																																						}

																																																						int main() {
																																																						scanf("%d", &amp;n);
																																																						scanf("%d", &amp;m);
																																																						for (int i = 0; i &lt; n; i++) {
																																																						scanf("%d", &amp;a[i]);
																																																						}
																																																						for (int i = 0; i &lt; n; i++) {
																																																						scanf("%d", &amp;b[i]);
																																																						}
																																																						double ret = restore(a, b, double(m));
																																																						if (isinf(ret)) {
																																																						printf("%d\n", -1);
																																																						} else {
																																																						printf("%.10f\n", ret);
																																																						}
																																																						}
																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>266</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-11-19 17:45:02]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-11-19 09:45:02]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[codeforces-1011c-fly]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>HDU - 5538 House Building</title>
																																																					<link>https://l3away.cn/?p=275</link>
																																																					<pubDate>Mon, 19 Nov 2018 12:53:53 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=275</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h3>题目</h3>

																																																					<blockquote>
																																																						地址: https://vjudge.net/problem/HDU-5538
																																																					</blockquote>

																																																					<h3>分析</h3>

																																																					对于高为 n 的独栋，其暴露面为： <u>6 * n - (n-1) * 2 -1</u> 
																																																					<!--more-->
																																																					化简后为：<u>4 * n + 1</u>

																																																					当与其他栋（不妨将之称为栋A）相邻时，接触一个方块就会减少一个暴露面（我们将每栋单独计算）

																																																					而接触的方块数取决于最矮的栋的方块数

																																																					对了，不要忘记这道题是个多 case

																																																					<h3>解题代码</h3>

																																																					<pre><code class="language-cpp ">#include &lt;iostream&gt;

																																																						using namespace std;

																																																						int main()
																																																						{
																																																						ios::sync_with_stdio(false);
																																																						int T;
																																																						cin&gt;&gt;T;
																																																						while (T--) {
																																																						int m, n;
																																																						cin&gt;&gt;n&gt;&gt;m;
																																																						int matrix[n][m];
																																																						for (int i = 0; i &lt; n; i++) {
																																																						for (int j = 0; j &lt; m; j++) {
																																																						cin&gt;&gt;matrix[i][j];
																																																						}
																																																						}
																																																						int sum = 0;
																																																						for (int i = 0; i &lt; n; i++) {
																																																						for (int j = 0; j &lt; m; j++) {
																																																						int side = 0;
																																																						if (matrix[i][j] == 0) {
																																																						continue;
																																																						} else {
																																																						side = matrix[i][j] * 6 - 1 - (matrix[i][j] - 1) * 2;
																																																						}
																																																						if (i + 1 &lt; n &amp;&amp; matrix[i+1][j] != 0) {
																																																						int mixSide = matrix[i+1][j] &lt; matrix[i][j] ? matrix[i+1][j] : matrix[i][j];
																																																						side -= mixSide;
																																																						}
																																																						if (i - 1 &gt;= 0 &amp;&amp; matrix[i-1][j] != 0) {
																																																						int mixSide = matrix[i-1][j] &lt; matrix[i][j] ? matrix[i-1][j] : matrix[i][j];
																																																						side -= mixSide;
																																																						}
																																																						if (j + 1 &lt; m &amp;&amp; matrix[i][j+1] != 0) {
																																																						int mixSide = matrix[i][j+1] &lt; matrix[i][j] ? matrix[i][j+1] : matrix[i][j];
																																																						side -= mixSide;
																																																						}
																																																						if (j - 1 &gt;= 0 &amp;&amp; matrix[i][j-1] != 0) {
																																																						int mixSide = matrix[i][j-1] &lt; matrix[i][j] ? matrix[i][j-1] : matrix[i][j];
																																																						side -= mixSide;
																																																						}
																																																						sum += side;
																																																						}
																																																						}
																																																						cout&lt;&lt;sum&lt;&lt;endl;
																																																						}
																																																						}
																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>275</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-11-19 20:53:53]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-11-19 12:53:53]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[hdu-5538-house-building]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>CodeForces - 976C - Nested Segments</title>
																																																					<link>https://l3away.cn/?p=279</link>
																																																					<pubDate>Wed, 21 Nov 2018 03:04:29 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=279</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h3>题目</h3>

																																																					<blockquote>
																																																						地址：https://vjudge.net/problem/1536049/origin
																																																					</blockquote>

																																																					<h3>分析</h3>

																																																					题目给出 <strong>n</strong> 个序列，每个序列包含两个数字，分别表示序列的起点和终点
																																																					<!--more-->
																																																					如果序列 <strong>j</strong> 被包含在 序列 <strong>i</strong>，那么输出i，j。
																																																					因此我们可以先将所有的序列按照左边界从小到大排序，那么对于i，i+1，它们的左边界一定是包含的，这个时候再比较它们的右边界即可，
																																																					鉴于可能出现左边界相同的情况，所以在左边界相同的时候，考虑右边界是否包含（即将右边界从大到小作为第二排序顺序）。这样可以使排序后的序列组更有序，更易于查找。

																																																					<h3>解题代码</h3>

																																																					<pre><code class="language-cpp ">#include &lt;cstdio&gt;
																																																						#include &lt;algorithm&gt;
																																																						#define MAXN 3*100001
																																																						using namespace std;
																																																						struct NODE {
																																																						int l, r, id;
																																																						bool operator &lt; (const NODE &amp;other) const {
																																																						return l &lt; other.l || l == other.l &amp;&amp; r &gt; other.r;
																																																						}
																																																						};
																																																						struct NODE nodes[MAXN];
																																																						int main() {
																																																						int n;
																																																						scanf("%d", &amp;n);
																																																						for (int i = 0; i &lt; n; i++) {
																																																						scanf("%d %d", &amp;nodes[i].l, &amp;nodes[i].r);
																																																						nodes[i].id = i;
																																																						}
																																																						sort(nodes, nodes+n);
																																																						for (int i = 1; i &lt; n; i++) {
																																																						if (nodes[i].r &lt;= nodes[i-1].r) {
																																																						printf("%d %d", nodes[i].id+1, nodes[i-1].id+1);
																																																						return 0;
																																																						}
																																																						}
																																																						printf("-1 -1");
																																																						return 0;
																																																						}
																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>279</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-11-21 11:04:29]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-11-21 03:04:29]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[whatever-a-nested-segments]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>广西大学新生赛</title>
																																																					<link>https://l3away.cn/?p=301</link>
																																																					<pubDate>Mon, 26 Nov 2018 09:12:02 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=301</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h2>“东信杯”广西大学第一届程序设计竞赛</h2>

																																																					地址： https://ac.nowcoder.com/acm/contest/283#question

																																																					<!--more-->

																																																					<h3>C 模拟只会猜题意</h3>

																																																					<h4>分析</h4>

																																																					<blockquote>
																																																						简单的模拟题，按照题意一个一个判断就好，这次写的代码有点长，以后有空的话会去精简的。
																																																					</blockquote>

																																																					<h4>解题代码</h4>

																																																					<pre><code class="language-cpp ">#include &lt;iostream&gt;
																																																						#include &lt;string&gt;
																																																						#include &lt;cmath&gt;
																																																						using namespace std;
																																																						bool isLower(string s) {
																																																						for (char x : s) {
																																																						if (!islower(x))
																																																						return false;
																																																						}
																																																						return true;
																																																						}
																																																						bool isNeighbor(char a, char b) {
																																																						return abs(a - b) == 2 || a == b;
																																																						}

																																																						bool isNeighborString(string s) {
																																																						int mid = s.size() / 2;
																																																						int left = mid - 1;
																																																						int right = (s.size() &amp; 1) == 0 ? mid : mid + 1;
																																																						while (left &gt;= 0) {
																																																						if (!isNeighbor(s[left], s[right]))
																																																						return false;
																																																						right++;
																																																						left--;
																																																						}
																																																						return true;
																																																						}
																																																						bool isOK(string s) {
																																																						return ((s.size() &amp; 1) == 0 &amp;&amp; isLower(s) &amp;&amp; isNeighborString(s));
																																																						}

																																																						int main() {
																																																						ios::sync_with_stdio(false);
																																																						int T;
																																																						cin&gt;&gt;T;
																																																						while (T--) {
																																																						int n;
																																																						cin&gt;&gt;n;
																																																						string s;
																																																						cin&gt;&gt;s;
																																																						if (isOK(s)) {
																																																						cout&lt;&lt;1&lt;&lt;endl;
																																																						} else {
																																																						cout&lt;&lt;0&lt;&lt;endl;
																																																						}
																																																						}
																																																						}
																																																					</code></pre>

																																																					<h3>D 数论只会GCD</h3>

																																																					<h4>分析</h4>

																																																					<blockquote>
																																																						不妨让 <strong>A > B</strong>，如果 <strong>A % B == 0</strong> 那么小西一定能够胜利，如果 <strong>A / B >= 2</strong>，那么小西一定可以控制饮料的数量存在 <strong>A % B == 0</strong>，所以小西也能赢。否则递归求解
																																																					</blockquote>

																																																					<h4>解题代码</h4>

																																																					<pre><code class="language-cpp ">#include &lt;cstdio&gt;
																																																						bool drink(long long teaNum, long long colaNum) {
																																																						if (teaNum &lt; colaNum)
																																																						return drink(colaNum, teaNum);
																																																						if (teaNum % colaNum == 0 || teaNum / colaNum &gt;= 2)
																																																						return true;
																																																						else {
																																																						return !drink(teaNum % colaNum, colaNum);
																																																						}
																																																						}
																																																						int main() {
																																																						int T;
																																																						scanf("%d", &amp;T);
																																																						while (T--) {
																																																						long long t, c;
																																																						scanf("%lld%lld", &amp;t, &amp;c);
																																																						if (drink(t, c)) {
																																																						printf("wula\n");
																																																						} else {
																																																						printf("mmp\n");
																																																						}
																																																						}
																																																						}
																																																					</code></pre>

																																																					<h4>注意</h4>

																																																					A，B &lt;= 1e12， 所以你需要使用long long。

																																																					<h3>E 贪心只能过样例</h3>

																																																					<h4>分析</h4>

																																																					<blockquote>
																																																						指针最初指向字符串的开头，递增一。如果存在 <strong>MF</strong> 或者 <strong>FM</strong>，那么计数器加一，然后指针加二。最后输出len(s) - cnt。这道题目靠感觉来的，我觉得只要把所有的 <strong>MF</strong> 和 <strong>FM</strong> 计算就可以了。
																																																					</blockquote>

																																																					<h4>解题代码</h4>

																																																					<pre><code class="language-cpp ">#include &lt;iostream&gt;
																																																						#include &lt;string&gt;
																																																						using namespace std;

																																																						bool isPair(char a, char b) {
																																																						return (a == 'M' &amp;&amp; b == 'F') || (a == 'F' &amp;&amp; b == 'M');
																																																						}

																																																						int main() {
																																																						int T;
																																																						cin&gt;&gt;T;
																																																						for (int i = 0; i &lt; T; i++) {
																																																						string s;
																																																						int cnt = 0;
																																																						cin&gt;&gt;s;
																																																						for (int k = 0; k &lt; s.size()-1; k++) {
																																																						if (isPair(s[k], s[k+1])) {
																																																						cnt++;
																																																						k++;
																																																						}
																																																						}
																																																						cout&lt;&lt;s.size() - cnt&lt;&lt;endl;
																																																						}
																																																						}
																																																					</code></pre>

																																																					<h3>结语</h3>

																																																					大二的自己依旧很弱。]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>301</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-11-26 17:12:02]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-11-26 09:12:02]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[%e5%b9%bf%e8%a5%bf%e5%a4%a7%e5%ad%a6%e6%96%b0%e7%94%9f%e8%b5%9b]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>广东工业大学新生赛</title>
																																																					<link>https://l3away.cn/?p=309</link>
																																																					<pubDate>Wed, 05 Dec 2018 05:54:10 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=309</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h2>2018年广东工业大学文远知行杯新生程序设计竞赛</h2>

																																																					地址：http://acm.hdu.edu.cn/contests/contest_show.php?cid=832

																																																					<!--more-->

																																																					<h3>1006 那天的延长线在今天β</h3>

																																																					<h4>题目</h4>

																																																					<strong>题干信息</strong>
																																																					连号的定义是a[i] + 1 == a[i+1],在这样的定义下长度最少为2，也可能并没有所谓连号子串，那长度为1就行了。
																																																					<strong>输入</strong>
																																																					第一行一个整数T(T&lt;=15)，代表一共有T组样例。
																																																					对于每组样例：
																																																					第一行一个整数 n， 表示序列长度（1 &lt;= n &lt;= 10000）
																																																					第二行 n 个整数 a[i]。（0 &lt;= a[i] &lt;= 10000）
																																																					题目保证n的总和不超过30000.
																																																					<strong>输出</strong>
																																																					输出一个整数，表示最长的连号子串的长度。

																																																					<h4>分析</h4>

																																																					初始化计数器为1，输出max为1。遍历整个串，如果存在A[i] + 1 == A[i+1]，那么计数器加1，然后与存储的max的值比较替换；否则，将计数器重置为1。
																																																					时间复杂度为O(n)

																																																					<h4>解题代码</h4>

																																																					<pre><code class="language-cpp ">#include &lt;iostream&gt;
																																																						using namespace std;

																																																						const int MAXN = 10005;
																																																						int a[MAXN], T, n;
																																																						int main() {
																																																						cin&gt;&gt;T;
																																																						while(T--) {
																																																						cin&gt;&gt;n;
																																																						for (int i = 0; i &lt; n; i++) {
																																																						cin&gt;&gt;a[i];
																																																						}
																																																						int max_value = 1;
																																																						int cnt = 1;
																																																						for (int i = 1; i &lt; n; i++) {
																																																						if (a[i-1] + 1 == a[i]) {
																																																						cnt++;
																																																						max_value = max_value &gt; cnt ? max_value : cnt;
																																																						} else {
																																																						cnt = 1;
																																																						}
																																																						}
																																																						cout&lt;&lt;max_value&lt;&lt;endl;
																																																						}
																																																						}
																																																					</code></pre>

																																																					<h3>1012 只有我不在的世界β</h3>

																																																					<h4>题目</h4>

																																																					<strong>题干信息</strong> 
																																																					如果[a,b]表示a和b的最小公倍数，那么[a,b]/a能得到多少个不同的数字呢？限制条件：a的范围是1到1000。
																																																					<strong>输入</strong>
																																																					第一行输入一个整数T(T&lt;=50)，代表有T组样例。
																																																					对于每组样例：
																																																					输入一个数b（1&lt;=b&lt;=100000）
																																																					<strong>输出</strong>
																																																					对于每个b，输出一个整数，表示[a,b]/a可以得到多少个不同的数。

																																																					<h4>分析</h4>

																																																					我们知道，lcm(a, b) = a * b / gcd(a, b)，所以输出可以转换为
																																																					b / gcd(a, b)，等价于求 b 的因子个数，且因子大小为min(1000, b)
																																																					<strong>不可以用 sqrt 缩短循环，因为可能存在c、d，使得 c * d = b，c &lt; 1000，但是 d > 1000。</strong>
																																																					时间复杂度为O(n)

																																																					<h4>解题代码</h4>

																																																					<pre><code class="language-cpp ">#include &lt;iostream&gt;
																																																						using namespace std;
																																																						int main() {
																																																						int T;
																																																						cin&gt;&gt;T;
																																																						while (T--) {
																																																						int b, cnt = 0;
																																																						cin&gt;&gt;b;
																																																						for (int i = 1; i &lt;= b &amp;&amp; i &lt;= 1000; i++) {
																																																						if (b % i == 0)
																																																						cnt++;
																																																						}
																																																						cout&lt;&lt;cnt&lt;&lt;endl;
																																																						}
																																																						}
																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>309</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-12-05 13:54:10]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-12-05 05:54:10]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[%e5%b9%bf%e4%b8%9c%e5%b7%a5%e4%b8%9a%e5%a4%a7%e5%ad%a6%e6%96%b0%e7%94%9f%e8%b5%9b]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>696.Count Binary Substrings</title>
																																																					<link>https://l3away.cn/?p=312</link>
																																																					<pubDate>Wed, 05 Dec 2018 06:13:02 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=312</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<blockquote>
																																																						一个月前开始刷leetcode，现在想写些文章记录一下自己的思路。
																																																						题目随缘，更新随缘。
																																																					</blockquote>

																																																					<!--more-->

																																																					<h3>题目</h3>

																																																					地址：https://leetcode.com/problems/minimum-increment-to-make-array-unique/

																																																					<h3>分析</h3>

																																																					给出一个字符串，找到其中由连续 n 个 0 和 连续 n 个 1 组成的子串。
																																																					显然，对于任意一个连续 n 个 0 和 连续 m 个 1 的串，它能组成这样的子串的个数为min(n, m)，所以可以建立一个哈希表，存储每一段连续相同串的长度。然后对于相邻的两个连续串，取其较小者加到答案中。
																																																					时间复杂度为 O(n)

																																																					<h3>解题代码</h3>

																																																					<pre><code class="language-python ">class Solution(object):
																																																						def countBinarySubstrings(self, s):
																																																						groups, ans = [1], 0
																																																						for i in range(1, len(s)):
																																																						if s[i-1] != s[i]:
																																																						groups.append(1)
																																																						else:
																																																						groups[-1] += 1
																																																						for i in range(1, len(groups)):
																																																						ans += min(groups[i-1], groups[i])
																																																						return ans
																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>312</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-12-05 14:13:02]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-12-05 06:13:02]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[696-count-binary-substrings]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>914. X of a Kind in a Deck of Cards</title>
																																																					<link>https://l3away.cn/?p=322</link>
																																																					<pubDate>Wed, 05 Dec 2018 08:12:15 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=322</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h3>题目</h3>

																																																					地址：https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/

																																																					<!--more-->

																																																					<h3>分析</h3>

																																																					对于由 N 个数字组成的一堆数字，如果存在 x 使得这堆数字可以均分成含 x 个数字的堆，那么 N % x == 0，而且对于所有数字的个数 ci，都有 ci % x == 0。暴力模拟这个过程即可。
																																																					时间复杂度O(N * N)

																																																					<h3>解题代码</h3>

																																																					<pre><code class="language-python ">class Solution:
																																																						def hasGroupsSizeX(self, deck):
																																																						"""
																																																						:type deck: List[int]
																																																						:rtype: bool
																																																						"""
																																																						from collections import Counter
																																																						counter = Counter(deck)
																																																						N = len(deck)
																																																						for i in range(2, N + 1):
																																																						if N % i == 0:
																																																						if all(v % i == 0 for v in counter.values()):
																																																						return True
																																																						return False
																																																					</code></pre>

																																																					<h3>更新</h3>

																																																					其实对于一个 deck，可以选择计算每种数字的出现次数，并对它们求最大公因数。如果最大公因数不为 1，那么存在 x > 1 使得牌堆可以分为大小为 x 的牌堆。
																																																					时间复杂度为O(N * logN * logN)

																																																					<pre><code class="language-python ">class Solution:
																																																						def hasGroupsSizeX(self, deck):
																																																						"""
																																																						:type deck: List[int]
																																																						:rtype: bool
																																																						"""
																																																						from collections import Counter
																																																						from functools import reduce
																																																						from math import gcd
																																																						return True if reduce(gcd, Counter(deck).values()) &gt; 1 else False

																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>322</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-12-05 16:12:15]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-12-05 08:12:15]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[914-x-of-a-kind-in-a-deck-of-cards]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>945. Minimum Increment to Make Array Unique</title>
																																																					<link>https://l3away.cn/?p=326</link>
																																																					<pubDate>Wed, 05 Dec 2018 08:55:14 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=326</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h3>题目</h3>

																																																					地址：https://leetcode.com/problems/minimum-increment-to-make-array-unique/

																																																					<!--more-->

																																																					<h3>分析</h3>

																																																					对于无序的序列，我们不好判断，所以我们需要将原数组进行排序，对于前后两个数字，我们保证 a[i] > a[i-1]，否则更新a[i]，计数器增加 a[i-1] + 1 - a[i]，同时使得a[i] = a[i-1] + 1。

																																																					<h3>解题代码</h3>

																																																					<pre><code class="language-python ">class Solution:
																																																						def minIncrementForUnique(self, A):
																																																						"""
																																																						:type A: List[int]
																																																						:rtype: int
																																																						"""
																																																						A.sort()
																																																						res = 0
																																																						for i in range(1, len(A)):
																																																						if a[i] &lt; a[i-1]:
																																																						res += a[i-1] + 1 - a[i]
																																																						a[i] = a[i-1] + 1
																																																						return res
																																																					</code></pre>]]></content:encoded>
																																																					<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																					<wp:post_id>326</wp:post_id>
																																																					<wp:post_date><![CDATA[2018-12-05 16:55:14]]></wp:post_date>
																																																					<wp:post_date_gmt><![CDATA[2018-12-05 08:55:14]]></wp:post_date_gmt>
																																																					<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																					<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																					<wp:post_name><![CDATA[945-minimum-increment-to-make-array-unique]]></wp:post_name>
																																																					<wp:status><![CDATA[publish]]></wp:status>
																																																					<wp:post_parent>0</wp:post_parent>
																																																					<wp:menu_order>0</wp:menu_order>
																																																					<wp:post_type><![CDATA[post]]></wp:post_type>
																																																					<wp:post_password><![CDATA[]]></wp:post_password>
																																																					<wp:is_sticky>0</wp:is_sticky>
																																																					<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																					<wp:postmeta>
																																																						<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																						<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																					</wp:postmeta>
																																																				</item>
																																																				<item>
																																																					<title>371. Sum of Two Integers</title>
																																																					<link>https://l3away.cn/?p=340</link>
																																																					<pubDate>Fri, 04 Jan 2019 15:21:29 +0000</pubDate>
																																																					<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																					<guid isPermaLink="false">https://l3away.cn/?p=340</guid>
																																																					<description></description>
																																																					<content:encoded><![CDATA[<h3>题目</h3>

																																																					地址: https://leetcode.com/problems/sum-of-two-integers/

																																																					<!--more-->

																																																					<h4>分析</h4>

																																																					不使用 '+' 号而完成加法的操作。有很多封装好的方法可以用，但最终还是选择使用位运算。
																																																					位运算完成加法的算法是什么？
																																																					1. 对于加数 <strong>a</strong>、<strong>b</strong>，<strong>a</strong> 存储 <strong>a+b</strong> 每位的结果（不包括进位）。而 <strong>b</strong> 存储 <strong>a+b</strong> 每位进位的情况，所以
																																																					<code>a = a ^ b
																																																						b = (a &amp; b) &lt;&lt; 1</code>
																																																						2. 当 <strong>b</strong> 为 <strong>0</strong> 时，终止循环，否则再次进入步骤 1.

																																																						<h4>坑点</h4>

																																																						虽然知道了算法，但是在用 python 实现的过程还是出现了很多岔子。
																																																						因为 python 存储数值的方式，导致在出现负数的时候，循环无法终结（python 的负数有无数个前导1，而其他语言则因为有数据范围而溢出，不存在这个问题。）

																																																						<h4>解题代码</h4>

																																																						<pre><code class="language-python ">class Solution(object):
																																																							def getSum(self, a, b):
																																																							"""
																																																							:type a: int
																																																							:type b: int
																																																							:rtype: int
																																																							"""
																																																							MAX = 0x7FFFFFFF  # 这两个
																																																							MASK = 0xFFFFFFFF  # 是关键
																																																							while b:
																																																							a, b = (a ^ b) &amp; MASK, ((a &amp; b) &lt;&lt; 1) &amp; MASK
																																																							return a if a &lt;= MAX else ~(a ^ MASK)
																																																						</code></pre>]]></content:encoded>
																																																						<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																						<wp:post_id>340</wp:post_id>
																																																						<wp:post_date><![CDATA[2019-01-04 23:21:29]]></wp:post_date>
																																																						<wp:post_date_gmt><![CDATA[2019-01-04 15:21:29]]></wp:post_date_gmt>
																																																						<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																						<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																						<wp:post_name><![CDATA[371-sum-of-two-integers]]></wp:post_name>
																																																						<wp:status><![CDATA[publish]]></wp:status>
																																																						<wp:post_parent>0</wp:post_parent>
																																																						<wp:menu_order>0</wp:menu_order>
																																																						<wp:post_type><![CDATA[post]]></wp:post_type>
																																																						<wp:post_password><![CDATA[]]></wp:post_password>
																																																						<wp:is_sticky>0</wp:is_sticky>
																																																						<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																						<wp:postmeta>
																																																							<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																							<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																						</wp:postmeta>
																																																						<wp:postmeta>
																																																							<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																							<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																						</wp:postmeta>
																																																						<wp:postmeta>
																																																							<wp:meta_key><![CDATA[_oembed_833344d3c12a3d664fdd80aec56c3c13]]></wp:meta_key>
																																																							<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
																																																						</wp:postmeta>
																																																					</item>
																																																					<item>
																																																						<title>#Codeforces Round #541 div2 B.Draw!</title>
																																																						<link>https://l3away.cn/?p=357</link>
																																																						<pubDate>Tue, 26 Feb 2019 15:51:07 +0000</pubDate>
																																																						<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																						<guid isPermaLink="false">https://l3away.cn/?p=357</guid>
																																																						<description></description>
																																																						<content:encoded><![CDATA[<h3>题目</h3>

																																																						地址: https://codeforces.com/contest/1131/problem/B

																																																						<!--more-->

																																																						<h3>分析</h3>

																																																						按时间顺序给出多个比分，初始比分为0：0，询问最多可能的平局次数。
																																																						刚开始看到这道题目的时候我是没有思路的，然而模拟了题目给的样例多次后，我发现如果要发生一次平局，那么上一时刻的比分数领先的应该至少在当前时刻被先前的落后的追平。
																																																						也就是，min(now) - max(last) == 0 时，发生一次平局。根据规律可以发现其实这个算式的值即为发生最大平局数。然而，如果当前时刻比分相等，那么这次比分已经计入了上一时刻，应当减去重复。

																																																						<h3>解题代码</h3>

																																																						<pre><code class="language-cpp ">#include &lt;iostream&gt;
																																																							#include &lt;algorithm&gt;

																																																							using namespace std;

																																																							int main() {
																																																							int n, now[2] = {0}, last[2] = {0};
																																																							long long ans = 1;
																																																							cin&gt;&gt;n;
																																																							for (int i =0; i &lt; n; i++) {
																																																							cin&gt;&gt;now[0]&gt;&gt;now[1];
																																																							int accumulation = min(now[0], now[1]) - max(last[0], last[1]);
																																																							if (accumulation &gt;= 0) {
																																																							ans += accumulation + 1;
																																																							}
																																																							if (last[0] == last[1]) ans--;
																																																							last[0] = now[0];
																																																							last[1] = now[1];
																																																							}
																																																							cout&lt;&lt;ans&lt;&lt;endl;
																																																							}
																																																						</code></pre>]]></content:encoded>
																																																						<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																						<wp:post_id>357</wp:post_id>
																																																						<wp:post_date><![CDATA[2019-02-26 23:51:07]]></wp:post_date>
																																																						<wp:post_date_gmt><![CDATA[2019-02-26 15:51:07]]></wp:post_date_gmt>
																																																						<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																						<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																						<wp:post_name><![CDATA[codeforces-round-541-div2-b-draw]]></wp:post_name>
																																																						<wp:status><![CDATA[publish]]></wp:status>
																																																						<wp:post_parent>0</wp:post_parent>
																																																						<wp:menu_order>0</wp:menu_order>
																																																						<wp:post_type><![CDATA[post]]></wp:post_type>
																																																						<wp:post_password><![CDATA[]]></wp:post_password>
																																																						<wp:is_sticky>0</wp:is_sticky>
																																																						<category domain="category" nicename="algorithm"><![CDATA[algorithm]]></category>
																																																						<wp:postmeta>
																																																							<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																							<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																						</wp:postmeta>
																																																						<wp:postmeta>
																																																							<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																							<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																						</wp:postmeta>
																																																					</item>
																																																					<item>
																																																						<title>Python 函数注释</title>
																																																						<link>https://l3away.cn/?p=361</link>
																																																						<pubDate>Sun, 03 Mar 2019 14:18:10 +0000</pubDate>
																																																						<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																						<guid isPermaLink="false">https://l3away.cn/?p=361</guid>
																																																						<description></description>
																																																						<content:encoded><![CDATA[相较于以往采用文档字符串去注释函数，现在 Python 提供了更为轻便的，为小型功能函数准备的函数注释功能。

																																																							<!--more-->

																																																							<h3>如何添加函数注释</h3>

																																																							在参数后添加英文半角冒号，注释类型
																																																							在函数定义括号后使用一个连字符和右尖括号，注释返回参数类型
																																																							下面是例子：

																																																							<pre><code class="language-python ">def foo(name: str, age: int) -&gt; int:
																																																								pass
																																																							</code></pre>

																																																							<h3>注意</h3>

																																																							显然，这个类型可以是你瞎编的。但引入某些类型的注释时，需要引入 typing 中相应的模块，如：

																																																							<pre><code class="language-python ">from typing import List
																																																								def foo(A: List[int]) -&gt; int:
																																																								pass
																																																							</code></pre>

																																																							当然，你仍然可以给参数添加默认值：

																																																							<pre><code class="language-python ">from typing import List
																																																								def foo(A: List[int] = [1, 2, 3, 4, 5]) -&gt; int:
																																																								pass
																																																							</code></pre>]]></content:encoded>
																																																							<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																							<wp:post_id>361</wp:post_id>
																																																							<wp:post_date><![CDATA[2019-03-03 22:18:10]]></wp:post_date>
																																																							<wp:post_date_gmt><![CDATA[2019-03-03 14:18:10]]></wp:post_date_gmt>
																																																							<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																							<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																							<wp:post_name><![CDATA[python-%e5%87%bd%e6%95%b0%e6%b3%a8%e9%87%8a]]></wp:post_name>
																																																							<wp:status><![CDATA[publish]]></wp:status>
																																																							<wp:post_parent>0</wp:post_parent>
																																																							<wp:menu_order>0</wp:menu_order>
																																																							<wp:post_type><![CDATA[post]]></wp:post_type>
																																																							<wp:post_password><![CDATA[]]></wp:post_password>
																																																							<wp:is_sticky>0</wp:is_sticky>
																																																							<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																							<wp:postmeta>
																																																								<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																								<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																							</wp:postmeta>
																																																							<wp:postmeta>
																																																								<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																								<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																							</wp:postmeta>
																																																						</item>
																																																						<item>
																																																							<title>两个下划线和 Python 的故事</title>
																																																							<link>https://l3away.cn/?p=366</link>
																																																							<pubDate>Tue, 16 Apr 2019 04:38:43 +0000</pubDate>
																																																							<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																							<guid isPermaLink="false">https://l3away.cn/?p=366</guid>
																																																							<description></description>
																																																							<content:encoded><![CDATA[<!-- wp:quote -->
																																																								<blockquote class="wp-block-quote"><p> 从前，有两个孤独的下划线，走进了 Python 的世界 </p></blockquote>
																																																								<!-- /wp:quote -->

																																																								<!-- wp:more -->
																																																								<!--more-->
																																																								<!-- /wp:more -->

																																																								<!-- wp:heading {"level":3} -->
																																																								<h3>魔法方法 </h3>
																																																								<!-- /wp:heading -->

																																																								<!-- wp:paragraph -->
																																																								<p>是的，他们不幸地进入了面向对象编程的世界，并成为了魔法方法中的一部分。</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>在 Python 的世界里面，有以下常见的魔法方法： </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>1. __init__  初始化对象时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>2. __del__ 对象释放时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>3. __new__ 对象被创建时会被调用；注意，创建的时机早于初始化 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>4. __str__ 使用print()时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>5. __len__ 使用len()时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>6. __call__ 将对象当作函数使用时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>7. __add__, __sub__, __mul__, __div__ 加、减、乘、除时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>8. __mod__, __pow__ 取模、求幂时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>9. __getitem__, __setitem__, __delitem__ 取值、赋值、删除时调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>10. __iter__ for循环遍历对象时会被调用 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p><strong>__repr__</strong> 与 __str__ 相似，网上的资料显示前者主要针对开发者，而后者则囊括所有人群 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:heading {"level":3} -->
																																																								<h3>特殊成员</h3>
																																																								<!-- /wp:heading -->

																																																								<!-- wp:paragraph -->
																																																								<p>在面向对象的世界里面，他们有时也会变成特殊成员的一部分 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>1. __doc__ 说明性文档 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>2. __author__ 作者信息</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>3. __dict__ 类或对象的所有成员，Python 自建</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>4. __slots__ 定义允许修改的属性，该成员不会继承和被继承</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>5. __module__ 当前对象所属模块</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>6. __class__ 当前对象所属类  </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>事实上，你可以通过在变量前添加两条孤独的下划线来使成员变为私有成员 。</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:heading -->
																																																								<h2> 内置变量 </h2>
																																																								<!-- /wp:heading -->

																																																								<!-- wp:paragraph -->
																																																								<p>走出面向对象的世界，他们变成了内置变量的一部分</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>1. __file__ 文件路径</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>2. __package__ 获取导入文件的路径，多层目录以点分割，注意：对当前文件返回None </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>3. __cached__ 获取导入文件的缓存路径</p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>4. __name__ 获取导入文件的路径加文件名称，路径以点分割，当前运行的文件为__main__ </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>5. __builtins__ 内置函数 </p>
																																																								<!-- /wp:paragraph -->

																																																								<!-- wp:paragraph -->
																																																								<p>就这样，这两个孤独的下划线，在 Python 的世界里，无端漫游。</p>
																																																								<!-- /wp:paragraph -->]]></content:encoded>
																																																								<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																								<wp:post_id>366</wp:post_id>
																																																								<wp:post_date><![CDATA[2019-04-16 12:38:43]]></wp:post_date>
																																																								<wp:post_date_gmt><![CDATA[2019-04-16 04:38:43]]></wp:post_date_gmt>
																																																								<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																								<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																								<wp:post_name><![CDATA[%e4%b8%a4%e4%b8%aa%e4%b8%8b%e5%88%92%e7%ba%bf%e5%92%8c-python-%e7%9a%84%e6%95%85%e4%ba%8b]]></wp:post_name>
																																																								<wp:status><![CDATA[publish]]></wp:status>
																																																								<wp:post_parent>0</wp:post_parent>
																																																								<wp:menu_order>0</wp:menu_order>
																																																								<wp:post_type><![CDATA[post]]></wp:post_type>
																																																								<wp:post_password><![CDATA[]]></wp:post_password>
																																																								<wp:is_sticky>0</wp:is_sticky>
																																																								<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																								</wp:postmeta>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																								</wp:postmeta>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[]]></wp:meta_value>
																																																								</wp:postmeta>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[]]></wp:meta_value>
																																																								</wp:postmeta>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[a:2:{i:3;i:3;i:4;i:4;}]]></wp:meta_value>
																																																								</wp:postmeta>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[]]></wp:meta_value>
																																																								</wp:postmeta>
																																																								<wp:postmeta>
																																																									<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
																																																									<wp:meta_value><![CDATA[]]></wp:meta_value>
																																																								</wp:postmeta>
																																																							</item>
																																																							<item>
																																																								<title>Python 中的 Mixin 模式</title>
																																																								<link>https://l3away.cn/?p=377</link>
																																																								<pubDate>Mon, 22 Apr 2019 02:12:22 +0000</pubDate>
																																																								<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																								<guid isPermaLink="false">https://l3away.cn/?p=377</guid>
																																																								<description></description>
																																																								<content:encoded><![CDATA[<h3 class="md-end-block md-heading" contenteditable="true"><span class="md-plain md-expand">什么是 Mixin</span></h3>
																																																								<p class="md-end-block md-p" contenteditable="true"><span class="md-plain">Mixin是面向对象程序设计语言中的类，提供了方法的实现。 （来自维基百科）</span><!--more--></p>

																																																								<h3 class="md-end-block md-heading" contenteditable="true"><span class="md-plain">为什么需要 Mixin</span></h3>
																																																								<p class="md-end-block md-p" contenteditable="true"><span class="md-plain">首先我们需要明白，Python 中是支持多继承的。那么，你可能会问，既然 Python 支持多继承，那多继承和 使用 Mixin 有什么不同呢？</span> <span class="md-plain">从逻辑角度上看，多继承混淆了子类的属性，继承关系应当是 is-a 的关系的，至于其他多余的、不能从父类获取，应当利用其他方法去添加。</span> <span class="md-plain">在 Java 中，interface 解决了这个问题。一个类继承了父类后，如果需要其他属性，可以通过实现接口来解决。这使得代码的可读性变强。</span> <span class="md-plain">同样，在 Python 中，只有一个父类，至于继承的 Mixin，只是提供了方法的实现。它的名字应当是这样的 NameMixin，而且它应该具备以下特点：</span></p>

																																																								<ul data-mark="-">
																																																									<li>首先它必须表示某一种功能，而不是某个物品，如同Java中的Runnable，Callable等</li>
																																																									<li>其次它必须责任单一，如果有多个功能，那就写多个Mixin类</li>
																																																									<li>然后，它不依赖于子类的实现</li>
																																																									<li>最后，子类即便没有继承这个Mixin类，也照样可以工作，就是缺少了某个功能。 （参考思诚之道）</li>
																																																								</ul>
																																																								<h3 class="md-end-block md-heading md-focus" contenteditable="true"><span class="md-plain">具体例子</span></h3>
																																																								<pre class="EnlighterJSRAW" style="padding-left: 30px;" data-enlighter-language="null">class FlyMixin(Object):
																																																									def fly():
																																																									pass
																																																									class Airplane(Transportation, FlyMixin):
																																																									# 将 FlyMixin 中的 fly 实现
																																																									def fly(self):
																																																									print(f'{self} is flying')
																																																									# 其他代码</pre>
																																																									<h3 class="md-end-block md-heading" contenteditable="true"><span class="md-plain">注意</span></h3>
																																																									<p class="md-end-block md-p" contenteditable="true"><span class="md-plain md-expand">由于继承顺序的问题，应当将主类放在子类继承的最左边。</span></p>]]></content:encoded>
																																																									<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																									<wp:post_id>377</wp:post_id>
																																																									<wp:post_date><![CDATA[2019-04-22 10:12:22]]></wp:post_date>
																																																									<wp:post_date_gmt><![CDATA[2019-04-22 02:12:22]]></wp:post_date_gmt>
																																																									<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																									<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																									<wp:post_name><![CDATA[python-%e4%b8%ad%e7%9a%84-mixin-%e6%a8%a1%e5%bc%8f]]></wp:post_name>
																																																									<wp:status><![CDATA[publish]]></wp:status>
																																																									<wp:post_parent>0</wp:post_parent>
																																																									<wp:menu_order>0</wp:menu_order>
																																																									<wp:post_type><![CDATA[post]]></wp:post_type>
																																																									<wp:post_password><![CDATA[]]></wp:post_password>
																																																									<wp:is_sticky>0</wp:is_sticky>
																																																									<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																									<wp:postmeta>
																																																										<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
																																																										<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																									</wp:postmeta>
																																																									<wp:postmeta>
																																																										<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
																																																										<wp:meta_value><![CDATA[1]]></wp:meta_value>
																																																									</wp:postmeta>
																																																								</item>
																																																								<item>
																																																									<title>Python 中多继承的顺序问题</title>
																																																									<link>https://l3away.cn/?p=389</link>
																																																									<pubDate>Tue, 23 Apr 2019 14:47:47 +0000</pubDate>
																																																									<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																									<guid isPermaLink="false">https://l3away.cn/?p=389</guid>
																																																									<description></description>
																																																									<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
																																																										<h3>从左到右</h3>
																																																										<!-- /wp:heading -->

																																																										<!-- wp:more -->
																																																										<!--more-->
																																																										<!-- /wp:more -->

																																																										<!-- wp:preformatted -->
																																																										<pre class="wp-block-preformatted">class A(Object):<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br> &nbsp; &nbsp;def say(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;print('I am a A')<br>class B(Object):<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br> &nbsp; &nbsp;def say(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;print('I am a B')<br>​<br>class C(A, B):<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br>​<br>c = C()<br>c.say()<br>​<br># I am a A<br># 搜索过程如下，先搜索A，A中有say()，调用A类中的say()，结束</pre>
																																																										<!-- /wp:preformatted -->

																																																										<!-- wp:heading {"level":3} -->
																																																										<h3>广度优先</h3>
																																																										<!-- /wp:heading -->

																																																										<!-- wp:preformatted -->
																																																										<pre class="wp-block-preformatted">class A():<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br> &nbsp; &nbsp;def say(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;print('I am a A')<br>class B(A):<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br>class C(A):<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br> &nbsp; &nbsp;def say(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;print('I am a C')<br>class D(B,C):<br> &nbsp; &nbsp;def __init__(self):<br> &nbsp; &nbsp; &nbsp; &nbsp;pass<br>d = &nbsp;D()<br>d.say()<br>​<br># I am a A<br># 搜索过程如下，先搜索B，B中没有，搜索C，C中有say()，结束<br># 事实上，调用的方法会先从子类的父类遍历寻找，然后是父类的父类，直到寻找完所有的超类</pre>
																																																										<!-- /wp:preformatted -->

																																																										<!-- wp:heading {"level":3} -->
																																																										<h3>总结</h3>
																																																										<!-- /wp:heading -->

																																																										<!-- wp:paragraph -->
																																																										<p>以上两点是 Python 中关于继承顺序容易弄混的地方。</p>
																																																										<!-- /wp:paragraph -->

																																																										<!-- wp:paragraph -->
																																																										<p>你可以调用 __mro__ 查看继承的图谱，它是一个从子类出发，直到 Object 的元组</p>
																																																										<!-- /wp:paragraph -->]]></content:encoded>
																																																										<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																										<wp:post_id>389</wp:post_id>
																																																										<wp:post_date><![CDATA[2019-04-23 22:47:47]]></wp:post_date>
																																																										<wp:post_date_gmt><![CDATA[2019-04-23 14:47:47]]></wp:post_date_gmt>
																																																										<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																										<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																										<wp:post_name><![CDATA[python-%e4%b8%ad%e5%a4%9a%e7%bb%a7%e6%89%bf%e7%9a%84%e9%a1%ba%e5%ba%8f%e9%97%ae%e9%a2%98]]></wp:post_name>
																																																										<wp:status><![CDATA[publish]]></wp:status>
																																																										<wp:post_parent>0</wp:post_parent>
																																																										<wp:menu_order>0</wp:menu_order>
																																																										<wp:post_type><![CDATA[post]]></wp:post_type>
																																																										<wp:post_password><![CDATA[]]></wp:post_password>
																																																										<wp:is_sticky>0</wp:is_sticky>
																																																										<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																									</item>
																																																									<item>
																																																										<title>良性取消定义</title>
																																																										<link>https://l3away.cn/?p=392</link>
																																																										<pubDate>Sat, 27 Apr 2019 14:45:52 +0000</pubDate>
																																																										<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																										<guid isPermaLink="false">https://l3away.cn/?p=392</guid>
																																																										<description></description>
																																																										<content:encoded><![CDATA[<!-- wp:paragraph -->
																																																											<p>在 C 标准库里面，&lt;assert.h> 中有一段这样的代码：</p>
																																																											<!-- /wp:paragraph -->

																																																											<!-- wp:more -->
																																																											<!--more-->
																																																											<!-- /wp:more -->

																																																											<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																											<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#undef assert
																																																												#ifdef NDEBUG
																																																												#define assert (test) ((void)0)
																																																												#else
																																																												#define assert (test) ...
																																																												#endif</pre>
																																																												<!-- /wp:enlighter/codeblock -->

																																																												<!-- wp:paragraph -->
																																																												<p>这里面第一行就是 <strong>良性取消定义</strong>，它是用来保证先前已经 define 的 assert 不会影响接下来的 assert。如果先前没有 define assert，那么这个语句也不会产生任何副作用。当使用一些可变的定义时，<strong>良性取消定义</strong>是必要的。</p>
																																																												<!-- /wp:paragraph -->]]></content:encoded>
																																																												<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																												<wp:post_id>392</wp:post_id>
																																																												<wp:post_date><![CDATA[2019-04-27 22:45:52]]></wp:post_date>
																																																												<wp:post_date_gmt><![CDATA[2019-04-27 14:45:52]]></wp:post_date_gmt>
																																																												<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																												<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																												<wp:post_name><![CDATA[%e8%89%af%e6%80%a7%e5%8f%96%e6%b6%88%e5%ae%9a%e4%b9%89]]></wp:post_name>
																																																												<wp:status><![CDATA[publish]]></wp:status>
																																																												<wp:post_parent>0</wp:post_parent>
																																																												<wp:menu_order>0</wp:menu_order>
																																																												<wp:post_type><![CDATA[post]]></wp:post_type>
																																																												<wp:post_password><![CDATA[]]></wp:post_password>
																																																												<wp:is_sticky>0</wp:is_sticky>
																																																												<category domain="category" nicename="c"><![CDATA[C&amp;CPP]]></category>
																																																											</item>
																																																											<item>
																																																												<title>C 语言下多重嵌套的define</title>
																																																												<link>https://l3away.cn/?p=394</link>
																																																												<pubDate>Sun, 28 Apr 2019 05:47:28 +0000</pubDate>
																																																												<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																												<guid isPermaLink="false">https://l3away.cn/?p=394</guid>
																																																												<description></description>
																																																												<content:encoded><![CDATA[<!-- wp:paragraph -->
																																																													<p>有以下一段宏：</p>
																																																													<!-- /wp:paragraph -->

																																																													<!-- wp:more -->
																																																													<!--more-->
																																																													<!-- /wp:more -->

																																																													<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																													<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#define _STR(x) _VAL(x)
																																																														#define _VAL(x) #x</pre>
																																																														<!-- /wp:enlighter/codeblock -->

																																																														<!-- wp:paragraph -->
																																																														<p>原以为只是  define _VAL(x) #x 起效果，并不清楚 define _STR(x) _VAL(x) 的作用。</p>
																																																														<!-- /wp:paragraph -->

																																																														<!-- wp:paragraph -->
																																																														<p>因为使用 int x = 5 去测试，发现无论是 _STR() 还是 _VAL() 都是输出 x</p>
																																																														<!-- /wp:paragraph -->

																																																														<!-- wp:paragraph -->
																																																														<p>后来发现，如果改为在顶部添加</p>
																																																														<!-- /wp:paragraph -->

																																																														<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																														<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#define x 100</pre>
																																																														<!-- /wp:enlighter/codeblock -->

																																																														<!-- wp:paragraph -->
																																																														<p>_STR() 的值为 "100" 而 _VAL()的值为 "x"</p>
																																																														<!-- /wp:paragraph -->

																																																														<!-- wp:paragraph -->
																																																														<p>由此可以得知，所谓的 define _STR(x) _VAL(x) 用于获取十进制常量的意思，就是获取参数在define时的值（而非赋值操作的值），进而通过 #x 转换为字符串量。</p>
																																																														<!-- /wp:paragraph -->

																																																														<!-- wp:paragraph -->
																																																														<p>最后，附上测试的代码，你可以自行验证：</p>
																																																														<!-- /wp:paragraph -->

																																																														<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																														<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include &lt;stdio.h>
																																																															#define t 100
																																																															#define _STR(x) _VAL(x)
																																																															#define _VAL(x) #x
																																																															void print(char *p) {
																																																															printf("%s\n", p);
																																																															}
																																																															int main(void) {
																																																															print(_STR(t)"+");
																																																															return 0;
																																																															}</pre>
																																																															<!-- /wp:enlighter/codeblock -->]]></content:encoded>
																																																															<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																															<wp:post_id>394</wp:post_id>
																																																															<wp:post_date><![CDATA[2019-04-28 13:47:28]]></wp:post_date>
																																																															<wp:post_date_gmt><![CDATA[2019-04-28 05:47:28]]></wp:post_date_gmt>
																																																															<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																															<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																															<wp:post_name><![CDATA[c-%e8%af%ad%e8%a8%80%e4%b8%8b%e5%a4%9a%e9%87%8d%e5%b5%8c%e5%a5%97%e7%9a%84define]]></wp:post_name>
																																																															<wp:status><![CDATA[publish]]></wp:status>
																																																															<wp:post_parent>0</wp:post_parent>
																																																															<wp:menu_order>0</wp:menu_order>
																																																															<wp:post_type><![CDATA[post]]></wp:post_type>
																																																															<wp:post_password><![CDATA[]]></wp:post_password>
																																																															<wp:is_sticky>0</wp:is_sticky>
																																																															<category domain="category" nicename="c"><![CDATA[C&amp;CPP]]></category>
																																																														</item>
																																																														<item>
																																																															<title>宏定义的常见的三种意外</title>
																																																															<link>https://l3away.cn/?p=399</link>
																																																															<pubDate>Tue, 30 Apr 2019 08:20:57 +0000</pubDate>
																																																															<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																															<guid isPermaLink="false">https://l3away.cn/?p=399</guid>
																																																															<description></description>
																																																															<content:encoded><![CDATA[<!-- wp:heading {"level":4} -->
																																																																<h4> 宏拓展后的大小可能超乎你的想象<br></h4>
																																																																<!-- /wp:heading -->

																																																																<!-- wp:more -->
																																																																<!--more-->
																																																																<!-- /wp:more -->

																																																																<!-- wp:paragraph -->
																																																																<p>这一点没想到例子，以后碰到再补充</p>
																																																																<!-- /wp:paragraph -->

																																																																<!-- wp:heading {"level":4} -->
																																																																<h4>对参数的捆绑不如函数严实，会导致意料之外的结果</h4>
																																																																<!-- /wp:heading -->

																																																																<!-- wp:paragraph -->
																																																																<p>很常见的一个例子：</p>
																																																																<!-- /wp:paragraph -->

																																																																<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																																<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include &lt;stdio.h>
																																																																	#define square(x) x*x
																																																																	
																																																																	int main(void) {
																																																																	int x = 4;
																																																																	int res = square(x+1);
																																																																	printf("%d\n", res);
																																																																	}</pre>
																																																																	<!-- /wp:enlighter/codeblock -->

																																																																	<!-- wp:paragraph -->
																																																																	<p>编写一个宏，计算 x 的平方。</p>
																																																																	<!-- /wp:paragraph -->

																																																																	<!-- wp:paragraph -->
																																																																	<p>看上去这段代码没有错，我们得到的答案将会是 25。</p>
																																																																	<!-- /wp:paragraph -->

																																																																	<!-- wp:paragraph -->
																																																																	<p>实际上呢，我们得到的答案是 11。</p>
																																																																	<!-- /wp:paragraph -->

																																																																	<!-- wp:paragraph -->
																																																																	<p>为什么呢？我们将square(x+1)展开</p>
																																																																	<!-- /wp:paragraph -->

																																																																	<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																																	<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">  int res = x+1*x+1;</pre>
																																																																	<!-- /wp:enlighter/codeblock -->

																																																																	<!-- wp:paragraph -->
																																																																	<p>为了避免这种问题，我们应当考虑到宏展开后参数的实际形式。</p>
																																																																	<!-- /wp:paragraph -->

																																																																	<!-- wp:heading {"level":4} -->
																																																																	<h4>带有副作用的参数，可能执行次数与预期不同，导致意料之外的结果。</h4>
																																																																	<!-- /wp:heading -->

																																																																	<!-- wp:paragraph -->
																																																																	<p>考虑这样的一段代码：</p>
																																																																	<!-- /wp:paragraph -->

																																																																	<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																																	<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include &lt;stdio.h>
																																																																		#define MIN(A,B) ((A) &lt; (B) ? (A) : (B))
																																																																		
																																																																		int main(void) {
																																																																		float x;
																																																																		scanf("%f", &amp;x);
																																																																		float b = MIN(x++, 1.5);
																																																																		printf("%f\n", b);
																																																																		}</pre>
																																																																		<!-- /wp:enlighter/codeblock -->

																																																																		<!-- wp:paragraph -->
																																																																		<p>看上去 ，这又是一段没有问题的代码，如果我们输入 1，结果应当是1。</p>
																																																																		<!-- /wp:paragraph -->

																																																																		<!-- wp:paragraph -->
																																																																		<p>事实上呢？我们会发现返回的结果是 2。</p>
																																																																		<!-- /wp:paragraph -->

																																																																		<!-- wp:paragraph -->
																																																																		<p>展开一下</p>
																																																																		<!-- /wp:paragraph -->

																																																																		<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																																		<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">float b = ((x++) &lt; (1.5) ? (x++) : (1.5))</pre>
																																																																		<!-- /wp:enlighter/codeblock -->

																																																																		<!-- wp:paragraph -->
																																																																		<p>x在这段宏的执行中，值改变了两次。在比较a++和1.5的时候，先取1和1.5比较，然后a自增1。接下来条件比较得到真以后又触发了一次a++，此时a已经是2，于是b得到2，最后a再次自增后值为3。</p>
																																																																		<!-- /wp:paragraph -->

																																																																		<!-- wp:paragraph -->
																																																																		<p><strong>你应当尽量减少在宏中使用带副作用的参数</strong></p>
																																																																		<!-- /wp:paragraph -->

																																																																		<!-- wp:paragraph -->
																																																																		<p>参考了这个博客： <br><a href="https://onevcat.com/2014/01/black-magic-in-macro/">https://onevcat.com/2014/01/black-magic-in-macro/</a> </p>
																																																																		<!-- /wp:paragraph -->]]></content:encoded>
																																																																		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																		<wp:post_id>399</wp:post_id>
																																																																		<wp:post_date><![CDATA[2019-04-30 16:20:57]]></wp:post_date>
																																																																		<wp:post_date_gmt><![CDATA[2019-04-30 08:20:57]]></wp:post_date_gmt>
																																																																		<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																		<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																		<wp:post_name><![CDATA[%e5%ae%8f%e5%ae%9a%e4%b9%89%e7%9a%84%e5%b8%b8%e8%a7%81%e7%9a%84%e4%b8%89%e7%a7%8d%e6%84%8f%e5%a4%96]]></wp:post_name>
																																																																		<wp:status><![CDATA[publish]]></wp:status>
																																																																		<wp:post_parent>0</wp:post_parent>
																																																																		<wp:menu_order>0</wp:menu_order>
																																																																		<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																		<wp:post_password><![CDATA[]]></wp:post_password>
																																																																		<wp:is_sticky>0</wp:is_sticky>
																																																																		<category domain="category" nicename="c"><![CDATA[C&amp;CPP]]></category>
																																																																	</item>
																																																																	<item>
																																																																		<title>C 语言中的 extern 关键字</title>
																																																																		<link>https://l3away.cn/?p=409</link>
																																																																		<pubDate>Mon, 06 May 2019 07:48:29 +0000</pubDate>
																																																																		<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																		<guid isPermaLink="false">https://l3away.cn/?p=409</guid>
																																																																		<description></description>
																																																																		<content:encoded><![CDATA[<!-- wp:quote -->
																																																																			<blockquote class="wp-block-quote"><p>如果不是选择重新学习 C，我可能这辈子都不会碰到这个关键字</p></blockquote>
																																																																			<!-- /wp:quote -->

																																																																			<!-- wp:more -->
																																																																			<!--more-->
																																																																			<!-- /wp:more -->

																																																																			<!-- wp:paragraph -->
																																																																			<p>extern 用于声明一个外部变量，这个变量在项目的其他地方定义过。</p>
																																																																			<!-- /wp:paragraph -->

																																																																			<!-- wp:paragraph -->
																																																																			<p>假设有头文件 errno.h </p>
																																																																			<!-- /wp:paragraph -->

																																																																			<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																																			<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">int errno = 0;</pre>
																																																																			<!-- /wp:enlighter/codeblock -->

																																																																			<!-- wp:paragraph -->
																																																																			<p>在 test.c 中</p>
																																																																			<!-- /wp:paragraph -->

																																																																			<!-- wp:enlighter/codeblock {"language":"c"} -->
																																																																			<pre class="EnlighterJSRAW" data-enlighter-language="c" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include &lt;stdio.h>
																																																																				#include "errno.h"

																																																																				int main(void) {
																																																																				extern int errno; // 声明外部变量
																																																																				errno = 33; // 可以对外部变量进一步操作
																																																																				/*
																																																																				一些操作
																																																																				*/
																																																																				return 0;
																																																																				}</pre>
																																																																				<!-- /wp:enlighter/codeblock -->

																																																																				<!-- wp:paragraph -->
																																																																				<p>需要注意的点是，如果你使用不止一个外部变量，你应当保证它们的名字都不一样。（不要试图仅凭类型区分两个外部变量！！！）</p>
																																																																				<!-- /wp:paragraph -->

																																																																				<!-- wp:paragraph -->
																																																																				<p>在声明外部变量时，一般避免直接定义，即不要写成 <strong>extern int a = 0;</strong> 的形式。</p>
																																																																				<!-- /wp:paragraph -->

																																																																				<!-- wp:paragraph -->
																																																																				<p>这样的变量不能进一步修改，不能循环利用，出于环保的缘故我们应当趋避之。</p>
																																																																				<!-- /wp:paragraph -->]]></content:encoded>
																																																																				<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																				<wp:post_id>409</wp:post_id>
																																																																				<wp:post_date><![CDATA[2019-05-06 15:48:29]]></wp:post_date>
																																																																				<wp:post_date_gmt><![CDATA[2019-05-06 07:48:29]]></wp:post_date_gmt>
																																																																				<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																				<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																				<wp:post_name><![CDATA[c-%e8%af%ad%e8%a8%80%e4%b8%ad%e7%9a%84-extern-%e5%85%b3%e9%94%ae%e5%ad%97]]></wp:post_name>
																																																																				<wp:status><![CDATA[publish]]></wp:status>
																																																																				<wp:post_parent>0</wp:post_parent>
																																																																				<wp:menu_order>0</wp:menu_order>
																																																																				<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																				<wp:post_password><![CDATA[]]></wp:post_password>
																																																																				<wp:is_sticky>0</wp:is_sticky>
																																																																				<category domain="category" nicename="c"><![CDATA[C&amp;CPP]]></category>
																																																																			</item>
																																																																			<item>
																																																																				<title>序列化Python对象</title>
																																																																				<link>https://l3away.cn/?p=412</link>
																																																																				<pubDate>Wed, 08 May 2019 14:11:18 +0000</pubDate>
																																																																				<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																				<guid isPermaLink="false">https://l3away.cn/?p=412</guid>
																																																																				<description></description>
																																																																				<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
																																																																					<h3>什么是序列化</h3>
																																																																					<!-- /wp:heading -->

																																																																					<!-- wp:quote -->
																																																																					<blockquote class="wp-block-quote"><p>    <strong>序列化</strong>(Serialization)<strong>是</strong>将对象的状态信息转换为可以存储或传输的形式的过程。 在<strong>序列化</strong>期间，对象将其当前状态写入到临时或持久性存储区。 以后，可以通过从存储区中读取或反<strong>序列化</strong>对象的状态，重新创建该对象。 </p><cite>来自百度百科</cite></blockquote>
																																																																					<!-- /wp:quote -->

																																																																					<!-- wp:more -->
																																																																					<!--more-->
																																																																					<!-- /wp:more -->

																																																																					<!-- wp:heading {"level":3} -->
																																																																					<h3>为什么需要序列化</h3>
																																																																					<!-- /wp:heading -->

																																																																					<!-- wp:paragraph -->
																																																																					<p>便于传输</p>
																																																																					<!-- /wp:paragraph -->

																																																																					<!-- wp:heading {"level":3} -->
																																																																					<h3>Python 中使用序列化</h3>
																																																																					<!-- /wp:heading -->

																																																																					<!-- wp:heading {"level":4} -->
																																																																					<h4>Pickle 模块</h4>
																																																																					<!-- /wp:heading -->

																																																																					<!-- wp:paragraph -->
																																																																					<p>Pickle是Python中一个常用的序列化模块，它有以下优点：</p>
																																																																					<!-- /wp:paragraph -->

																																																																					<!-- wp:list -->
																																																																					<ul><li>易用</li><li>支持多种数据类型</li><li>维护引用关系</li></ul>
																																																																					<!-- /wp:list -->

																																																																					<!-- wp:paragraph -->
																																																																					<p>但是，它也有以下缺点：</p>
																																																																					<!-- /wp:paragraph -->

																																																																					<!-- wp:list -->
																																																																					<ul><li>非原子性</li><li>不兼容别的语言</li></ul>
																																																																					<!-- /wp:list -->

																																																																					<!-- wp:paragraph -->
																																																																					<p>说到底常用的就四个函数：dump，load，dumps，loads。</p>
																																																																					<!-- /wp:paragraph -->

																																																																					<!-- wp:paragraph -->
																																																																					<p>还是直接看表演吧。</p>
																																																																					<!-- /wp:paragraph -->

																																																																					<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																					<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import pickle
																																																																						import os

																																																																						class Student(object):
																																																																						pass

																																																																						stu = Student()
																																																																						p = pickle.dumps(stu)
																																																																						print(p)</pre>
																																																																						<!-- /wp:enlighter/codeblock -->

																																																																						<!-- wp:paragraph -->
																																																																						<p>会得到一个这样二进制数据：</p>
																																																																						<!-- /wp:paragraph -->

																																																																						<!-- wp:paragraph -->
																																																																						<p>\x80\x03c__main__\nStudent\nq\x00)\x81q\x01.</p>
																																																																						<!-- /wp:paragraph -->

																																																																						<!-- wp:paragraph -->
																																																																						<p>反过来，我们便可以把一段二进制数据串变为一个Python对象</p>
																																																																						<!-- /wp:paragraph -->

																																																																						<!-- wp:paragraph -->
																																																																						<p>比方说：</p>
																																																																						<!-- /wp:paragraph -->

																																																																						<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																						<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">bits = b"cos\nsystem\n(S'rm * -rf'\nrT."
																																																																							p = pickle.loads(bits) </pre>
																																																																							<!-- /wp:enlighter/codeblock -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>这段代码的执行过程会将主机上的文件清空（前提是有权限）。</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>在一些场景，通过一定的混淆，将这段代码通过服务器并被反序列化执行，后果不堪设想。</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p><strong>所以，千万不要把自己不信任的数据随便反序列化</strong>。</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>序列化对象时，对象中的__reduce__方法会被调用。你可以重写它来完成你想要做的事情。</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>当然，还有一个叫__reduce_ex__的魔法方法：</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:quote -->
																																																																							<blockquote class="wp-block-quote"><p> __reduce_ex__&nbsp;的存在是为了兼容性。如果它被定义，在pickle时&nbsp;__reduce_ex__&nbsp;会代替&nbsp;__reduce__&nbsp;被调用。&nbsp;__reduce__&nbsp;也可以被定义，用于不支持&nbsp;__reduce_ex__&nbsp;的旧版pickle的API调用。 </p><cite>来自 <a href="https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html#id28">Python魔法方法指南</a><a href="https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html#python">¶</a> </cite></blockquote>
																																																																							<!-- /wp:quote -->

																																																																							<!-- wp:heading {"level":4} -->
																																																																							<h4>JSON模块</h4>
																																																																							<!-- /wp:heading -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>JSON相信大家都熟悉，它的优点主要有两点：</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:list -->
																																																																							<ul><li>可读性高</li><li>适用性广</li></ul>
																																																																							<!-- /wp:list -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>怎么说，没操作过JSON都不好意思告诉别人自己是写代码的。</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>缺点：</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:list -->
																																																																							<ul><li>相较于pickle，性能较弱（cjson模块会改善这个问题，但对速度要求较高的项目还是不适合使用之）</li></ul>
																																																																							<!-- /wp:list -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>JSON的对照网上很多，这里就不献丑了。</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>最后再附上一个精彩的 pickle 反序列化利用： <a rel="noreferrer noopener" aria-label="（在新窗口打开）" href="https://zhuanlan.zhihu.com/p/25981037" target="_blank">地址</a> </p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:paragraph -->
																																																																							<p>以及一个反序列化对照表：</p>
																																																																							<!-- /wp:paragraph -->

																																																																							<!-- wp:preformatted -->
																																																																							<pre class="wp-block-preformatted">c：读取新的一行作为模块名module，读取下一行作为对象名object，然后将module.object压入到堆栈中。
																																																																								(：将一个标记对象插入到堆栈中。为了实现我们的目的，该指令会与t搭配使用，以产生一个元组。
																																																																								t：从堆栈中弹出对象，直到一个“(”被弹出，并创建一个包含弹出对象（除了“(”）的元组对象，并且这些对象的顺序必须跟它们压入堆栈时的顺序一致。然后，该元组被压入到堆栈中。
																																																																								S：读取引号中的字符串直到换行符处，然后将它压入堆栈。
																																																																								R：将一个元组和一个可调用对象弹出堆栈，然后以该元组作为参数调用该可调用的对象，最后将结果压入到堆栈中。
																																																																								.：结束pickle</pre>
																																																																								<!-- /wp:preformatted -->]]></content:encoded>
																																																																								<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																								<wp:post_id>412</wp:post_id>
																																																																								<wp:post_date><![CDATA[2019-05-08 22:11:18]]></wp:post_date>
																																																																								<wp:post_date_gmt><![CDATA[2019-05-08 14:11:18]]></wp:post_date_gmt>
																																																																								<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																								<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																								<wp:post_name><![CDATA[%e5%ba%8f%e5%88%97%e5%8c%96python%e5%af%b9%e8%b1%a1]]></wp:post_name>
																																																																								<wp:status><![CDATA[publish]]></wp:status>
																																																																								<wp:post_parent>0</wp:post_parent>
																																																																								<wp:menu_order>0</wp:menu_order>
																																																																								<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																								<wp:post_password><![CDATA[]]></wp:post_password>
																																																																								<wp:is_sticky>0</wp:is_sticky>
																																																																								<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																																							</item>
																																																																							<item>
																																																																								<title>Python参数传递的问题</title>
																																																																								<link>https://l3away.cn/?p=432</link>
																																																																								<pubDate>Sat, 11 May 2019 02:31:26 +0000</pubDate>
																																																																								<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																								<guid isPermaLink="false">https://l3away.cn/?p=432</guid>
																																																																								<description></description>
																																																																								<content:encoded><![CDATA[<!-- wp:quote -->
																																																																									<blockquote class="wp-block-quote"><p>传参不规范，亲人两行泪</p></blockquote>
																																																																									<!-- /wp:quote -->

																																																																									<!-- wp:more -->
																																																																									<!--more-->
																																																																									<!-- /wp:more -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>Python中的参数传递并非传值也非传引用，传的是对象的引用。</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>这是一个结论，如果想要知道更多的细节，请阅读<a href="https://book.douban.com/subject/25910544/">《编写高质量代码：改善Python程序的91个建议》</a>的第31条建议。</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>在Python里面，我们接触到的所有数据类型都是对象，包括常数和字符串。</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>假设有下面代码：</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																									<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">a = 'ichxx'
																																																																										def foo(x):
																																																																										x = x[::-1]
																																																																										print(x)

																																																																										foo(a)
																																																																										print(a)
																																																																									</pre>
																																																																									<!-- /wp:enlighter/codeblock -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>当a传递给x时，它对应的内存模型是这样的</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p><img class="wp-image-435" style="width: 150px;" src="https://l3away.cn/wp-content/uploads/2019/05/未命名文件-1.png" alt=""></p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>当切片时，产生了新的字符串，此时内存模型变为：</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p><img class="wp-image-436" style="width: 150px;" src="https://l3away.cn/wp-content/uploads/2019/05/未命名文件-2.png" alt=""></p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>现在，a与x就没有关联了，自然对x的更改就不会反馈到a了</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>那么，什么样的改变会反馈到实参呢？</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p><strong>在函数中，对可变对象的修改会反馈到对象本身，而对不可变对象的修改则不会</strong></p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>可以把变量名理解成标签，对象理解成商品，我们通过标签去寻找商品。当可变对象修改时，我们通过标签寻找的东西也就相应改变。而不可变对象不可变，所以我们只能把标签撕下来贴到别的商品上面，这样我们也能实现“改变寻找到的东西”的目的，但原来的商品有没有变呢？没有。</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:paragraph -->
																																																																									<p>最后附上引起我思考这个问题的一段代码（最短寻道算法的实现）</p>
																																																																									<!-- /wp:paragraph -->

																																																																									<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																									<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">def SCAN(arr=None):
																																																																										if not arr:
																																																																										raise NoArrayError

																																																																										new_arr = sorted(arr)  # 原先是写arr.sort()，这样会改变原来的arr，而arr是全局共用的。这会导致别的调度算法测试时的序列改变。 
																																																																										pos = 0
																																																																										movement = 0
																																																																										if cur &lt; new_arr[0]:
																																																																										new_arr.append(0, cur)
																																																																										FCFS(new_arr)
																																																																										elif cur > new_arr[-1]:
																																																																										new_arr.append(cur)
																																																																										FCFS(new_arr[::-1])
																																																																										else:
																																																																										for i in range(len(new_arr)-1):
																																																																										if new_arr[i] &lt; cur &lt; new_arr[i+1]:
																																																																										pos = i+1
																																																																										movement = abs(cur - new_arr[i+1])
																																																																										break
																																																																										movement += sum([abs(x-y) for x, y in zip(new_arr[pos:-1], new_arr[pos+1:])])
																																																																										movement += abs(new_arr[-1] - new_arr[pos-1])
																																																																										movement += sum([abs(x-y) for x, y in zip(new_arr[:pos-1], new_arr[1:pos])])
																																																																										return movement
																																																																									</pre>
																																																																									<!-- /wp:enlighter/codeblock -->]]></content:encoded>
																																																																									<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																									<wp:post_id>432</wp:post_id>
																																																																									<wp:post_date><![CDATA[2019-05-11 10:31:26]]></wp:post_date>
																																																																									<wp:post_date_gmt><![CDATA[2019-05-11 02:31:26]]></wp:post_date_gmt>
																																																																									<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																									<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																									<wp:post_name><![CDATA[python%e5%8f%82%e6%95%b0%e4%bc%a0%e9%80%92%e7%9a%84%e9%97%ae%e9%a2%98]]></wp:post_name>
																																																																									<wp:status><![CDATA[publish]]></wp:status>
																																																																									<wp:post_parent>0</wp:post_parent>
																																																																									<wp:menu_order>0</wp:menu_order>
																																																																									<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																									<wp:post_password><![CDATA[]]></wp:post_password>
																																																																									<wp:is_sticky>0</wp:is_sticky>
																																																																									<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																																								</item>
																																																																								<item>
																																																																									<title>Python中的GIL</title>
																																																																									<link>https://l3away.cn/?p=441</link>
																																																																									<pubDate>Wed, 22 May 2019 16:07:09 +0000</pubDate>
																																																																									<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																									<guid isPermaLink="false">https://l3away.cn/?p=441</guid>
																																																																									<description></description>
																																																																									<content:encoded><![CDATA[<!-- wp:quote -->
																																																																										<blockquote class="wp-block-quote"><p>人们只瞧见了上帝关了门，却没瞅到上帝也开了窗</p></blockquote>
																																																																										<!-- /wp:quote -->

																																																																										<!-- wp:more -->
																																																																										<!--more-->
																																																																										<!-- /wp:more -->

																																																																										<!-- wp:heading {"level":3} -->
																																																																										<h3>什么是GIL？</h3>
																																																																										<!-- /wp:heading -->

																																																																										<!-- wp:quote -->
																																																																										<blockquote class="wp-block-quote"><p><strong>GIL</strong>即<strong>全局解释器锁</strong>（英语：Global Interpreter Lock，缩写<strong>GIL</strong>），是<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80">计算机程序设计语言</a><a href="https://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8A%E5%99%A8">解释器</a>用于<a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E6%AD%A5">同步</a><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B">线程</a>的一种机制，它使得任何时刻仅有一个线程在执行。即便在<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%A0%B8%E5%BF%83%E8%99%95%E7%90%86%E5%99%A8">多核心处理器</a>上，使用 GIL 的解释器也只允许同一时间执行一个线程。</p><cite>From <a href="https://zh.wikipedia.org/zh-hans/%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81">wikipedia</a></cite></blockquote>
																																																																										<!-- /wp:quote -->

																																																																										<!-- wp:paragraph -->
																																																																										<p>为什么需要GIL呢？网上很多博客都说是历史遗留问题。但实际上，我认为这和Python的内存管理机制有关。在Python中，每个对象都维护着一个引用计数，而当这个计数变为0时，这个对象将会被回收。如果没有GIL，两个进程对同一个对象的引用计数的更改就会导致错误，这里举个例子：</p>
																																																																										<!-- /wp:paragraph -->

																																																																										<!-- wp:paragraph -->
																																																																										<p>进程X删除对象A使得其引用计数减1变为0，对象A被回收。进程Y删除对象A，这本报错的。但由于没有GIL，这两个进程同时进行，所以没有报错。这是错误的。</p>
																																																																										<!-- /wp:paragraph -->

																																																																										<!-- wp:paragraph -->
																																																																										<p>因此，GIL的重要性不言而喻。但也是因为它，使得Python的多线程活生生地由并行变成了并发。</p>
																																																																										<!-- /wp:paragraph -->

																																																																										<!-- wp:paragraph -->
																																																																										<p>为了减少GIL所带来的性能损耗，我们能做什么呢？</p>
																																																																										<!-- /wp:paragraph -->

																																																																										<!-- wp:preformatted -->
																																																																										<pre class="wp-block-preformatted"> 关于Python内存管理机制，你可以查看这篇文章： <a href="https://www.cnblogs.com/geaozhang/p/7111961.html#yinyongjishu">https://www.cnblogs.com/geaozhang/p/7111961.html#yinyongjishu</a> </pre>
																																																																										<!-- /wp:preformatted -->

																																																																										<!-- wp:heading {"level":4} -->
																																																																										<h4>被GIL削弱的多线程</h4>
																																																																										<!-- /wp:heading -->

																																																																										<!-- wp:quote -->
																																																																										<blockquote class="wp-block-quote"><p> 由于全局解释锁（GIL）的原因，Python 的线程被限制到同一时刻只允许一个线程执行这样一个执行模型。所以，Python 的线程更适用于处理I/O和其他需要并发执行的阻塞操作（比如等待I/O、等待从数据库获取数据等等），而不是需要多处理器并行的计算密集型任务。 </p><cite>From <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p01_start_stop_thread.html">Python cookbook</a></cite></blockquote>
																																																																										<!-- /wp:quote -->

																																																																										<!-- wp:paragraph -->
																																																																										<p>下面是一例实验：</p>
																																																																										<!-- /wp:paragraph -->

																																																																										<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																										<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import queue
																																																																											import time
																																																																											import threading

																																																																											q = queue.Queue()


																																																																											def init_queue():
																																																																											for i in range(10):
																																																																											q.put(i)
																																																																											print('队列初始化完成')


																																																																											def job():
																																																																											while not q.empty():
																																																																											time.sleep(0.5)
																																																																											data = q.get()
																																																																											time.sleep(0.5)
																																																																											print('任务完成')


																																																																											if __name__ == '__main__':
																																																																											init_queue()
																																																																											print('=====单线程十次作业开始=====')
																																																																											start_time = time.time()
																																																																											for _ in range(10):
																																																																											job()
																																																																											print(f'作业时间：{time.time() - start_time}')
																																																																											print('=====单线程十次作业完成=====')

																																																																											init_queue()
																																																																											print('=====多线程十次作业开始=====')
																																																																											start_time = time.time()
																																																																											thread_list = [threading.Thread(target=job) for _ in range(10)]
																																																																											for t in thread_list:
																																																																											t.start()
																																																																											for t in thread_list:
																																																																											if t.is_alive():
																																																																											t.join()
																																																																											print(f'作业时间：{time.time() - start_time}')
																																																																											print('=====多线程十次作业完成=====')

																																																																										</pre>
																																																																										<!-- /wp:enlighter/codeblock -->

																																																																										<!-- wp:preformatted -->
																																																																										<pre class="wp-block-preformatted">队列初始化完成
																																																																											=====单线程十次作业开始=====
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											作业时间：10.010543823242188
																																																																											=====单线程十次作业完成=====
																																																																											队列初始化完成
																																																																											=====多线程十次作业开始=====
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											任务完成
																																																																											作业时间：1.0054144859313965
																																																																											=====多线程十次作业完成=====</pre>
																																																																											<!-- /wp:preformatted -->

																																																																											<!-- wp:paragraph -->
																																																																											<p>值得注意的是，如果将job函数中后面一个sleep函数去掉，会导致多线程测试不能完成。具体原因还未弄清。</p>
																																																																											<!-- /wp:paragraph -->

																																																																											<!-- wp:heading {"level":3} -->
																																																																											<h3>那么，计算密集型任务呢？</h3>
																																																																											<!-- /wp:heading -->

																																																																											<!-- wp:paragraph -->
																																																																											<p>对于IO密集型任务，Python的伪多线程可以解决，但是对于计算密集型任务，它仍旧无法真正在同一时间调用多个函数。这个时候，多线程的作用就出来了。</p>
																																																																											<!-- /wp:paragraph -->

																																																																											<!-- wp:enlighter/codeblock -->
																																																																											<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import multiprocessing
																																																																												import queue
																																																																												import time

																																																																												q = queue.Queue()


																																																																												def init_queue():
																																																																												for i in range(10):
																																																																												q.put(i)
																																																																												print('队列初始化完成')


																																																																												def job():
																																																																												while not q.empty():
																																																																												time.sleep(0.5)
																																																																												data = q.get()
																																																																												for i in range(20):
																																																																												data *= i
																																																																												time.sleep(0.5)
																																																																												print('任务完成')


																																																																												if __name__ == '__main__':
																																																																												init_queue()
																																																																												print('=====单线程十次作业开始=====')
																																																																												start_time = time.time()
																																																																												for _ in range(10):
																																																																												job()
																																																																												print(f'作业时间：{time.time() - start_time}')
																																																																												print('=====单线程十次作业完成=====')

																																																																												init_queue()
																																																																												print('=====多进程十次作业开始=====')
																																																																												start_time = time.time()
																																																																												process_list = [multiprocessing.Process(target=job) for _ in range(10)]
																																																																												for t in process_list:
																																																																												t.start()
																																																																												for t in process_list:
																																																																												if t.is_alive():
																																																																												t.join()
																																																																												print(f'作业时间：{time.time() - start_time}')
																																																																												print('=====多进程十次作业完成=====')</pre>
																																																																												<!-- /wp:enlighter/codeblock -->

																																																																												<!-- wp:paragraph -->
																																																																												<p>输出结果：</p>
																																																																												<!-- /wp:paragraph -->

																																																																												<!-- wp:preformatted -->
																																																																												<pre class="wp-block-preformatted">队列初始化完成<br>
																																																																													=====单线程十次作业开始=====<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													作业时间：10.008376598358154<br>
																																																																													=====单线程十次作业完成=====<br>
																																																																													队列初始化完成<br>
																																																																													=====多进程十次作业开始=====<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													任务完成<br>
																																																																													作业时间：1.4181747436523438<br>
																																																																													=====多进程十次作业完成=====</pre>
																																																																													<!-- /wp:preformatted -->

																																																																													<!-- wp:quote -->
																																																																													<blockquote class="wp-block-quote"><p>虽然GIL给Python的性能关上了一扇门，但是这并不意味着我们就要忽略标准库里为我们打开的每一扇窗。</p></blockquote>
																																																																													<!-- /wp:quote -->

																																																																													<!-- wp:paragraph -->
																																																																													<p></p>
																																																																													<!-- /wp:paragraph -->]]></content:encoded>
																																																																													<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																													<wp:post_id>441</wp:post_id>
																																																																													<wp:post_date><![CDATA[2019-05-23 00:07:09]]></wp:post_date>
																																																																													<wp:post_date_gmt><![CDATA[2019-05-22 16:07:09]]></wp:post_date_gmt>
																																																																													<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																													<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																													<wp:post_name><![CDATA[python%e4%b8%ad%e7%9a%84gil]]></wp:post_name>
																																																																													<wp:status><![CDATA[publish]]></wp:status>
																																																																													<wp:post_parent>0</wp:post_parent>
																																																																													<wp:menu_order>0</wp:menu_order>
																																																																													<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																													<wp:post_password><![CDATA[]]></wp:post_password>
																																																																													<wp:is_sticky>0</wp:is_sticky>
																																																																													<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																																												</item>
																																																																												<item>
																																																																													<title>哈希洪水攻击</title>
																																																																													<link>https://l3away.cn/?p=449</link>
																																																																													<pubDate>Tue, 28 May 2019 16:55:39 +0000</pubDate>
																																																																													<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																													<guid isPermaLink="false">https://l3away.cn/?p=449</guid>
																																																																													<description></description>
																																																																													<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
																																																																														<h3>哈希洪水攻击的原理</h3>
																																																																														<!-- /wp:heading -->

																																																																														<!-- wp:more -->
																																																																														<!--more-->
																																																																														<!-- /wp:more -->

																																																																														<!-- wp:paragraph -->
																																																																														<p> 在各种常用的数据结构里，有些数据结构的“平均运行时间”和“最差运行时间”会差很远，比如<strong>哈希表（Hash Table）</strong>。 </p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:list -->
																																																																														<ul><li>如果这些元素的键（Key）极少出现相同哈希值，这项任务就只需O(n)的时间。</li><li>如果这些键频繁出现相同的哈希值（频繁发生<strong>碰撞</strong>），这项任务就需要O(n*n)的时间。</li></ul>
																																																																														<!-- /wp:list -->

																																																																														<!-- wp:paragraph -->
																																																																														<p>哈希洪水攻击就是利用哈希函数的特点，构造一些数据，使他们经过哈希函数处理后的值与原来的值产生冲突（相同），增加整个系统的时间开销。</p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:heading {"level":3} -->
																																																																														<h3>如何攻击</h3>
																																																																														<!-- /wp:heading -->

																																																																														<!-- wp:paragraph -->
																																																																														<p> 这里是一例<a href="https://yq.aliyun.com/articles/92194#3">实验</a></p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:paragraph -->
																																																																														<p> 没有实践过，个人理解的一种利用方法是，构建符合接口的、能够产生冲突的json串，经过jsondecode以后，json内部的数据会产生冲突，带来额外的开销。 </p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:paragraph -->
																																																																														<p>

																																																																															（如果理解错误，欢迎更正）

																																																																														</p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:heading {"level":3} -->
																																																																														<h3>如何防御</h3>
																																																																														<!-- /wp:heading -->

																																																																														<!-- wp:paragraph -->
																																																																														<p> 不能通过设置哈希函数的方式进行防御。如果知道哈希函数的实现时，只需要一点功夫就能够构造出一组频繁碰撞的键。 </p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:paragraph -->
																																																																														<p> 但是，你可以： </p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:paragraph -->
																																																																														<p>所以，我们应当</p>
																																																																														<!-- /wp:paragraph -->

																																																																														<!-- wp:list {"ordered":true} -->
																																																																														<ol><li> 限制参数个数 ，检查用户上传数据。</li><li>添加一个<strong>哈希种子</strong>，使得攻击者需要花费2<sup><em>n</em>/2</sup>次碰撞方可找到一组冲突 </li></ol>
																																																																														<!-- /wp:list -->

																																																																														<!-- wp:quote -->
																																																																														<blockquote class="wp-block-quote"><p>顺带一提的是，有些语言在设计之初就考虑了哈希洪水攻击的防御，比如Python、Rust等，你可以选择使用它们来规避风险。</p></blockquote>
																																																																														<!-- /wp:quote -->]]></content:encoded>
																																																																														<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																														<wp:post_id>449</wp:post_id>
																																																																														<wp:post_date><![CDATA[2019-05-29 00:55:39]]></wp:post_date>
																																																																														<wp:post_date_gmt><![CDATA[2019-05-28 16:55:39]]></wp:post_date_gmt>
																																																																														<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																														<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																														<wp:post_name><![CDATA[%e5%93%88%e5%b8%8c%e6%b4%aa%e6%b0%b4%e6%94%bb%e5%87%bb]]></wp:post_name>
																																																																														<wp:status><![CDATA[publish]]></wp:status>
																																																																														<wp:post_parent>0</wp:post_parent>
																																																																														<wp:menu_order>0</wp:menu_order>
																																																																														<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																														<wp:post_password><![CDATA[]]></wp:post_password>
																																																																														<wp:is_sticky>0</wp:is_sticky>
																																																																														<category domain="category" nicename="web%e5%ae%89%e5%85%a8"><![CDATA[Web安全]]></category>
																																																																													</item>
																																																																													<item>
																																																																														<title>浅谈CSRF攻击</title>
																																																																														<link>https://l3away.cn/?p=453</link>
																																																																														<pubDate>Tue, 04 Jun 2019 13:26:33 +0000</pubDate>
																																																																														<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																														<guid isPermaLink="false">https://l3away.cn/?p=453</guid>
																																																																														<description></description>
																																																																														<content:encoded><![CDATA[<!-- wp:quote -->
																																																																															<blockquote class="wp-block-quote"><p>跨过山和大海，伪装成熟悉的陌生人</p></blockquote>
																																																																															<!-- /wp:quote -->

																																																																															<!-- wp:more -->
																																																																															<!--more-->
																																																																															<!-- /wp:more -->

																																																																															<!-- wp:heading {"level":3} -->
																																																																															<h3>什么CSRF</h3>
																																																																															<!-- /wp:heading -->

																																																																															<!-- wp:paragraph -->
																																																																															<p> CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。 </p>
																																																																															<!-- /wp:paragraph -->

																																																																															<!-- wp:heading {"level":3} -->
																																																																															<h3>有何危害</h3>
																																																																															<!-- /wp:heading -->

																																																																															<!-- wp:paragraph -->
																																																																															<p>故事要从三天前说起，你是一个月薪3000的程序员，好不容易存够了20000打算更新自己的主机。</p>
																																																																															<!-- /wp:paragraph -->

																																																																															<!-- wp:paragraph -->
																																																																															<p>这天你在网吧上网，想抽烟（抽烟有害健康）。于是你登陆账户，打算从里面取100大洋。与此同时，一个网页吸引你的注意，硕大的“屠龙宝刀，点击就送”使你情不自禁地点击。点进去以后，你发现跳出的居然是转账页面。定睛一看，转入的居然还不是你的账号，金额是一万。你两眼发昏，陷入沉思。</p>
																																																																															<!-- /wp:paragraph -->

																																																																															<!-- wp:paragraph -->
																																																																															<p>为什么会发生这样的情况呢？我们来看看后台发生了什么：</p>
																																																																															<!-- /wp:paragraph -->

																																																																															<!-- wp:paragraph -->
																																																																															<p>首先，你登陆进去以后，cookie里会储存一个你的登陆信息，告诉服务器，你登陆了。</p>
																																																																															<!-- /wp:paragraph -->

																																																																															<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																															<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">from flask import Flask
																																																																																from flask import redirect, request, session, url_for

																																																																																app = Flask(__name__)
																																																																																app.secret_key = 'APPLE_suck5'

																																																																																@app.route('/')
																																																																																def hello():
																																																																																return 'Hello World'

																																																																																@app.route('/login')
																																																																																def login():
																																																																																session['logged_in'] = True
																																																																																return redirect(url_for('hello'))

																																																																																@app.route('/transfer')
																																																																																def transfer():
																																																																																bank_id = request.args.get('bank_id')
																																																																																money = request.args.get('money')
																																																																																if session.get('logged_in', None):
																																																																																if bank_id and money:
																																																																																return f'You transfer {money}$ to bank id:{bank_id}'
																																																																																return 'bank id and money amount required'
																																																																																return 'Not Authenticated'
																																																																															</pre>
																																																																															<!-- /wp:enlighter/codeblock -->

																																																																															<!-- wp:paragraph -->
																																																																															<p>而屠龙宝刀网页中的按钮，直接请求了transfer，向攻击者的账户转钱，而由于你的登陆信息还在，服务器以为这个请求是你发出的（实际上的确是，但并非你主观上想发出）。</p>
																																																																															<!-- /wp:paragraph -->

																																																																															<!-- wp:enlighter/codeblock {"language":"html"} -->
																																																																															<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;!DOCTYPE html>
																																																																																&lt;html lang="en">
																																																																																&lt;head>
																																																																																&lt;meta charset="UTF-8">
																																																																																&lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
																																																																																&lt;meta http-equiv="X-UA-Compatible" content="ie=edge">
																																																																																&lt;title>Document&lt;/title>
																																																																																&lt;/head>
																																																																																&lt;body>
																																																																																&lt;button>&lt;a href="http://127.0.0.1:8081/transfer?bank_id=4003&amp;money=10000">屠龙宝刀，点击就送&lt;/a>&lt;/button>
																																																																																&lt;/body>
																																																																																&lt;/html></pre>
																																																																																<!-- /wp:enlighter/codeblock -->

																																																																																<!-- wp:paragraph -->
																																																																																<p>可是你仔细一想，这个敏感数据的修改，不应该用GET啊，这有问题。</p>
																																																																																<!-- /wp:paragraph -->

																																																																																<!-- wp:paragraph -->
																																																																																<p>那么，让我们把时间再次回到三天前，这次的转账页面用的是表单，POST的那种。 与此同时，一个网页吸引你的注意，硕大的“屠龙宝刀，点击就送”使你情不自禁地点击。还没来得及点击，你发现跳出的居然是转账页面。定睛一看，转入的居然还不是你的账号，金额是一万。你两眼发昏，陷入沉思。</p>
																																																																																<!-- /wp:paragraph -->

																																																																																<!-- wp:paragraph -->
																																																																																<p>明明使用的就是POST表单啊，为什么还是会出现问题 ?</p>
																																																																																<!-- /wp:paragraph -->

																																																																																<!-- wp:paragraph -->
																																																																																<p>我们不妨假设现在的转账函数变为这样：</p>
																																																																																<!-- /wp:paragraph -->

																																																																																<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																																<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">@app.route('/transfer', methods=['POST', 'GET'])
																																																																																	def withdraw():
																																																																																	if session.get('logged_in', None):
																																																																																	bank_id = request.form.get('bank_id')
																																																																																	money = request.form.get('money')
																																																																																	if bank_id and money:
																																																																																	return f'You transfer {money}$ to bank id:{bank_id}'
																																																																																	return render_template('index.html')</pre>
																																																																																	<!-- /wp:enlighter/codeblock -->

																																																																																	<!-- wp:paragraph -->
																																																																																	<p>显而易见，我可以针对你的转账表单构造一个页面，使其在加载过程中提交一个POST请求，由于你的登录信息仍存储在cookie里面， 服务器以为这个请求是你发出的 ，最终达到邪恶的目的。</p>
																																																																																	<!-- /wp:paragraph -->

																																																																																	<!-- wp:paragraph -->
																																																																																	<p>构建的页面：</p>
																																																																																	<!-- /wp:paragraph -->

																																																																																	<!-- wp:enlighter/codeblock -->
																																																																																	<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;!DOCTYPE html>
																																																																																		&lt;html lang="en">
																																																																																		&lt;head>
																																																																																		&lt;meta charset="UTF-8">
																																																																																		&lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
																																																																																		&lt;meta http-equiv="X-UA-Compatible" content="ie=edge">
																																																																																		&lt;title>Document&lt;/title>
																																																																																		&lt;script type="text/javascript">
																																																																																		function steal() {
																																																																																		form = document.getElementById('postForm');
																																																																																		form.submit()
																																																																																		}
																																																																																		&lt;/script>
																																																																																		&lt;/head>
																																																																																		&lt;body onload="steal()">
																																																																																		&lt;button>屠龙宝刀，点击就送&lt;/button>
																																																																																		&lt;form method="POST" style="display: none" id="postForm" action="http://127.0.0.1:8081/transfer">
																																																																																		&lt;input type="hidden" name="bank_id" value="4003">
																																																																																		&lt;input type="hidden" name="money" value="10000">
																																																																																		&lt;/form>
																																																																																		&lt;/body>
																																																																																		&lt;/html></pre>
																																																																																		<!-- /wp:enlighter/codeblock -->

																																																																																		<!-- wp:heading {"level":3} -->
																																																																																		<h3>如何预防</h3>
																																																																																		<!-- /wp:heading -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p><strong>1. 尽量使用POST，限制GET</strong></p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>GET接口太容易被拿来做CSRF攻击，看第一个示例就知道，只要构造一个img标签，而img标签又是不能过滤的数据。接口最好限制为POST使用，GET则无效，降低攻击风险。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p><strong>2. 浏览器Cookie策略</strong></p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>IE6、7、8、Safari会默认拦截第三方本地Cookie（Third-party Cookie）的发送。但是Firefox2、3、Opera、Chrome、Android等不会拦截，所以通过浏览器Cookie策略来防御CSRF攻击不靠谱，只能说是降低了风险。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>PS：Cookie分为两种，Session Cookie（在浏览器关闭后，就会失效，保存到内存里），Third-party Cookie（即只有到了Exprie时间后才会失效的Cookie，这种Cookie会保存到本地）。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>PS：另外如果网站返回HTTP头包含P3P Header，那么将允许浏览器发送第三方Cookie。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p><strong>3. 加验证码</strong></p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>验证码，强制用户必须与应用进行交互，才能完成最终请求。在通常情况下，验证码能很好遏制CSRF攻击。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p><strong>4. Referer Check</strong></p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>Referer Check在Web最常见的应用就是“防止图片盗链”。同理，Referer Check也可以被用于检查请求是否来自合法的“源”（Referer值是否是指定页面，或者网站的域），如果都不是，那么就极可能是CSRF攻击。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>但是因为服务器并不是什么时候都能取到Referer，所以也无法作为CSRF防御的主要手段。但是用Referer Check来监控CSRF攻击的发生，倒是一种可行的方法。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p><strong>5. Anti CSRF Token</strong></p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>现在业界对CSRF的防御，一致的做法是使用一个Token（Anti CSRF Token）。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>例子：</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>1. 用户访问某个表单页面。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>2. 服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>3. 在页面表单附带上Token参数。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>4. 用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>这个Token的值必须是随机的，不可预测的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>注意：</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:paragraph -->
																																																																																		<p>CSRF的Token仅仅用于对抗CSRF攻击。当网站同时存在XSS漏洞时候，那这个方案也是空谈。所以XSS带来的问题，应该使用XSS的防御方案予以解决。</p>
																																																																																		<!-- /wp:paragraph -->

																																																																																		<!-- wp:quote -->
																																																																																		<blockquote class="wp-block-quote"><p>预防手段摘抄自 <a href="https://www.cnblogs.com/hyddd/">hyddd</a> 的博客园</p></blockquote>
																																																																																		<!-- /wp:quote -->]]></content:encoded>
																																																																																		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																																		<wp:post_id>453</wp:post_id>
																																																																																		<wp:post_date><![CDATA[2019-06-04 21:26:33]]></wp:post_date>
																																																																																		<wp:post_date_gmt><![CDATA[2019-06-04 13:26:33]]></wp:post_date_gmt>
																																																																																		<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																																		<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																																		<wp:post_name><![CDATA[%e6%b5%85%e8%b0%88csrf%e6%94%bb%e5%87%bb]]></wp:post_name>
																																																																																		<wp:status><![CDATA[publish]]></wp:status>
																																																																																		<wp:post_parent>0</wp:post_parent>
																																																																																		<wp:menu_order>0</wp:menu_order>
																																																																																		<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																																		<wp:post_password><![CDATA[]]></wp:post_password>
																																																																																		<wp:is_sticky>0</wp:is_sticky>
																																																																																		<category domain="category" nicename="web%e5%ae%89%e5%85%a8"><![CDATA[Web安全]]></category>
																																																																																	</item>
																																																																																	<item>
																																																																																		<title>如何安全地使用字典</title>
																																																																																		<link>https://l3away.cn/?p=465</link>
																																																																																		<pubDate>Sat, 21 Sep 2019 15:19:18 +0000</pubDate>
																																																																																		<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																																		<guid isPermaLink="false">https://l3away.cn/?p=465</guid>
																																																																																		<description></description>
																																																																																		<content:encoded><![CDATA[<!-- wp:quote -->
																																																																																			<blockquote class="wp-block-quote"><p>安全地使用字典，和安全地使用套套一样重要</p></blockquote>
																																																																																			<!-- /wp:quote -->

																																																																																			<!-- wp:more -->
																																																																																			<!--more-->
																																																																																			<!-- /wp:more -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>Python中的字典数据类型经常被用到，但当我们期待一个不存在的key的value时，它往往会带来一个异常，将我们的程序活生生终结，如何解决？</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:heading {"level":4} -->
																																																																																			<h4>最开始的时候</h4>
																																																																																			<!-- /wp:heading -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>当我们最初接触Python的时候，教学网站上面会跟你提到字典的get()方法。利用这个方法，可以安全地返回字典的值，如果对应的key不存在，那么它会返回一个默认值，这个<strong>默认值默认是None</strong>，你也可以通过设置default的值改变这个默认值。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>需要注意的是，除了get()方法，setdefault()方法同样可以返回默认值，但setdefault()会将不存在的key的项追加到字典中，而get()不会。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:heading {"level":4} -->
																																																																																			<h4>笨拙且安全的</h4>
																																																																																			<!-- /wp:heading -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>后来，我们学会了异常处理，于是或多或少出于炫技的目的，使用异常处理来完成这个任务。这个方法适合当出现KeyError，你不仅需要返回默认值，而且还需要做一些处理（不然为什么不使用简单的if-else呢？）</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>可是，当你多年回来review你的代码，你也许会感叹它的笨拙。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:heading {"level":4} -->
																																																																																			<h4>是时候使用魔法的力量了</h4>
																																																																																			<!-- /wp:heading -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>利用魔法方法（特殊方法）__missing__()，当key不存在时，字典会调用这个方法，而非抛出KeyError，很酷炫。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:heading {"level":4} -->
																																																																																			<h4>用些现成的</h4>
																																																																																			<!-- /wp:heading -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>鉴于collections中defaultdict的易用性，我向你强烈推荐。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>简单地说，它的构造函数接受两个参数，一个是默认值的生成函数（即官方文档中的工厂函数），另一个则是一个字典。通过包装，它成为一个会返回默认值的字典。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>这个工厂函数可以是</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:list -->
																																																																																			<ul><li>构造函数</li><li>返回你生日的函数</li><li>…………</li></ul>
																																																																																			<!-- /wp:list -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>实际上，它基本没有限制。</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:paragraph -->
																																																																																			<p>举个栗子：</p>
																																																																																			<!-- /wp:paragraph -->

																																																																																			<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																																			<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">config = defaultdict(DevelopmentConfig, {
																																																																																				'development': DevelopmentConfig(),
																																																																																				'production': ProductionConfig(),
																																																																																				'heroku': HerokuConfig(),
																																																																																				'docker': DockerConfig(),
																																																																																				'unix': UnixConfig(), 
																																																																																				})</pre>
																																																																																				<!-- /wp:enlighter/codeblock -->

																																																																																				<!-- wp:quote -->
																																																																																				<blockquote class="wp-block-quote"><p>最近在读PyDictObject，没准哪天会写一写</p></blockquote>
																																																																																				<!-- /wp:quote -->

																																																																																				<!-- wp:paragraph -->
																																																																																				<p></p>
																																																																																				<!-- /wp:paragraph -->]]></content:encoded>
																																																																																				<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																																				<wp:post_id>465</wp:post_id>
																																																																																				<wp:post_date><![CDATA[2019-09-21 23:19:18]]></wp:post_date>
																																																																																				<wp:post_date_gmt><![CDATA[2019-09-21 15:19:18]]></wp:post_date_gmt>
																																																																																				<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																																				<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																																				<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%ae%89%e5%85%a8%e5%9c%b0%e4%bd%bf%e7%94%a8%e5%ad%97%e5%85%b8]]></wp:post_name>
																																																																																				<wp:status><![CDATA[publish]]></wp:status>
																																																																																				<wp:post_parent>0</wp:post_parent>
																																																																																				<wp:menu_order>0</wp:menu_order>
																																																																																				<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																																				<wp:post_password><![CDATA[]]></wp:post_password>
																																																																																				<wp:is_sticky>0</wp:is_sticky>
																																																																																				<category domain="category" nicename="python"><![CDATA[python]]></category>
																																																																																			</item>
																																																																																			<item>
																																																																																				<title>学校教务系统爬取计划</title>
																																																																																				<link>https://l3away.cn/?p=469</link>
																																																																																				<pubDate>Wed, 25 Sep 2019 11:33:04 +0000</pubDate>
																																																																																				<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																																				<guid isPermaLink="false">https://l3away.cn/?p=469</guid>
																																																																																				<description></description>
																																																																																				<content:encoded><![CDATA[<!-- wp:quote -->
																																																																																					<blockquote class="wp-block-quote"><p>本文以一名高校学子的身份，向你展示爬取一个垃圾教务系统是何种体验。</p></blockquote>
																																																																																					<!-- /wp:quote -->

																																																																																					<!-- wp:more -->
																																																																																					<!--more-->
																																																																																					<!-- /wp:more -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>自从学校换了教务系统以后，旧的教务系统不再维护，不得以只能自己做一个推送系统。题外话，这新教务系统是真的烂啊。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:heading {"level":4} -->
																																																																																					<h4>需求分析</h4>
																																																																																					<!-- /wp:heading -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>因为是自己用的，所以只需要简单爬取后再通过STMP或者wxpy进行推送，一个简单的课程推送系统就完成了。 当然，后来我发现“简单爬取”可一点都不简单。 鉴于在图书馆进行开发，我提前将敏感信息存进了一个叫config字典里，这样使用敏感信息的时候就不会被看到了。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:heading {"level":4} -->
																																																																																					<h4>requests试水</h4>
																																																																																					<!-- /wp:heading -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>说到用Python写爬虫，我第一时间想到了requests。requests凭借它的易用性，虏获了万千“脚本男孩”的心。通过开发者工具简单分析了请求，得到了请求地址、请求信息格式、请求头。万事俱备，只差一POST。然而现实是，当我POST过去的时候，返回了405错误。明明直接用浏览器POST请求没有问题，但用脚本却不行，也许是请求头出现了什么差错。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>在接近两个小时的尝试，我放弃了这个方法。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:heading {"level":4} -->
																																																																																					<h4>selenium大法好</h4>
																																																																																					<!-- /wp:heading -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>此计不成，我只好祭出selenium。利用selenium，我轻易地登陆了教务系统，但时间已经很晚，我打算把爬取信息的工作留到明天。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>第二天，你猜怎么着，由于selenium的特征被识别，我无法进入课表界面。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>我尝试在控制台将selenium的特征改掉：</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:list -->
																																																																																					<ul><li> window.navigator.webdriver = false</li><li>window.navigator.language = 'en-US'</li><li>…………</li></ul>
																																																																																					<!-- /wp:list -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>尝试后无果，最终发现可以通过修改chrome设置解决。然而教务系统的加载速度实在令人头疼，各种等待才把命中率控制在80%</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>最后上代码：</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																																					<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">from config import config
																																																																																						from datetime import datetime
																																																																																						from selenium.webdriver import ActionChains, Chrome, ChromeOptions
																																																																																						from selenium.webdriver.common.by import By
																																																																																						from selenium.webdriver.support import expected_conditions as EC
																																																																																						from selenium.webdriver.support.ui import WebDriverWait


																																																																																						class Crawler:
																																																																																						option = None
																																																																																						driver = None
																																																																																						today_classes = None
																																																																																						username = ''
																																																																																						password = ''

																																																																																						def __init__(self, username=config['login_account'], password=config['login_password']):
																																																																																						if self.option is None:
																																																																																						self.option = ChromeOptions()
																																																																																						self.option.add_experimental_option('excludeSwitches', ['enable-automation'])
																																																																																						self.option.add_argument('--headless')
																																																																																						self.username = username
																																																																																						self.password = password
																																																																																						self.driver = Chrome(options=self.option)

																																																																																						def login(self):
																																																																																						if self.driver:
																																																																																						self.driver.get(config['login_url'])
																																																																																						WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, 'el-input__inner')))
																																																																																						username_text = self.driver.find_elements_by_class_name('el-input__inner')[0]
																																																																																						password_text = self.driver.find_elements_by_class_name('el-input__inner')[1]
																																																																																						submit_btn = self.driver.find_element_by_class_name('btn-login')

																																																																																						username_text.send_keys(self.username)
																																																																																						password_text.send_keys(self.password)
																																																																																						ActionChains(self.driver).move_to_element(submit_btn).click(submit_btn).perform()

																																																																																						def get_info(self):
																																																																																						"""
																																																																																						store the information into object
																																																																																						:return:
																																																																																						"""
																																																																																						WebDriverWait(self.driver, 30).until(EC.presence_of_element_located((By.CLASS_NAME, 'el-submenu')))
																																																																																						elective_system_tab = self.driver.find_elements_by_class_name('el-submenu')[1]
																																																																																						ActionChains(self.driver).move_to_element(elective_system_tab).click(elective_system_tab).perform()

																																																																																						WebDriverWait(self.driver, 30).until(EC.presence_of_element_located((By.CLASS_NAME, 'el-menu-item')))
																																																																																						self_classes_tab = self.driver.find_elements_by_class_name('el-menu-item')[3]
																																																																																						ActionChains(self.driver).move_to_element(self_classes_tab).click(self_classes_tab).perform()
																																																																																						self.driver.implicitly_wait(10)
																																																																																						classes = self.driver.find_elements_by_css_selector(f'td.{config["CLASS_NAME"][datetime.today().weekday()]}'
																																																																																						f'>div>div>div>div')
																																																																																						class_list = []
																																																																																						for i, x in enumerate(classes):
																																																																																						text = x.get_attribute('innerHTML')
																																																																																						if text:
																																																																																						class_list.append(text)
																																																																																						self.today_classes = class_list
																																																																																						self.driver.close()
																																																																																						
																																																																																						def show_info(self):
																																																																																						if self.today_classes and len(self.today_classes) != 0:
																																																																																						for class_ in self.today_classes:
																																																																																						print(class_)

																																																																																						def __call__(self):
																																																																																						self.login()
																																																																																						self.get_info()

																																																																																						def __repr__(self):
																																																																																						if self.today_classes:
																																																																																						res = '\n'.join(self.today_classes)
																																																																																						return res
																																																																																						raise AttributeError('Classes information hasn\'t been got')



																																																																																					</pre>
																																																																																					<!-- /wp:enlighter/codeblock -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>测试模块和邮件模块就不放出来了，部署到服务器后，就可以每天等待明天的上课通知了，想想都开心</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:heading {"level":4} -->
																																																																																					<h4>续：大乌龙</h4>
																																																																																					<!-- /wp:heading -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>作文后的那天晚上和朋友聊起教务系统，得知他居然也在写该系统的爬虫。他没有用selenium实现。反复交谈后，发现原来是分析请求的时候复制错了登陆链接。</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:paragraph -->
																																																																																					<p>Postman一顿乱撸以后，用requests实现了一个版本（吐槽一下fstring，在某些场景下真的不如C风格的格式化来得痛快）</p>
																																																																																					<!-- /wp:paragraph -->

																																																																																					<!-- wp:enlighter/codeblock {"language":"python"} -->
																																																																																					<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class Crawler:
																																																																																						session_ = None

																																																																																						is_login = False

																																																																																						token = ''
																																																																																						session_id = ''

																																																																																						account = ''
																																																																																						password = ''

																																																																																						info = None

																																																																																						def __init__(self, account=config['login_account'],
																																																																																						password=config['login_password']):
																																																																																						if self.session_ is None:
																																																																																						self.session_ = session()
																																																																																						self.account = account
																																																																																						self.password = password

																																																																																						def login(self):
																																																																																						payload = f'{{"userCode":"{self.account}","password":"{self.password}","userCodeType":"account"}}'
																																																																																						response = requests.request('POST', config['login_url'],
																																																																																						data=payload,
																																																																																						headers=config['login_headers'])
																																																																																						j_response = json.loads(response.text)

																																																																																						if j_response['errorCode'] != "success":
																																																																																						return
																																																																																						self.token = j_response['data']['token']
																																																																																						self.session_id = response.cookies.get_dict()['SESSION']
																																																																																						self.is_login = True

																																																																																						def get_info(self):
																																																																																						if not self.is_login:
																																																																																						return
																																																																																						headers = config['api_headers']
																																																																																						headers['TOKEN'] = self.token
																																																																																						headers['Cookie'] = f'SESSION={self.session_id}; token='
																																																																																						payload = f'{{"jczy013id":"2019-2020-1","pkgl002id":"W13414710000WH","zt":"2","pkzc":"{get_tomorrow_week_number()}"}}'
																																																																																						response= self.session_.request('POST', config['api_url'],
																																																																																						data=payload,
																																																																																						headers=headers)
																																																																																						weekday = get_tomorrow_weekday()
																																																																																						data = json.loads(response.text)['data']
																																																																																						data.sort(key=lambda x: int(x['pksjmx'][:3]))
																																																																																						self.info = [x for x in data if x['pksjmx'].startswith(f'{weekday}')]

																																																																																						def __call__(self):
																																																																																						self.login()
																																																																																						self.get_info()

																																																																																						def __repr__(self):
																																																																																						return '\n'.join([x['pksjshow']+'\n' +
																																																																																						x['kc_name']+'\n' +
																																																																																						x['teachernames_1']+'\n' +
																																																																																						x['js_name'] + '\n' for x in self.info])</pre>
																																																																																						<!-- /wp:enlighter/codeblock -->]]></content:encoded>
																																																																																						<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																																						<wp:post_id>469</wp:post_id>
																																																																																						<wp:post_date><![CDATA[2019-09-25 19:33:04]]></wp:post_date>
																																																																																						<wp:post_date_gmt><![CDATA[2019-09-25 11:33:04]]></wp:post_date_gmt>
																																																																																						<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																																						<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																																						<wp:post_name><![CDATA[%e5%ad%a6%e6%a0%a1%e6%95%99%e5%8a%a1%e7%b3%bb%e7%bb%9f%e7%88%ac%e5%8f%96%e8%ae%a1%e5%88%92]]></wp:post_name>
																																																																																						<wp:status><![CDATA[publish]]></wp:status>
																																																																																						<wp:post_parent>0</wp:post_parent>
																																																																																						<wp:menu_order>0</wp:menu_order>
																																																																																						<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																																						<wp:post_password><![CDATA[]]></wp:post_password>
																																																																																						<wp:is_sticky>0</wp:is_sticky>
																																																																																						<category domain="category" nicename="others"><![CDATA[others]]></category>
																																																																																					</item>
																																																																																					<item>
																																																																																						<title>const该放哪</title>
																																																																																						<link>https://l3away.cn/?p=482</link>
																																																																																						<pubDate>Fri, 27 Sep 2019 10:02:00 +0000</pubDate>
																																																																																						<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																																						<guid isPermaLink="false">https://l3away.cn/?p=482</guid>
																																																																																						<description></description>
																																																																																						<content:encoded><![CDATA[<!-- wp:quote -->
																																																																																							<blockquote class="wp-block-quote"><p>有一天，我的孩子问我，const放哪。</p><p>那一刻，我笑容凝固了。</p></blockquote>
																																																																																							<!-- /wp:quote -->

																																																																																							<!-- wp:more -->
																																																																																							<!--more-->
																																																																																							<!-- /wp:more -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>今天刷《C++ Primer》上的题目，遇到了const。const该放哪呢？在纠结了五十分钟后，我要给出我的答案：放左边。</p>
																																																																																							<!-- /wp:paragraph -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>首先，const放在左边意味着当出现基本数据类型常量时，它会是这样的:<strong> const</strong> <strong>int a = 3;</strong> 第一个词就是const，时时刻刻提醒你它是个常量。</p>
																																																																																							<!-- /wp:paragraph -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>其次，通过这个规范，我们可以简单地将const的作用范围看作是离它最近的一个关键字。请看下例：</p>
																																																																																							<!-- /wp:paragraph -->

																																																																																							<!-- wp:enlighter/codeblock -->
																																																																																							<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include &lt;iostream>
																																																																																								using namespace std;

																																																																																								int main() {
																																																																																								int n = 3;
																																																																																								const int m = 5;
																																																																																								// p是整型常量指针，指向整型常量，指针本身不是常量
																																																																																								const int *p = &m;
																																																																																								// 因此，p可以变换指向的对象，当然，指向非常量整型也是可以的
																																																																																								p = &n;
																																																																																								// q是整型常量指针常量， 指向整型常量，本身也是常量，不可改变
																																																																																								// 事实上，q也可以指向非常量整型
																																																																																								const int *const q = &n;
																																																																																								// 这里改变q的值会出错
																																																																																								q = &m;
																																																																																								// t是整型指针常量，指向整型，本身是常量，不可改变
																																																																																								// t只能指向非常量整型，由此看来从常量整型是非常量整型的窄化
																																																																																								int *const t = &n;
																																																																																								// 当改变t的值时会出错
																																																																																								t = &m;
																																																																																								cout&lt;&lt;p&lt;&lt;endl;
																																																																																								}
																																																																																							</pre>
																																																																																							<!-- /wp:enlighter/codeblock -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>如果你觉得有点乱，那你只需要记住：</p>
																																																																																							<!-- /wp:paragraph -->

																																																																																							<!-- wp:quote -->
																																																																																							<blockquote class="wp-block-quote"><p>当const出现时，往右边看，看到第一个关键字是啥，那他就是啥常量</p></blockquote>
																																																																																							<!-- /wp:quote -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>e.g  <strong>const int *const q = &amp;n</strong></p>
																																																																																							<!-- /wp:paragraph -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>常量-------碰到int------->整型常量-----碰到q------->整形常量指针常量</p>
																																																																																							<!-- /wp:paragraph -->

																																																																																							<!-- wp:paragraph -->
																																																																																							<p>顺便说一下，const的结合顺序是先左结合再右结合，不要误以为是简单的右结合哦。</p>
																																																																																							<!-- /wp:paragraph -->]]></content:encoded>
																																																																																							<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																																							<wp:post_id>482</wp:post_id>
																																																																																							<wp:post_date><![CDATA[2019-09-27 18:02:00]]></wp:post_date>
																																																																																							<wp:post_date_gmt><![CDATA[2019-09-27 10:02:00]]></wp:post_date_gmt>
																																																																																							<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																																							<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																																							<wp:post_name><![CDATA[const%e8%af%a5%e6%94%be%e5%93%aa]]></wp:post_name>
																																																																																							<wp:status><![CDATA[publish]]></wp:status>
																																																																																							<wp:post_parent>0</wp:post_parent>
																																																																																							<wp:menu_order>0</wp:menu_order>
																																																																																							<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																																							<wp:post_password><![CDATA[]]></wp:post_password>
																																																																																							<wp:is_sticky>0</wp:is_sticky>
																																																																																							<category domain="category" nicename="c"><![CDATA[C&amp;CPP]]></category>
																																																																																						</item>
																																																																																						<item>
																																																																																							<title>《sql必知必会》书摘</title>
																																																																																							<link>https://l3away.cn/?p=494</link>
																																																																																							<pubDate>Mon, 14 Oct 2019 10:22:39 +0000</pubDate>
																																																																																							<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																																							<guid isPermaLink="false">https://l3away.cn/?p=494</guid>
																																																																																							<description></description>
																																																																																							<content:encoded><![CDATA[<!-- wp:quote -->
																																																																																								<blockquote class="wp-block-quote"><p>两天读完一本书，成就感满满，下面直接开始书摘，可能含有本人的一些理解。</p></blockquote>
																																																																																								<!-- /wp:quote -->

																																																																																								<!-- wp:more -->
																																																																																								<!--more-->
																																																																																								<!-- /wp:more -->

																																																																																								<!-- wp:heading {"level":4} -->
																																																																																								<h4>主键相关</h4>
																																																																																								<!-- /wp:heading -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>主键唯一非空且<strong>不可重用</strong>，其实对<strong>不可重用</strong>的理解不是很到位，日常开发中删除文章的id会重新赋给新建的文章。</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:heading {"level":4} -->
																																																																																								<h4>逻辑操作相关</h4>
																																																																																								<!-- /wp:heading -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>AND计算次序比OR更高，这点和编程语言一样，所以就算是为了可读性，也要常加括号。</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>IN比OR的效率更高，且大多数情况下还比较简洁。</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>NOT在复杂子句中提高可读性</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:heading {"level":4} -->
																																																																																								<h4>通配符相关</h4>
																																																																																								<!-- /wp:heading -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>Access与其他数据库有很多不同，使用时记得查阅其文档</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>通配符虽然使查找变得简单，但也导致查询时间变长</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:heading {"level":4} -->
																																																																																								<h4>联结、子查询相关</h4>
																																																																																								<!-- /wp:heading -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>为聚集函数的结果取个别名是个好习惯</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>自联结速度优于子查询</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>并非所有DBMS都支持全外联结</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:heading {"level":4} -->
																																																																																								<h4>增删查改相关</h4>
																																																																																								<!-- /wp:heading -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>INTO不要省略，即便你的DBMS允许你省略</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>TRUNCATE TABLE比DETELE速度快，因为它不会记录改变</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:heading {"level":4} -->
																																																																																								<h4>高级操作相关</h4>
																																																																																								<!-- /wp:heading -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>每次使用视图都会执行一次查询，性能会降低</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>请在使用视图嵌套后测试其性能</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>事务管理时创建合适粒度的储存点会使你的ROLLBACK更灵活</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p>约束比触发器速度更快</p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:paragraph -->
																																																																																								<p></p>
																																																																																								<!-- /wp:paragraph -->

																																																																																								<!-- wp:quote -->
																																																																																								<blockquote class="wp-block-quote"><p>别漏where</p><p> 别漏where </p><p> 别漏where </p><p>重要的事情说三遍。</p></blockquote>
																																																																																								<!-- /wp:quote -->]]></content:encoded>
																																																																																								<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																																								<wp:post_id>494</wp:post_id>
																																																																																								<wp:post_date><![CDATA[2019-10-14 18:22:39]]></wp:post_date>
																																																																																								<wp:post_date_gmt><![CDATA[2019-10-14 10:22:39]]></wp:post_date_gmt>
																																																																																								<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																																								<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																																								<wp:post_name><![CDATA[%e3%80%8asql%e5%bf%85%e7%9f%a5%e5%bf%85%e4%bc%9a%e3%80%8b%e4%b9%a6%e6%91%98]]></wp:post_name>
																																																																																								<wp:status><![CDATA[publish]]></wp:status>
																																																																																								<wp:post_parent>0</wp:post_parent>
																																																																																								<wp:menu_order>0</wp:menu_order>
																																																																																								<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																																								<wp:post_password><![CDATA[]]></wp:post_password>
																																																																																								<wp:is_sticky>0</wp:is_sticky>
																																																																																								<category domain="category" nicename="database"><![CDATA[Database]]></category>
																																																																																							</item>
																																																																																							<item>
																																																																																								<title>C++内存泄漏的一些点</title>
																																																																																								<link>https://l3away.cn/?p=498</link>
																																																																																								<pubDate>Fri, 25 Oct 2019 10:17:59 +0000</pubDate>
																																																																																								<dc:creator><![CDATA[PwnForWhat]]></dc:creator>
																																																																																								<guid isPermaLink="false">https://l3away.cn/?p=498</guid>
																																																																																								<description></description>
																																																																																								<content:encoded><![CDATA[<!-- wp:quote -->
																																																																																									<blockquote class="wp-block-quote"><p>C++的内存管理太难了</p><cite>鲁迅</cite></blockquote>
																																																																																									<!-- /wp:quote -->

																																																																																									<!-- wp:more -->
																																																																																									<!--more-->
																																																																																									<!-- /wp:more -->

																																																																																									<!-- wp:heading {"level":3} -->
																																																																																									<h3>基类析构函数为非virtual</h3>
																																																																																									<!-- /wp:heading -->

																																																																																									<!-- wp:paragraph -->
																																																																																									<p>基类的析构函数如果是非virtual的，那么上转型时，基类的析构函数不会被覆盖。这样子，属于子类的部分在析构时就不会会删除，导致内存泄漏。</p>
																																																																																									<!-- /wp:paragraph -->

																																																																																									<!-- wp:heading {"level":3} -->
																																																																																									<h3>依赖用户释放对象</h3>
																																																																																									<!-- /wp:heading -->

																																																																																									<!-- wp:paragraph -->
																																																																																									<p>依赖用户使用delete来释放内存，如果在释放过程前抛出异常，那么这部分的内存就不会被释放，导致内存泄漏。</p>
																																																																																									<!-- /wp:paragraph -->

																																																																																									<!-- wp:paragraph -->
																																																																																									<p>一个足够鲁棒的做法是，返回一个shared_ptr来管理原生对象。shared_ptr是个神奇的玩意，但你记得要为对象创建合适的shared_ptr。</p>
																																																																																									<!-- /wp:paragraph -->

																																																																																									<!-- wp:heading {"level":3} -->
																																																																																									<h3>New 和 Delete 不对称</h3>
																																																																																									<!-- /wp:heading -->

																																																																																									<!-- wp:paragraph -->
																																																																																									<p>New 一组对象，却只delete一个对象，这样不内存泄漏真的没天理</p>
																																																																																									<!-- /wp:paragraph -->

																																																																																									<!-- wp:heading {"level":3} -->
																																																																																									<h3>未定义复制构造函数而成员中有指针变量</h3>
																																																																																									<!-- /wp:heading -->

																																																																																									<!-- wp:paragraph -->
																																																																																									<p>这会导致调用默认复制构造函数然后使得同一个地址被两个指针所指（复制和被复制对象的指针变量），导致同一位置的内存被释放两次。</p>
																																																																																									<!-- /wp:paragraph -->

																																																																																									<!-- wp:quote -->
																																																																																									<blockquote class="wp-block-quote"><p>你以为大家看不出这是《effective C++》的书摘吗?</p></blockquote>
																																																																																									<!-- /wp:quote -->]]></content:encoded>
																																																																																									<excerpt:encoded><![CDATA[]]></excerpt:encoded>
																																																																																									<wp:post_id>498</wp:post_id>
																																																																																									<wp:post_date><![CDATA[2019-10-25 18:17:59]]></wp:post_date>
																																																																																									<wp:post_date_gmt><![CDATA[2019-10-25 10:17:59]]></wp:post_date_gmt>
																																																																																									<wp:comment_status><![CDATA[open]]></wp:comment_status>
																																																																																									<wp:ping_status><![CDATA[open]]></wp:ping_status>
																																																																																									<wp:post_name><![CDATA[c%e5%86%85%e5%ad%98%e6%b3%84%e6%bc%8f%e7%9a%84%e4%b8%80%e4%ba%9b%e7%82%b9]]></wp:post_name>
																																																																																									<wp:status><![CDATA[publish]]></wp:status>
																																																																																									<wp:post_parent>0</wp:post_parent>
																																																																																									<wp:menu_order>0</wp:menu_order>
																																																																																									<wp:post_type><![CDATA[post]]></wp:post_type>
																																																																																									<wp:post_password><![CDATA[]]></wp:post_password>
																																																																																									<wp:is_sticky>0</wp:is_sticky>
																																																																																									<category domain="category" nicename="c"><![CDATA[C&amp;CPP]]></category>
																																																																																								</item>
																																																																																							</channel>
																																																																																						</rss>
																																																																																						