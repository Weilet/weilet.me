<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Weilet's blog - Weilet</title><link href="https://weilet.me/" rel="alternate"></link><link href="https://weilet.me/feeds/weilet.atom.xml" rel="self"></link><id>https://weilet.me/</id><updated>2020-07-04T01:05:00+08:00</updated><entry><title>好友推荐算法</title><link href="https://weilet.me/%E5%A5%BD%E5%8F%8B%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95" rel="alternate"></link><published>2020-07-04T01:05:00+08:00</published><updated>2020-07-04T01:05:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-07-04:/好友推荐算法</id><content type="html">&lt;p&gt;某天与国外友人 X&amp;nbsp;聊起了好友推荐算法，那么好友推荐是如何完成的呢？&lt;/p&gt;
&lt;h3 id="_1"&gt;三元闭包&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;事实上解决这类问题有个专门的理论：&lt;strong&gt;三元闭包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓三元闭包，即在一个社交圈内，若两个人有一个共同好友，则这两个人在未来成为好友的可能性就会提高。&lt;/p&gt;
&lt;p&gt;我们可以用无向图来表示这个社交圈，图上的点即为每个人。如果对于A、B两点，它们之间存在一个连线，那么A与B则为好友。&lt;/p&gt;
&lt;h3 id="_2"&gt;邻里重叠度&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们可以用邻里重叠度来定量表示 A、B 之间联系的强弱，它在数值上等于：A与B的共同好友数 /&amp;nbsp;A与B的好友总数&lt;/p&gt;
&lt;p&gt;我们可以通过对邻里重叠度的排序，找出最高邻里重叠度且非好友的两人，并向他们推荐对方。&lt;/p&gt;
&lt;h3 id="_3"&gt;脸书是如何做的&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;脸书结合经验：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过时间对这个重叠度进行加权。认识更晚的好友的权重更高，因为他代表了目前的兴趣取向或亲密关系。&lt;/li&gt;
&lt;li&gt;通过共同好友的好友数对这个重叠度进行加权。共同好友中，好友数少的权重更高，因为这样更有可能联通两个不同的连通分量（也就是两个本不连通的社交圈）。&lt;/li&gt;
&lt;/ol&gt;</content><category term="Tech"></category><category term="None"></category></entry><entry><title>程序员需要知道的字体知识</title><link href="https://weilet.me/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%AD%97%E4%BD%93%E7%9F%A5%E8%AF%86" rel="alternate"></link><published>2020-05-25T23:52:00+08:00</published><updated>2020-05-25T23:52:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-05-25:/程序员需要知道的字体知识</id><summary type="html">&lt;p&gt;程序员一天要面对屏幕很长时间，其中大部分时间是在使用终端、使用 &lt;span class="caps"&gt;IDE&lt;/span&gt;。因此，为了保证我们的身心健康，选择一款良好的字体至关重要。本文将带你了解一些&lt;em&gt;连我都知道的&lt;/em&gt;文字小知识，让你为自己更好地选择字体。&lt;/p&gt;
&lt;h3 id="vs"&gt;衬体 &lt;span class="caps"&gt;VS&lt;/span&gt; 无衬线体&lt;a class="headerlink" href="#vs" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;衬体（Serif）是有衬线的字体，而无衬线体（sans-serif）则是没有衬线的字体。所谓衬线，即是 Windows 下 Word&amp;nbsp;文档中宋体的装饰线，它们是在笔画的起始和末端用于装饰的。无衬线体比衬体干扰成分少，简洁明了，适合用于编程。顺带一提，无衬线体在旧时代也被称作“grotesque”，因此也被称为哥特体（Gothic）。&lt;/p&gt;
&lt;h3 id="vs_1"&gt;等宽字体 &lt;span class="caps"&gt;VS&lt;/span&gt; 比例字体&lt;a class="headerlink" href="#vs_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;等宽字体（Monospaced Font）是指字体宽度相同的电脑字体，而比例字体（Proportional Font）是指字体宽度不尽相同的字体。为了更好地对齐，使代码美观，你应该使用等宽字体（一般等宽字体名字都带有 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;程序员一天要面对屏幕很长时间，其中大部分时间是在使用终端、使用 &lt;span class="caps"&gt;IDE&lt;/span&gt;。因此，为了保证我们的身心健康，选择一款良好的字体至关重要。本文将带你了解一些&lt;em&gt;连我都知道的&lt;/em&gt;文字小知识，让你为自己更好地选择字体。&lt;/p&gt;
&lt;h3 id="vs"&gt;衬体 &lt;span class="caps"&gt;VS&lt;/span&gt; 无衬线体&lt;a class="headerlink" href="#vs" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;衬体（Serif）是有衬线的字体，而无衬线体（sans-serif）则是没有衬线的字体。所谓衬线，即是 Windows 下 Word&amp;nbsp;文档中宋体的装饰线，它们是在笔画的起始和末端用于装饰的。无衬线体比衬体干扰成分少，简洁明了，适合用于编程。顺带一提，无衬线体在旧时代也被称作“grotesque”，因此也被称为哥特体（Gothic）。&lt;/p&gt;
&lt;h3 id="vs_1"&gt;等宽字体 &lt;span class="caps"&gt;VS&lt;/span&gt; 比例字体&lt;a class="headerlink" href="#vs_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;等宽字体（Monospaced Font）是指字体宽度相同的电脑字体，而比例字体（Proportional Font）是指字体宽度不尽相同的字体。为了更好地对齐，使代码美观，你应该使用等宽字体（一般等宽字体名字都带有 mono）。值得注意的，同时包含中英文的等宽字体是指汉字与英文字母的比为 2 : 1&amp;nbsp;而非宽度相同的字体。&lt;/p&gt;
&lt;h3 id="vs_2"&gt;窄引号 &lt;span class="caps"&gt;VS&lt;/span&gt; 全宽引号&lt;a class="headerlink" href="#vs_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;窄引号是指中文引号的宽度为半个汉字宽度，而全宽宽引号是指中文引号的宽度为一个汉字宽度。在编程中很少使用到中文引号，可以随个人喜好选择。&lt;/p&gt;
&lt;h3 id="vs_3"&gt;半宽破折号 &lt;span class="caps"&gt;VS&lt;/span&gt; 全宽破折号&lt;a class="headerlink" href="#vs_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;半宽破折号是指破折号的长度为标准的一半宽度，而全宽宽引号是指破折号的宽度为标准宽度。这里的破折号是指 em dashes（关于这些横杠杠的区别可以看&lt;a href="https://zhuanlan.zhihu.com/p/31819513"&gt;这里&lt;/a&gt;）。在编程中较少使用，但个人比较喜欢全宽。&lt;/p&gt;
&lt;h3 id="_1"&gt;连字&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;连字（Ligature）是指将多个符号连接成一个，比如将 &amp;lt;= 连接成 ≤&amp;nbsp;，属于锦上添花的小特性，可以根据个人喜好选择。&lt;/p&gt;
&lt;h3 id="_2"&gt;字形&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;主要是针对中日韩文字，一般有以下字形：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SC&lt;/code&gt;:&amp;nbsp;简体中文&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TC&lt;/code&gt;:&amp;nbsp;台湾繁体中文&lt;/p&gt;
&lt;p&gt;&lt;code&gt;J&lt;/code&gt;:&amp;nbsp;日文&lt;/p&gt;
&lt;p&gt;&lt;code&gt;K&lt;/code&gt;:&amp;nbsp;韩文&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HC&lt;/code&gt;:&amp;nbsp;香港繁体中文&lt;/p&gt;
&lt;h3 id="powerline-vs-nerd"&gt;Powerline &lt;span class="caps"&gt;VS&lt;/span&gt; Nerd&lt;a class="headerlink" href="#powerline-vs-nerd" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在使用 oh-my-zsh 的某些主题时，你会被要求使用 Powerline 字体。所谓 Powerline 字体即是通过 Patch 的方式为字体打上图标，使其支持 Powerline 主题的图标。Nerd 字体同理，不过其图标集更大，是 Powerline 图标集的超集。所以，如果有需要直接使用 Nerd&amp;nbsp;字体即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我目前使用的是更纱黑体 &lt;span class="caps"&gt;SC&lt;/span&gt; ，因为我没有使用 Powerline&amp;nbsp;主题的习惯。更重要的是，它真的很好看啊。&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Tech"></category><category term="Font"></category><category term="Terminal"></category></entry><entry><title>轻松自建 RSS 服务</title><link href="https://weilet.me/%E8%BD%BB%E6%9D%BE%E8%87%AA%E5%BB%BA%20RSS%20%E6%9C%8D%E5%8A%A1" rel="alternate"></link><published>2020-05-16T23:14:00+08:00</published><updated>2020-05-16T23:14:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-05-16:/轻松自建 RSS 服务</id><summary type="html">&lt;p&gt;这个月初发现日常使用的 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务商 inoreader 被墙了，虽然它有补救方案，却不被我的手机客户端支持。命运的大手最终还是把我推向了自建 &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;的道路上&lt;/p&gt;
&lt;h3 id="rss"&gt;什么是 &lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;a class="headerlink" href="#rss" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你了解 &lt;span class="caps"&gt;RSS&lt;/span&gt;，可以跳过本节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; 为 Really Simple Syndication 的缩写，网站提供 &lt;span class="caps"&gt;RSS&lt;/span&gt; 订阅源，用户订阅。订阅的方式分为两种：直接订阅和通过 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务订阅。直接订阅源是将地址输入阅读器订阅，信息的流向是从订阅源到阅读器。优点是操作简单，缺点是同步不便以及无法订阅国外的一些源；而通过 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务订阅，信息的流向则是从订阅源到 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务，再到阅读器。&lt;span class="caps"&gt;RSS&lt;/span&gt; 服务相当于给我们提供了中转的作用。优点是便于管理且支持的源较丰富，缺点是一旦 &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;服务停止就无法使用。&lt;/p&gt;
&lt;h3 id="rss_1"&gt;自建 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务选择&lt;a class="headerlink" href="#rss_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这里的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;这个月初发现日常使用的 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务商 inoreader 被墙了，虽然它有补救方案，却不被我的手机客户端支持。命运的大手最终还是把我推向了自建 &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;的道路上&lt;/p&gt;
&lt;h3 id="rss"&gt;什么是 &lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;a class="headerlink" href="#rss" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你了解 &lt;span class="caps"&gt;RSS&lt;/span&gt;，可以跳过本节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; 为 Really Simple Syndication 的缩写，网站提供 &lt;span class="caps"&gt;RSS&lt;/span&gt; 订阅源，用户订阅。订阅的方式分为两种：直接订阅和通过 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务订阅。直接订阅源是将地址输入阅读器订阅，信息的流向是从订阅源到阅读器。优点是操作简单，缺点是同步不便以及无法订阅国外的一些源；而通过 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务订阅，信息的流向则是从订阅源到 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务，再到阅读器。&lt;span class="caps"&gt;RSS&lt;/span&gt; 服务相当于给我们提供了中转的作用。优点是便于管理且支持的源较丰富，缺点是一旦 &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;服务停止就无法使用。&lt;/p&gt;
&lt;h3 id="rss_1"&gt;自建 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务选择&lt;a class="headerlink" href="#rss_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这里的 &lt;span class="caps"&gt;RSS&lt;/span&gt; 服务是指自建的。主流有 Tiny Tiny &lt;span class="caps"&gt;RSS&lt;/span&gt; 和 Fresh &lt;span class="caps"&gt;RSS&lt;/span&gt;。我选择 Tiny Tiny &lt;span class="caps"&gt;RSS&lt;/span&gt; 的原因是因为它的部署教程比较多。而且它还能伪装成 Fever&amp;nbsp;服务，供我的阅读器使用。&lt;/p&gt;
&lt;h3 id="_1"&gt;服务器选择&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;鉴于我部分的订阅源在国外，所以需要一个国外的服务器。我不期望它做别的用途，所以它不需要太强的性能。一番选择下来，一个月的服务器费用控制在 5 &lt;span class="caps"&gt;RMB&lt;/span&gt;&amp;nbsp;内（实际使用中略有卡顿，但我认为是网络而非性能的缘故）。如果你没有国外的订阅源，你可以选择国内性价比比较高的云服务器。&lt;/p&gt;
&lt;h3 id="_2"&gt;整体流程&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;参照&lt;a href="http://ttrss.henry.wang/zh/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2"&gt; Awesome &lt;span class="caps"&gt;TTRSS&lt;/span&gt; &lt;/a&gt;的部署文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取&amp;nbsp;docker-compose.yml&lt;/p&gt;
&lt;p&gt;curl https://raw.githubusercontent.com/HenryQW/Awesome-&lt;span class="caps"&gt;TTRSS&lt;/span&gt;/master/docker-compose.yml&amp;nbsp;-O&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改 &lt;code&gt;docker-compose.yml&lt;/code&gt; 中的设置，包括 &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt; 、&lt;code&gt;SELF_URL_PATH&lt;/code&gt; 以及 &lt;code&gt;DB_PASS&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署&lt;/p&gt;
&lt;p&gt;docker-compose up&amp;nbsp;-d&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过应用地址访问 Tiny Tiny &lt;span class="caps"&gt;RSS&lt;/span&gt;，并修改默认密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 Mercury Fulltext 插件和 Fever &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后就可以使用 Fever &lt;span class="caps"&gt;API&lt;/span&gt; 在支持 Fever&amp;nbsp;的阅读器上使用了&lt;/p&gt;
&lt;h3 id="one-more-thing"&gt;One More Thing&lt;a class="headerlink" href="#one-more-thing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可是如果网站本身不支持 &lt;span class="caps"&gt;RSS&lt;/span&gt;，怎么办呢？这个时候可以使用 &lt;a href="https://docs.rsshub.app/"&gt;RSSHub&lt;/a&gt; 了，利用 RSSHub 我们可以给不支持 &lt;span class="caps"&gt;RSS&lt;/span&gt; 的网页生成。你可以选择自建 RSSHub 服务或者使用他人的 RSSHub&amp;nbsp;服务。&lt;/p&gt;</content><category term="Tech"></category><category term="RSS"></category><category term="docker"></category></entry><entry><title>正则正则</title><link href="https://weilet.me/%E6%AD%A3%E5%88%99%E6%AD%A3%E5%88%99" rel="alternate"></link><published>2020-05-11T18:30:00+08:00</published><updated>2020-05-11T18:30:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-05-11:/正则正则</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;这个学期写shell比较多，不小心发现了正则表达式的秘密………&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;通配符？&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;那么聊正则表达式之前呢，我们先聊一下新手容易和正则表达式弄混的概念：通配符&lt;/p&gt;
&lt;p&gt;在正则表达式出现之前，人们就有用来表示模式的符号，通配符比正则表达式的符号少，却也足够日常的使用。&lt;/p&gt;
&lt;p&gt;关于通配符，可以参考&lt;a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html"&gt;阮一峰老师的博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;正则表达式&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过几个月的学习，我发现正则表达式是个大家庭。很多以前在 Java 和 Python 的写法，在 Linux 的命令中并不适用。为什么呢？因为 Linux 中很多命令默认支持的是&lt;strong&gt;基础正则表达式&lt;/strong&gt;，而我们在编程语言里面使用的表达式都是经过一定扩展的。其实 Linux 也支持扩展正则表达式（注意，这和编程语言里使用的还是有一定的不同）以及 Perl 正则表达式（经过 Perl 改良的正则表达式）。以我们最常用的  &lt;code&gt;grep&lt;/code&gt; 为例，可以通过 &lt;code&gt;-E&lt;/code&gt; 来支持扩展正则表达式以及通过 &lt;code&gt;-P&lt;/code&gt; 来支持 Perl …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;这个学期写shell比较多，不小心发现了正则表达式的秘密………&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;通配符？&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;那么聊正则表达式之前呢，我们先聊一下新手容易和正则表达式弄混的概念：通配符&lt;/p&gt;
&lt;p&gt;在正则表达式出现之前，人们就有用来表示模式的符号，通配符比正则表达式的符号少，却也足够日常的使用。&lt;/p&gt;
&lt;p&gt;关于通配符，可以参考&lt;a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html"&gt;阮一峰老师的博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;正则表达式&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过几个月的学习，我发现正则表达式是个大家庭。很多以前在 Java 和 Python 的写法，在 Linux 的命令中并不适用。为什么呢？因为 Linux 中很多命令默认支持的是&lt;strong&gt;基础正则表达式&lt;/strong&gt;，而我们在编程语言里面使用的表达式都是经过一定扩展的。其实 Linux 也支持扩展正则表达式（注意，这和编程语言里使用的还是有一定的不同）以及 Perl 正则表达式（经过 Perl 改良的正则表达式）。以我们最常用的  &lt;code&gt;grep&lt;/code&gt; 为例，可以通过 &lt;code&gt;-E&lt;/code&gt; 来支持扩展正则表达式以及通过 &lt;code&gt;-P&lt;/code&gt; 来支持 Perl&amp;nbsp;正则表达式&lt;/p&gt;
&lt;p&gt;你可以在这个&lt;a href="https://man.linuxde.net/docs/shell_regex.html"&gt;网站&lt;/a&gt;查看正则表达式家族更成员的异同&lt;/p&gt;</content><category term="Tech"></category><category term="Linux"></category></entry><entry><title>文件哈希</title><link href="https://weilet.me/%E6%96%87%E4%BB%B6%E5%93%88%E5%B8%8C" rel="alternate"></link><published>2020-05-09T18:30:00+08:00</published><updated>2020-05-09T18:30:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-05-09:/文件哈希</id><summary type="html">&lt;p&gt;你是否遇到过这样的情况：看到一张有趣的图片，想要发送给微信好友，却发现对方无法查看；又或者想上传文件到 &lt;span class="caps"&gt;QQ&lt;/span&gt;&amp;nbsp;群，却总是失败？这类行为，都与文件的哈希值有关。&lt;/p&gt;
&lt;h3 id="_1"&gt;什么是文件哈希&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文件根据指定的散列算法（如 md5、&lt;span class="caps"&gt;SHA1&lt;/span&gt;、&lt;span class="caps"&gt;SHA256&lt;/span&gt;）计算出文件哈希，它相当于文件的“身份证”，具有唯一性。文件哈希与文件内容有关，与文件名、修改时间无关。&lt;/p&gt;
&lt;h3 id="_2"&gt;文件拦截&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;既然文件的哈希值具有&lt;strong&gt;唯一性&lt;/strong&gt;，那么我们可以以它作为依据，将一些我们不想传播的文件的哈希值记录到黑名单（通常这些文件传播有一定规模），一旦核对上传的文件的文件哈希在黑名单里，就不予上传。&lt;/p&gt;
&lt;h3 id="_3"&gt;应对文件拦截&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果我非要上传呢？最简单的办法就是对文件进行不影响&lt;strong&gt;主要信息&lt;/strong&gt;的编辑。比如对于图像，我们可以修改一个像素，对于文本，我们可以在末行添加空行。推而广之，我们可以使用十六进制编辑器在文件尾部添加若干&amp;nbsp;20（空格），进而改变文件哈希。&lt;/p&gt;
&lt;p&gt;事实上，有一个专门的工具可以专门用于修改文件哈希&amp;#8212;&lt;a href="http://imristo.com/hash-manager-change-the-hash-of-any-file/"&gt;Hash&amp;nbsp;Manager&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;高科技一旦作起恶来 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;你是否遇到过这样的情况：看到一张有趣的图片，想要发送给微信好友，却发现对方无法查看；又或者想上传文件到 &lt;span class="caps"&gt;QQ&lt;/span&gt;&amp;nbsp;群，却总是失败？这类行为，都与文件的哈希值有关。&lt;/p&gt;
&lt;h3 id="_1"&gt;什么是文件哈希&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;文件根据指定的散列算法（如 md5、&lt;span class="caps"&gt;SHA1&lt;/span&gt;、&lt;span class="caps"&gt;SHA256&lt;/span&gt;）计算出文件哈希，它相当于文件的“身份证”，具有唯一性。文件哈希与文件内容有关，与文件名、修改时间无关。&lt;/p&gt;
&lt;h3 id="_2"&gt;文件拦截&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;既然文件的哈希值具有&lt;strong&gt;唯一性&lt;/strong&gt;，那么我们可以以它作为依据，将一些我们不想传播的文件的哈希值记录到黑名单（通常这些文件传播有一定规模），一旦核对上传的文件的文件哈希在黑名单里，就不予上传。&lt;/p&gt;
&lt;h3 id="_3"&gt;应对文件拦截&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果我非要上传呢？最简单的办法就是对文件进行不影响&lt;strong&gt;主要信息&lt;/strong&gt;的编辑。比如对于图像，我们可以修改一个像素，对于文本，我们可以在末行添加空行。推而广之，我们可以使用十六进制编辑器在文件尾部添加若干&amp;nbsp;20（空格），进而改变文件哈希。&lt;/p&gt;
&lt;p&gt;事实上，有一个专门的工具可以专门用于修改文件哈希&amp;#8212;&lt;a href="http://imristo.com/hash-manager-change-the-hash-of-any-file/"&gt;Hash&amp;nbsp;Manager&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;高科技一旦作起恶来，一点也不比瘟疫弱&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Tech"></category><category term="Security"></category></entry><entry><title>劳动节随想</title><link href="https://weilet.me/%E5%8A%B3%E5%8A%A8%E8%8A%82%E9%9A%8F%E6%83%B3" rel="alternate"></link><published>2020-05-04T22:16:00+08:00</published><updated>2020-05-04T22:16:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-05-04:/劳动节随想</id><summary type="html">&lt;p&gt;​       五月一日，是国际劳动节，是为纪念 1886 年美国芝加哥劳工争取&lt;a href="https://zh.wikipedia.org/wiki/八小时工作制"&gt;八小时工作制&lt;/a&gt;而被警察武装镇压的&lt;a href="https://zh.wikipedia.org/wiki/干草市场事件"&gt;干草市场事件&lt;/a&gt;而设立的。&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;戏谑的是，在今年的国际劳动节之日，国家地理杂志的微博居然发布了一套包含黑人采摘棉花在内的“致敬劳动者”组图。黑人摘棉花是剥削的象征，与反对剥削的国际劳动节本意实在不符。同样戏谑的是，由于疫情影响，在艰难的就业环境下，有许多互联网公司的员工不得不在劳动节假日“自愿加班”。不知道他们收到别人发送的“劳动节快乐”时，心里是何种感受呢？&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;劳动最光荣，这句话有错吗？显然没有。但当他成为资本家压迫劳动者的口号时，它就成了凶器。是一把使人放弃学习时间的堕落之刃，是一个使人甘于平庸的麻木之镰，它使得每个劳动者从一个活生生的人类转变为为资本工作的机器，谋害着劳动者的生命。&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;但现实是有许多的人无法摆脱超负荷工作的现状。因为他们的生存就依赖着这份工作，不能离开，也不敢离开。我大体同意“先有生存再有生活”这样的说法。所以如果你在当下不太乐观的就业环境下遭受到不公平的待遇，且你的资产累计不足以让你待业一到两年，那就先忍忍吧。否则，大胆地离开它，你的人生值得更好的工作。&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;愿天下劳动者，在劳动节之日，都无需劳动 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;​       五月一日，是国际劳动节，是为纪念 1886 年美国芝加哥劳工争取&lt;a href="https://zh.wikipedia.org/wiki/八小时工作制"&gt;八小时工作制&lt;/a&gt;而被警察武装镇压的&lt;a href="https://zh.wikipedia.org/wiki/干草市场事件"&gt;干草市场事件&lt;/a&gt;而设立的。&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;戏谑的是，在今年的国际劳动节之日，国家地理杂志的微博居然发布了一套包含黑人采摘棉花在内的“致敬劳动者”组图。黑人摘棉花是剥削的象征，与反对剥削的国际劳动节本意实在不符。同样戏谑的是，由于疫情影响，在艰难的就业环境下，有许多互联网公司的员工不得不在劳动节假日“自愿加班”。不知道他们收到别人发送的“劳动节快乐”时，心里是何种感受呢？&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;劳动最光荣，这句话有错吗？显然没有。但当他成为资本家压迫劳动者的口号时，它就成了凶器。是一把使人放弃学习时间的堕落之刃，是一个使人甘于平庸的麻木之镰，它使得每个劳动者从一个活生生的人类转变为为资本工作的机器，谋害着劳动者的生命。&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;但现实是有许多的人无法摆脱超负荷工作的现状。因为他们的生存就依赖着这份工作，不能离开，也不敢离开。我大体同意“先有生存再有生活”这样的说法。所以如果你在当下不太乐观的就业环境下遭受到不公平的待遇，且你的资产累计不足以让你待业一到两年，那就先忍忍吧。否则，大胆地离开它，你的人生值得更好的工作。&lt;/p&gt;
&lt;p&gt;​&amp;nbsp;愿天下劳动者，在劳动节之日，都无需劳动。&lt;/p&gt;
&lt;p&gt;​   &lt;/p&gt;</content><category term="Daily"></category><category term="Thought"></category></entry><entry><title>《李银河说爱情》读后感</title><link href="https://weilet.me/%E3%80%8A%E6%9D%8E%E9%93%B6%E6%B2%B3%E8%AF%B4%E7%88%B1%E6%83%85%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F" rel="alternate"></link><published>2020-04-26T23:17:00+08:00</published><updated>2020-04-26T23:17:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-04-26:/《李银河说爱情》读后感</id><content type="html">&lt;p&gt;大多数人都是从王小波的书里知道李银河的，我也不例外。她作为一位社会学学者，《李银河说爱情》可以视作她多年研究的成果，十分适合作为爱情观婚姻观的启蒙读物。&lt;/p&gt;
&lt;p&gt;本书分为六大章。前四章，从婚姻制度的演化讲到爱情观的地域差别，再到与性相关的 &lt;span class="caps"&gt;LGBT&lt;/span&gt;、性癖好等的讲解，行文都十分通俗易懂，挺开阔眼界的。后两章讲的就比较大，像男女平等，女性独立之类的话题。&lt;/p&gt;
&lt;p&gt;如果你持一个开放的态度去看本书，那你能了解到，这个世界的性爱观爱情观婚姻观远比你想象的丰富。然而如果你是个狭隘的人，估计看书的时候会被气得上蹿下跳。&lt;/p&gt;</content><category term="Daily"></category><category term="Book"></category></entry><entry><title>学会阅读源码</title><link href="https://weilet.me/%E5%AD%A6%E4%BC%9A%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81" rel="alternate"></link><published>2020-04-08T01:27:00+08:00</published><updated>2020-04-08T01:27:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-04-08:/学会阅读源码</id><summary type="html">&lt;p&gt;当你遇到一个问题，你会如何解决？&lt;/p&gt;
&lt;p&gt;是在聊天群组里提问，然后被插科打诨，忘记自己的目标？&lt;/p&gt;
&lt;p&gt;还是自食其力，选择面向搜索引擎，费九牛二虎之力解决？&lt;/p&gt;
&lt;p&gt;自食其力是好事，然而面对开源项目时，直奔它的文档或者源代码是个缩小范围的好主意。&lt;/p&gt;
&lt;h3 id="_1"&gt;例子一&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Linux 课上老师提到了 umask ，它是创建文件和文件夹时需要额外减去的权限值，在 Unix 下为 022（&lt;span class="caps"&gt;WSL&lt;/span&gt; 为&amp;nbsp;000）课后有同学提出，按照老师的方法并不能得出答案。&lt;/p&gt;
&lt;p&gt;那么正确的计算是什么呢？答案在 linux&amp;nbsp;源码中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// snippet from dir.c &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dont_mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;current_umask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// snippet from fs_struct.c&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;current_umask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;umask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从代码可以看出 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;当你遇到一个问题，你会如何解决？&lt;/p&gt;
&lt;p&gt;是在聊天群组里提问，然后被插科打诨，忘记自己的目标？&lt;/p&gt;
&lt;p&gt;还是自食其力，选择面向搜索引擎，费九牛二虎之力解决？&lt;/p&gt;
&lt;p&gt;自食其力是好事，然而面对开源项目时，直奔它的文档或者源代码是个缩小范围的好主意。&lt;/p&gt;
&lt;h3 id="_1"&gt;例子一&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Linux 课上老师提到了 umask ，它是创建文件和文件夹时需要额外减去的权限值，在 Unix 下为 022（&lt;span class="caps"&gt;WSL&lt;/span&gt; 为&amp;nbsp;000）课后有同学提出，按照老师的方法并不能得出答案。&lt;/p&gt;
&lt;p&gt;那么正确的计算是什么呢？答案在 linux&amp;nbsp;源码中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// snippet from dir.c &lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dont_mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;current_umask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// snippet from fs_struct.c&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;current_umask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;umask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从代码可以看出，mode 是 &lt;code&gt;&amp;amp;&lt;/code&gt; 上 &lt;code&gt;~umask&lt;/code&gt; 得到的。&lt;/p&gt;
&lt;h3 id="2"&gt;例子2&lt;a class="headerlink" href="#2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Wox 是一个 Windows 下的启动器，用户可以使用 Python&amp;nbsp;来为其编写插件。&lt;/p&gt;
&lt;p&gt;由于 Wox 属于相对小众的应用，所以网上编写插件的例子不多。Python 开发的插件其实需要利用到 Wox&amp;nbsp;提供的几个接口，并且它们没有写在文档里面。&lt;/p&gt;
&lt;p&gt;这时需要通过阅读 Wox.py&amp;nbsp;来了解实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# snippet from Wox.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Wox python plugin base&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rpc_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# proxy is not working now&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rpc_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,{})&lt;/span&gt;
        &lt;span class="n"&gt;request_method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rpc_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rpc_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getmembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ismethod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;request_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;request_method_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;request_parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request_method_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;query&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;request_method_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;context_menu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从 Wox.py 的 Wox 类可以了解到是 rpc 请求，进一步查看 C#&amp;nbsp;代码检查提供的接口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Wox.Plugin&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Public APIs that plugin can use&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IPublicAPI&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Push result to query box&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;query&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;plugin&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;results&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete(&amp;quot;This method will be removed in Wox 1.3&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PushResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PluginMetadata&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Change Wox query&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;query&amp;quot;&amp;gt;query text&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;requery&amp;quot;&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// force requery By default, Wox will not fire query if your query is same with existing one. &lt;/span&gt;
        &lt;span class="c1"&gt;/// Set this to true to force Wox requerying&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ChangeQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;requery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Just change the query text, this won&amp;#39;t raise search&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;query&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ChangeQueryText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;selectAll&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Close Wox&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CloseApp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Restart Wox&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RestarApp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Hide Wox&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HideApp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Show Wox&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowApp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Show message box&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;title&amp;quot;&amp;gt;Message title&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;subTitle&amp;quot;&amp;gt;Message subtitle&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;iconPath&amp;quot;&amp;gt;Message icon path (relative path to your plugin folder)&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;subTitle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;iconPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Open setting dialog&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OpenSettingDialog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Show loading animation&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete(&amp;quot;automatically start&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;StartLoadingBar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Stop loading animation&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;        [Obsolete(&amp;quot;automatically stop&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;StopLoadingBar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Install Wox plugin&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;path&amp;quot;&amp;gt;Plugin path (ends with .wox)&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;InstallPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Get translation of current language&lt;/span&gt;
        &lt;span class="c1"&gt;/// You need to implement IPluginI18n if you want to support multiple languages for your plugin&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name=&amp;quot;key&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;GetTranslation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Get all loaded plugins &lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PluginPair&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetAllPlugins&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Fired after global keyboard events&lt;/span&gt;
        &lt;span class="c1"&gt;/// if you want to hook something like Ctrl+R, you should use this event&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;WoxGlobalKeyboardEventHandler&lt;/span&gt; &lt;span class="n"&gt;GlobalKeyboardEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因此，除了使用好搜索引擎，学会阅读源码也是一个开发人员必备的本领。&lt;/p&gt;</content><category term="Tech"></category><category term="Thought"></category></entry><entry><title>网站适配暗色模式</title><link href="https://weilet.me/%E7%BD%91%E7%AB%99%E9%80%82%E9%85%8D%E6%9A%97%E8%89%B2%E6%A8%A1%E5%BC%8F" rel="alternate"></link><published>2020-03-13T22:20:00+08:00</published><updated>2020-03-13T22:20:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-03-13:/网站适配暗色模式</id><summary type="html">&lt;h3 id="_1"&gt;起因&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;鉴于目前无论是 iOS 还是 Android&amp;nbsp;都在推行暗色模式，因此我也一直在想办法将我的网站适配暗色模式，好让各位看官的眼睛不被亮瞎。&lt;/p&gt;
&lt;h3 id="-javascript"&gt;方案一 - JavaScript实现&lt;a class="headerlink" href="#-javascript" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这是我最先想到的方案，首先为暗色模式编写一段样式，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;simple&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;posts&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#303030&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;posts&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;each&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ccc&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些样式都是 .dark&amp;nbsp;元素的子元素。&lt;/p&gt;
&lt;p&gt;随后利用 JavaScript 判断时间，在&lt;strong&gt;我认为&lt;/strong&gt;需要暗色模式的时间为 body 添加 .dark …&lt;/p&gt;</summary><content type="html">&lt;h3 id="_1"&gt;起因&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;鉴于目前无论是 iOS 还是 Android&amp;nbsp;都在推行暗色模式，因此我也一直在想办法将我的网站适配暗色模式，好让各位看官的眼睛不被亮瞎。&lt;/p&gt;
&lt;h3 id="-javascript"&gt;方案一 - JavaScript实现&lt;a class="headerlink" href="#-javascript" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这是我最先想到的方案，首先为暗色模式编写一段样式，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;simple&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;posts&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#303030&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;posts&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;each&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ccc&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些样式都是 .dark&amp;nbsp;元素的子元素。&lt;/p&gt;
&lt;p&gt;随后利用 JavaScript 判断时间，在&lt;strong&gt;我认为&lt;/strong&gt;需要暗色模式的时间为 body 添加 .dark 的&amp;nbsp;class&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nowHour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nowHour&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;nowHour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实施上，你可以写得更好（如使用日落日出时间来更改暗色模式）。&lt;/p&gt;
&lt;p&gt;这样实现起来还算方便，但缺点也不少。首先，暗色模式的启用的判断是以加载页面时的时间判断的。也就是说，如果你在晚上打开我的博客并放到翌日早上，它的样式仍旧是暗色的；其次，因为是在加载的时候判断，所以在网络速度慢的情况下，会完整地看到从浅色样式&lt;strong&gt;变&lt;/strong&gt;为暗色样式的过程，俗称“闪瞎眼”。&lt;/p&gt;
&lt;h3 id="-"&gt;方案二 - 媒体查询&lt;a class="headerlink" href="#-" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个也是我现在用的方案。通过 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme"&gt;prefers-color-scheme&lt;/a&gt;&amp;nbsp;来切换样式。&lt;/p&gt;
&lt;p&gt;prefers-color-scheme&amp;nbsp;媒体查询有三种结果：未指定、浅色、和暗色。&lt;/p&gt;
&lt;p&gt;在实现的过程中，可以未指定和浅色合并，作为默认样式，然后为暗色模式编写另一套样式。&lt;/p&gt;
&lt;p&gt;这个方案编写的样式文件大概长这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* 浅色样式 */&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* 暗色样式 */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;方案二完美解决了方案一的痛点，唯一的不足就是由于 prefers-color-scheme 是个比较新的属性（chrome 76 才开始支持），所以老旧的浏览器可能不支持（谁要支持 &lt;span class="caps"&gt;IE&lt;/span&gt;&amp;nbsp;这个老古董呢？）&lt;/p&gt;</content><category term="Tech"></category><category term="Interaction"></category><category term="Front end"></category></entry><entry><title>Rust with WebAssembly</title><link href="https://weilet.me/Rust%20with%20WebAssembly" rel="alternate"></link><published>2020-03-10T05:09:00+08:00</published><updated>2020-03-10T05:09:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-03-10:/Rust with WebAssembly</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;大人，时代变了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="about-wasm"&gt;About wasm&lt;a class="headerlink" href="#about-wasm" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebAssembly ，亦称 wasm ，是一种基于浏览器的虚拟机的代码。由于它是二进制的，因此机器能够较快的执行。wasm 目前不能直接编写，它可以由 C/C++/Rust 生成。目前，Chrome 、 Microsoft Edge 、 Firefox 、 Safari 支持&amp;nbsp;wasm。&lt;/p&gt;
&lt;h3 id="why-rust"&gt;Why Rust?&lt;a class="headerlink" href="#why-rust" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我在学习 Rust ，Rust&amp;nbsp;是一门写起来很愉快的语言。&lt;/p&gt;
&lt;h3 id="_1"&gt;准备&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="rust"&gt;安装Rust&lt;a class="headerlink" href="#rust" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.rust-lang.org/zh-CN/tools/install"&gt;Rust官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="wasm-pack"&gt;安装wasm-pack&lt;a class="headerlink" href="#wasm-pack" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://rustwasm.github.io/wasm-pack/installer/"&gt;Rustwasm官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;流程&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;新建项目&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cargo new wasm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目录结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├── Cargo.toml&lt;/span&gt;
&lt;span class="err"&gt;└── src&lt;/span&gt;
&lt;span class="err"&gt;    └── lib.rs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[dependencies]&lt;/span&gt;
&lt;span class="n"&gt;wasm-bindgen …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;大人，时代变了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="about-wasm"&gt;About wasm&lt;a class="headerlink" href="#about-wasm" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebAssembly ，亦称 wasm ，是一种基于浏览器的虚拟机的代码。由于它是二进制的，因此机器能够较快的执行。wasm 目前不能直接编写，它可以由 C/C++/Rust 生成。目前，Chrome 、 Microsoft Edge 、 Firefox 、 Safari 支持&amp;nbsp;wasm。&lt;/p&gt;
&lt;h3 id="why-rust"&gt;Why Rust?&lt;a class="headerlink" href="#why-rust" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我在学习 Rust ，Rust&amp;nbsp;是一门写起来很愉快的语言。&lt;/p&gt;
&lt;h3 id="_1"&gt;准备&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="rust"&gt;安装Rust&lt;a class="headerlink" href="#rust" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.rust-lang.org/zh-CN/tools/install"&gt;Rust官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="wasm-pack"&gt;安装wasm-pack&lt;a class="headerlink" href="#wasm-pack" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://rustwasm.github.io/wasm-pack/installer/"&gt;Rustwasm官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;流程&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;新建项目&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cargo new wasm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目录结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├── Cargo.toml&lt;/span&gt;
&lt;span class="err"&gt;└── src&lt;/span&gt;
&lt;span class="err"&gt;    └── lib.rs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[dependencies]&lt;/span&gt;
&lt;span class="n"&gt;wasm-bindgen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.2.48&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;update&amp;nbsp;一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cargo update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编写 Rust&amp;nbsp;代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// lib.rs&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wasm_bindgen&lt;/span&gt;::&lt;span class="n"&gt;prelude&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[wasm_bindgen]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译 Rust 代码为&amp;nbsp;WebAssembly&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;wasm-pack build --no-typescript --target web --mode normal   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成在 pkg&amp;nbsp;目录&lt;/p&gt;
&lt;p&gt;目录结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├── wasm.js&lt;/span&gt;
&lt;span class="err"&gt;└── wasm_bg.wasm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编写 html 文件调用&amp;nbsp;wasm&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/pkg/wasm.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/pkg/wasm_bg.wasm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果成功，你将在 Chrome 的 console&amp;nbsp;中看到答案。&lt;/p&gt;
&lt;h3 id="why-wasm-faster"&gt;Why wasm faster?&lt;a class="headerlink" href="#why-wasm-faster" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可参考：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/Concepts#WebAssembly%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"&gt;mozilla官网介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="[https://hasaki.xyz/blog/2019-07-20-%E4%BD%BF%E7%94%A8-rust-%E7%BC%96%E5%86%99-webassembly-/](https://hasaki.xyz/blog/2019-07-20-使用-rust-编写-webassembly-/)"&gt;Tom’s&amp;nbsp;zone博客&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Rust"></category><category term="wasm"></category></entry><entry><title>安装 spf13-vim</title><link href="https://weilet.me/%E5%AE%89%E8%A3%85%20spf13-vim" rel="alternate"></link><published>2020-03-03T23:25:00+08:00</published><updated>2020-03-03T23:25:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-03-03:/安装 spf13-vim</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;spf13-vim之于vim，恰如oh-my-zsh之于zsh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由于课程需要，我需要（真正地）使用 vim 这一编辑器。鉴于“颜值即是第一生产力的说法”，我是无法在黑黑丑丑的界面下写代码滴。其实在去年我就开始折腾 vim 的外观配置，然而由于艺术天赋有限而艺术追求无限的缘故，最终放弃。直到前几天我发现了&lt;a href="https://github.com/spf13/spf13-vim"&gt;spf13-vim&lt;/a&gt;这个好东西，当然是赶紧装上体验一番啦！&lt;/p&gt;
&lt;h3 id="_2"&gt;准备&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;spf13-vim 需要 vim with lua，因为它有些插件是用 lua&amp;nbsp;编写的。&lt;/p&gt;
&lt;p&gt;查看是否支持&amp;nbsp;lua&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim --version &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;+lua&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Vim with lua&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Vim witho&lt;/span&gt;
&lt;span class="s2"&gt;ut lua&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不支持需要安装&lt;code&gt;vim-nox …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;spf13-vim之于vim，恰如oh-my-zsh之于zsh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由于课程需要，我需要（真正地）使用 vim 这一编辑器。鉴于“颜值即是第一生产力的说法”，我是无法在黑黑丑丑的界面下写代码滴。其实在去年我就开始折腾 vim 的外观配置，然而由于艺术天赋有限而艺术追求无限的缘故，最终放弃。直到前几天我发现了&lt;a href="https://github.com/spf13/spf13-vim"&gt;spf13-vim&lt;/a&gt;这个好东西，当然是赶紧装上体验一番啦！&lt;/p&gt;
&lt;h3 id="_2"&gt;准备&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;spf13-vim 需要 vim with lua，因为它有些插件是用 lua&amp;nbsp;编写的。&lt;/p&gt;
&lt;p&gt;查看是否支持&amp;nbsp;lua&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim --version &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;+lua&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Vim with lua&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Vim witho&lt;/span&gt;
&lt;span class="s2"&gt;ut lua&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不支持需要安装&lt;code&gt;vim-nox&lt;/code&gt;（安装什么取决于你的图形环境：&lt;a href="https://github.com/Shougo/neocomplete.vim#debian-or-ubuntu"&gt;详情&lt;/a&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install vim-nox
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;安装&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根据官方文档直接安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://j.mp/spf13-vim3 -L &amp;gt; spf13-vim.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh spf13-vim.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;历时比较久，需要耐心等待，中间有几个插件会安装失败，属于正常行为。&lt;/p&gt;
&lt;p&gt;安装失败的插件可以在 Vundle 中继续安装。在 Vim 的底命令模式下输入&lt;code&gt;PluginInstall&lt;/code&gt;随后会逐个更新（或安装）预设的插件。&lt;/p&gt;</content><category term="Tech"></category><category term="Linux"></category></entry><entry><title>谈谈 Python 中的 for 循环（2）</title><link href="https://weilet.me/%E8%B0%88%E8%B0%88%20Python%20%E4%B8%AD%E7%9A%84%20for%20%E5%BE%AA%E7%8E%AF%EF%BC%882%EF%BC%89" rel="alternate"></link><published>2020-02-26T22:25:00+08:00</published><updated>2020-02-26T22:25:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-02-26:/谈谈 Python 中的 for 循环（2）</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;总忘记for语句的原理，属文记之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;前置知识&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="_2"&gt;作用域&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python 中的 for&amp;nbsp;循环并没有引入作用域(scope)的概念，但函数定义有引入作用域。&lt;/p&gt;
&lt;h4 id="legb"&gt;LEGB法则&lt;a class="headerlink" href="#legb" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;python&amp;nbsp;中变量的搜索按照以下路径进行：&lt;/p&gt;
&lt;p&gt;本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing&amp;nbsp;locals）→全局/模块作用域（Global）→内置作用域（Built-in）&lt;/p&gt;
&lt;h4 id="_3"&gt;引用计数机制&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python 语言默认采用引用计数机制垃圾回收机制，当对象的引用计数为 0 时会被回收。默认创建的对象引用计数永不为&amp;nbsp;0&lt;/p&gt;
&lt;h3 id="_4"&gt;&lt;a class="headerlink" href="#_4" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="for"&gt;for循环变量在外部的状态&lt;a class="headerlink" href="#for" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看上去会抛出异常，然而事实上它运作正常。&lt;/p&gt;
&lt;p&gt;我们用前置知识去解释它：&lt;/p&gt;
&lt;p&gt;首先由于 for 没有作用域的概念，所以全局的 x …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;总忘记for语句的原理，属文记之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;前置知识&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="_2"&gt;作用域&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python 中的 for&amp;nbsp;循环并没有引入作用域(scope)的概念，但函数定义有引入作用域。&lt;/p&gt;
&lt;h4 id="legb"&gt;LEGB法则&lt;a class="headerlink" href="#legb" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;python&amp;nbsp;中变量的搜索按照以下路径进行：&lt;/p&gt;
&lt;p&gt;本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing&amp;nbsp;locals）→全局/模块作用域（Global）→内置作用域（Built-in）&lt;/p&gt;
&lt;h4 id="_3"&gt;引用计数机制&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Python 语言默认采用引用计数机制垃圾回收机制，当对象的引用计数为 0 时会被回收。默认创建的对象引用计数永不为&amp;nbsp;0&lt;/p&gt;
&lt;h3 id="_4"&gt;&lt;a class="headerlink" href="#_4" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="for"&gt;for循环变量在外部的状态&lt;a class="headerlink" href="#for" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看上去会抛出异常，然而事实上它运作正常。&lt;/p&gt;
&lt;p&gt;我们用前置知识去解释它：&lt;/p&gt;
&lt;p&gt;首先由于 for 没有作用域的概念，所以全局的 x 的会得到 for&amp;nbsp;循环中最后的值。&lt;/p&gt;
&lt;p&gt;因为 x 为默认创建的对象（常量为解释器默认创建的对象），它当然不会被回收，所以的确存在。因此最终的 print(x)能够运作并打印出&amp;nbsp;10。&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category></entry><entry><title>谈谈 Python 中的 for 循环（1）</title><link href="https://weilet.me/%E8%B0%88%E8%B0%88%20Python%20%E4%B8%AD%E7%9A%84%20for%20%E5%BE%AA%E7%8E%AF%EF%BC%881%EF%BC%89" rel="alternate"></link><published>2020-02-25T22:25:00+08:00</published><updated>2020-02-25T22:25:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-02-25:/谈谈 Python 中的 for 循环（1）</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;总忘记for语句的原理，属文记之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;前置知识&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="_2"&gt;可迭代对象&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;对于任何一个实现了 &lt;code&gt;__iter__&lt;/code&gt; 方法的对象，我们称之为可迭代对象&lt;/p&gt;
&lt;h4 id="_3"&gt;迭代器对象&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当调用可迭代对象的 &lt;code&gt;__iter__&lt;/code&gt;方法，它会返回一个迭代器对象；&lt;/p&gt;
&lt;p&gt;迭代器对象是&lt;strong&gt;已经&lt;/strong&gt;实现了 &lt;code&gt;__next__&lt;/code&gt; 方法的对象&lt;/p&gt;
&lt;h4 id="stopiteration"&gt;StopIteration异常&lt;a class="headerlink" href="#stopiteration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当调用迭代器对象的 &lt;code&gt;__next__&lt;/code&gt; 方法而无下一个元素时，它会抛出 StopIteration&amp;nbsp;异常&lt;/p&gt;
&lt;h4 id="_4"&gt;魔法方法&lt;a class="headerlink" href="#_4" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;以双下划线开头和结尾的方法；&lt;/p&gt;
&lt;p&gt;一般而言，对于对象 &lt;code&gt;object_xyz&lt;/code&gt; 魔法方法 &lt;code&gt;__abc__&lt;/code&gt; ，其调用方式为&amp;nbsp;abc(object_xyz)&lt;/p&gt;
&lt;h3 id="_5"&gt;整体流程&lt;a class="headerlink" href="#_5" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在上述前置知识和一定的 python&amp;nbsp;基础下，我们来看这段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# A&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_case …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;总忘记for语句的原理，属文记之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;前置知识&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="_2"&gt;可迭代对象&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;对于任何一个实现了 &lt;code&gt;__iter__&lt;/code&gt; 方法的对象，我们称之为可迭代对象&lt;/p&gt;
&lt;h4 id="_3"&gt;迭代器对象&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当调用可迭代对象的 &lt;code&gt;__iter__&lt;/code&gt;方法，它会返回一个迭代器对象；&lt;/p&gt;
&lt;p&gt;迭代器对象是&lt;strong&gt;已经&lt;/strong&gt;实现了 &lt;code&gt;__next__&lt;/code&gt; 方法的对象&lt;/p&gt;
&lt;h4 id="stopiteration"&gt;StopIteration异常&lt;a class="headerlink" href="#stopiteration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当调用迭代器对象的 &lt;code&gt;__next__&lt;/code&gt; 方法而无下一个元素时，它会抛出 StopIteration&amp;nbsp;异常&lt;/p&gt;
&lt;h4 id="_4"&gt;魔法方法&lt;a class="headerlink" href="#_4" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;以双下划线开头和结尾的方法；&lt;/p&gt;
&lt;p&gt;一般而言，对于对象 &lt;code&gt;object_xyz&lt;/code&gt; 魔法方法 &lt;code&gt;__abc__&lt;/code&gt; ，其调用方式为&amp;nbsp;abc(object_xyz)&lt;/p&gt;
&lt;h3 id="_5"&gt;整体流程&lt;a class="headerlink" href="#_5" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在上述前置知识和一定的 python&amp;nbsp;基础下，我们来看这段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# A&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# B&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码段 A 即为代码段 B（也就是一段 for&amp;nbsp;循环语句）的实现：&lt;/p&gt;
&lt;p&gt;首先获取可迭代对象的迭代器对象，然后对迭代器对象不断地调用 next()方法直到抛出 StopIteration&amp;nbsp;异常。&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category></entry><entry><title>Windows Terminal 折腾指南</title><link href="https://weilet.me/Windows%20Terminal%20%E6%8A%98%E8%85%BE%E6%8C%87%E5%8D%97" rel="alternate"></link><published>2020-02-14T22:25:00+08:00</published><updated>2020-02-14T22:25:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-02-14:/Windows Terminal 折腾指南</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;终端是程序员的浪漫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我从 2017 年年底开始接触终端这个概念，那时候我对它一知半解，是个被 &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;宠坏的巨婴。&lt;/p&gt;
&lt;p&gt;直到后来，我碰见了&lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;，它的高颜值和高度定制使我沉迷。然而渐渐地我觉得它的速度比起原生的慢太多了。而且有些时候我需要切换 PowerShell 和 &lt;span class="caps"&gt;WSL&lt;/span&gt;，它并不支持。&lt;/p&gt;
&lt;p&gt;能够打败原生的，只有原生。某天我在 Django 交流群里了解到&lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt;（下称 Terminal），一番折腾，流畅的同时还能够多个 shell&amp;nbsp;切换，值得安利！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意：Windows Terminal需要Windows 10 1903或更高版本&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;预备&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我假设你是使用 &lt;span class="caps"&gt;WSL&lt;/span&gt;&amp;nbsp;的：&lt;/p&gt;
&lt;p&gt;首先，开启 &lt;span class="caps"&gt;WSL&lt;/span&gt; 功能（Cortana&amp;nbsp;里搜索功能，一溜儿找下来）&lt;/p&gt;
&lt;p&gt;然后，在 …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;终端是程序员的浪漫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我从 2017 年年底开始接触终端这个概念，那时候我对它一知半解，是个被 &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;宠坏的巨婴。&lt;/p&gt;
&lt;p&gt;直到后来，我碰见了&lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;，它的高颜值和高度定制使我沉迷。然而渐渐地我觉得它的速度比起原生的慢太多了。而且有些时候我需要切换 PowerShell 和 &lt;span class="caps"&gt;WSL&lt;/span&gt;，它并不支持。&lt;/p&gt;
&lt;p&gt;能够打败原生的，只有原生。某天我在 Django 交流群里了解到&lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt;（下称 Terminal），一番折腾，流畅的同时还能够多个 shell&amp;nbsp;切换，值得安利！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意：Windows Terminal需要Windows 10 1903或更高版本&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;预备&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我假设你是使用 &lt;span class="caps"&gt;WSL&lt;/span&gt;&amp;nbsp;的：&lt;/p&gt;
&lt;p&gt;首先，开启 &lt;span class="caps"&gt;WSL&lt;/span&gt; 功能（Cortana&amp;nbsp;里搜索功能，一溜儿找下来）&lt;/p&gt;
&lt;p&gt;然后，在 Microsoft Store 找到你喜欢的发行版（比如我就喜欢&amp;nbsp;Ubuntu）安装&lt;/p&gt;
&lt;h3 id="_2"&gt;安装&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="microsoft-store"&gt;Microsoft Store&lt;a class="headerlink" href="#microsoft-store" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;最简单的方法，目前使用下来没有任何问题。&lt;/p&gt;
&lt;h4 id="_3"&gt;自行编译&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/terminal#manually-installing-builds-from-this-repository"&gt;官方文档&lt;/a&gt;请。大哥都选择自行编译了，看看文档肯定会。&lt;/p&gt;
&lt;h4 id="chocolatey"&gt;Chocolatey&lt;a class="headerlink" href="#chocolatey" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;choco install microsoft-windows-terminal&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Chocolatey&amp;nbsp;的下载速度超级慢的说)&lt;/p&gt;
&lt;h3 id="_4"&gt;配置&lt;a class="headerlink" href="#_4" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;打开 Terminal，找到 setting&amp;nbsp;位置。&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md#globals"&gt;这里&lt;/a&gt;查看全局设置&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md#profiles"&gt;这里&lt;/a&gt;查看单独设置&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md#implemented-commands-and-actions"&gt;这里&lt;/a&gt;查看快捷键配置&lt;/p&gt;
&lt;p&gt;一番配置后，你的 Terminal&amp;nbsp;的雏形就完成了。&lt;/p&gt;
&lt;h3 id="wsl"&gt;WSL优化&lt;a class="headerlink" href="#wsl" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="zsh"&gt;安装zsh&lt;a class="headerlink" href="#zsh" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install zsh&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="zshbash"&gt;设置zsh为默认bash&lt;a class="headerlink" href="#zshbash" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sed -i '1i bash -c zsh' ~/.bashrc&lt;/code&gt; &lt;/p&gt;
&lt;h4 id="oh-my-zsh"&gt;安装oh-my-zsh&lt;a class="headerlink" href="#oh-my-zsh" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="_5"&gt;安装插件&lt;a class="headerlink" href="#_5" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh"&gt;zsh语法高亮&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh"&gt;zsh历史记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 zshrc&amp;nbsp;中配置：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意☠&lt;/strong&gt;：插件之间是以空格分隔的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plugins=(git sublime zsh-syntax-highlighting zsh-autosuggestions)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="powershell"&gt;PowerShell优化&lt;a class="headerlink" href="#powershell" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意☠&lt;/strong&gt;：以管理员身份单独运行&amp;nbsp;PowerShell&lt;/p&gt;
&lt;h4 id="posh-git"&gt;安装posh-git&lt;a class="headerlink" href="#posh-git" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Install-Module posh-git -Scope CurrentUser&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="oh-my-posh"&gt;安装oh-my-posh&lt;a class="headerlink" href="#oh-my-posh" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Install-Module oh-my-posh -Scope CurrentUser&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="_6"&gt;选择主题&lt;a class="headerlink" href="#_6" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;notepad $profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在弹出的文本编辑器中输入以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Import-Module&lt;/span&gt; &lt;span class="n"&gt;oh-my-posh&lt;/span&gt;
&lt;span class="nb"&gt;set-Theme&lt;/span&gt; &lt;span class="n"&gt;robbyrussell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随后你可以在 posh 中输入&lt;code&gt;set-Theme lily-is-cool&lt;/code&gt; 来获取所有主题的名字并以上述方法修改主题。&lt;/p&gt;
&lt;h3 id="_7"&gt;字体优化&lt;a class="headerlink" href="#_7" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="powerline"&gt;安装powerline字体&lt;a class="headerlink" href="#powerline" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/powerline/fonts.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在克隆的目录中找到&lt;code&gt;install.ps1&lt;/code&gt;，双击它即可自动安装字体。&lt;/p&gt;
&lt;h4 id="terminal"&gt;配置到Terminal&lt;a class="headerlink" href="#terminal" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;找到这个字段：“fontFace”，把它们的值都改为：“Meslo &lt;span class="caps"&gt;LG&lt;/span&gt; M for&amp;nbsp;powerLine”&lt;/p&gt;
&lt;h3 id="one-more-thing"&gt;One More Thing&lt;a class="headerlink" href="#one-more-thing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;甚是怀念 PowerShell 的“从此打开 PowerShell”的右键菜单，于是为 Terminal&amp;nbsp;配置之&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Windows Registry Editor Version 5.00

&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;HKEY_CLASSES_ROOT&lt;/span&gt;&lt;span class="k"&gt;\Directory\Background\shell\wt]&lt;/span&gt;
&lt;span class="na"&gt;@&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{右键菜单文字}&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot;Icon&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{icon的绝对路径}&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;HKEY_CLASSES_ROOT&lt;/span&gt;&lt;span class="k"&gt;\Directory\Background\shell\wt\command]&lt;/span&gt;
&lt;span class="na"&gt;@&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{Terminal的可执行文件的绝对路径，名称为wt.exe} -d .&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将上面的文本另存为注册表项(后缀为.reg)，点击添加即可（现在你可以在这里下载&lt;a href="https://github.com/python-zen-place/open-terminal-here"&gt;脚本&lt;/a&gt;来配置）&lt;/p&gt;
&lt;p&gt;另外，在配置文件中的“startingDirectory”决定了你&lt;strong&gt;新增&lt;/strong&gt;Tab 的路径，你可以将它的值设置为“.”以保证新增的 Tab&amp;nbsp;的路径也是当前工作路径。&lt;/p&gt;</content><category term="Tech"></category><category term="Windows"></category><category term="Terminal"></category></entry><entry><title>新的钢笔</title><link href="https://weilet.me/%E6%96%B0%E7%9A%84%E9%92%A2%E7%AC%94" rel="alternate"></link><published>2020-02-07T19:42:00+08:00</published><updated>2020-02-07T19:42:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-02-07:/新的钢笔</id><content type="html">&lt;blockquote&gt;
&lt;p&gt;年前朋友送了一支凌美演绎，用到现在也快两周了，说说体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;流畅性&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我之前买过一支百乐的&amp;nbsp;78G，使用后惊叹于日式钢笔的顺滑。同时我还试用过同学的狩猎者。一直觉得凌美的钢笔虽然容易出锋但是真的很涩。但实际上，演绎比狩猎者要顺滑很多，而且还是一样容易出锋。&lt;/p&gt;
&lt;h3 id="_2"&gt;舒适性&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;金属笔杆很滑很舒服。如果把笔帽盖到后面会有点重，我不喜欢。目前只它用来写小抄和做手帐，不知道大书写量下会不会累人。&lt;/p&gt;
&lt;h3 id="_3"&gt;美观性&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我这支是纯黑的，我觉得普通但有质感。网上看蓝色和白金色很好看，但是既然是送的也就不奢求这么多啦。&lt;/p&gt;
&lt;h3 id="_4"&gt;便捷性&lt;a class="headerlink" href="#_4" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上墨只需三步：旋开笔，换墨囊，旋回笔。等送的墨囊用完了还是用墨水吧，虽然麻烦一点，但一罐百乐 ink30&amp;nbsp;可以用三四个月，比墨囊划算。&lt;/p&gt;</content><category term="Daily"></category><category term="Pen"></category></entry><entry><title>Python3.8 新特性</title><link href="https://weilet.me/Python3.8%20%E6%96%B0%E7%89%B9%E6%80%A7" rel="alternate"></link><published>2020-02-06T21:46:00+08:00</published><updated>2020-02-06T21:46:00+08:00</updated><author><name>Weilet</name></author><id>tag:weilet.me,2020-02-06:/Python3.8 新特性</id><summary type="html">&lt;h3 id="_1"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#assignment-expressions"&gt;海象运算符&lt;/a&gt;&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我期待很久的特性，可以在表达式内赋值&lt;/p&gt;
&lt;p&gt;先前的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{len(a)}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在的写法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{n}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;明显减少了一次&amp;nbsp;len()函数的调用，当然可读性会稍有下降。&lt;/p&gt;
&lt;h3 id="_2"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#positional-only-parameters"&gt;仅限位置形参&lt;/a&gt;&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;形参位置的“/”前为仅限位置形参，后为关键字形参。&lt;/p&gt;
&lt;p&gt;所谓仅限位置形参，就是你不能通过指定关键字去给它赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设我们常用的 sort()函数的形参全为仅限位置形参，那么下面这种写法是错的&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# THIS IS …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3 id="_1"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#assignment-expressions"&gt;海象运算符&lt;/a&gt;&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我期待很久的特性，可以在表达式内赋值&lt;/p&gt;
&lt;p&gt;先前的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{len(a)}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在的写法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{n}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;明显减少了一次&amp;nbsp;len()函数的调用，当然可读性会稍有下降。&lt;/p&gt;
&lt;h3 id="_2"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#positional-only-parameters"&gt;仅限位置形参&lt;/a&gt;&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;形参位置的“/”前为仅限位置形参，后为关键字形参。&lt;/p&gt;
&lt;p&gt;所谓仅限位置形参，就是你不能通过指定关键字去给它赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假设我们常用的 sort()函数的形参全为仅限位置形参，那么下面这种写法是错的&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# THIS IS WRONG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目前来看，比较有用的地方是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让函数的调用不那么呆萌（？）&lt;/li&gt;
&lt;li&gt;在使用 kwargs 时可以保证 kwargs 中 key 的任意性（即便 key&amp;nbsp;与仅限位置形参重名也能被处理）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#parallel-filesystem-cache-for-compiled-bytecode-files"&gt;指定字节码缓存的位置&lt;/a&gt;&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;简单地说就是以前生成在__pycache__文件夹的缓存文件可以换地方放了，详细地自己戳小标题的链接看吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pycache_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path_you_want_to_add&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="abi"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#debug-build-uses-the-same-abi-as-release-build"&gt;统一调试构建和发布构建的ABI&lt;/a&gt;&lt;a class="headerlink" href="#abi" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;是的，我看不懂&lt;/p&gt;
&lt;h3 id="f-string"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#f-strings-support-for-self-documenting-expressions-and-debugging"&gt;f-string增强&lt;/a&gt;&lt;a class="headerlink" href="#f-string" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;形式为 &lt;code&gt;f'{expr=}'&lt;/code&gt; 的&amp;nbsp;f-字符串将扩展表示为表达式文本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;slogan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;我很酷&amp;#39;&lt;/span&gt;
&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{slogan=}&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# output: &amp;quot;slogan=&amp;#39;我很酷&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;=&lt;/code&gt; 说明符将输出整个表达式，以便详细演示计算过程&lt;/p&gt;
&lt;h3 id="pickle"&gt;&lt;a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html#pickle-protocol-5-with-out-of-band-data-buffers"&gt;pickle变快了&lt;/a&gt;&lt;a class="headerlink" href="#pickle" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当使用 &lt;a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#module-pickle"&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; 在 Python&amp;nbsp;进程间传输大量数据以充分发挥多核或多机处理的优势时，非常重要一点是通过减少内存拷贝来优化传输效率，并可能应用一些定制技巧例如针对特定数据的压缩。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个特性将在3.9完全公开，略过；&lt;/p&gt;
&lt;p&gt;所有的提案都略过；&lt;/p&gt;
&lt;p&gt;其他语言特性修改略过。&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Tech"></category><category term="Python"></category></entry></feed>